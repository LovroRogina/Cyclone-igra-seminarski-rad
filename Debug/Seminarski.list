
Seminarski.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008990  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08008b60  08008b60  00018b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed8  08008ed8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee0  08008ee0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f0c  20000090  08008f78  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f9c  08008f78  00020f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013334  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d82  00000000  00000000  00033437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  000361c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e05  00000000  00000000  000373a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e73  00000000  00000000  000381a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017702  00000000  00000000  0005c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5827  00000000  00000000  0007371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055e8  00000000  00000000  00148f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b48 	.word	0x08008b48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08008b48 	.word	0x08008b48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b970 	b.w	8000f84 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9e08      	ldr	r6, [sp, #32]
 8000cc2:	460d      	mov	r5, r1
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	460f      	mov	r7, r1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d14a      	bne.n	8000d62 <__udivmoddi4+0xa6>
 8000ccc:	428a      	cmp	r2, r1
 8000cce:	4694      	mov	ip, r2
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0xe2>
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	b143      	cbz	r3, 8000cea <__udivmoddi4+0x2e>
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	f1c3 0220 	rsb	r2, r3, #32
 8000ce0:	409f      	lsls	r7, r3
 8000ce2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	409c      	lsls	r4, r3
 8000cea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cee:	fa1f f58c 	uxth.w	r5, ip
 8000cf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf6:	0c22      	lsrs	r2, r4, #16
 8000cf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d00:	fb01 f005 	mul.w	r0, r1, r5
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x62>
 8000d08:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d10:	f080 811c 	bcs.w	8000f4c <__udivmoddi4+0x290>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f240 8119 	bls.w	8000f4c <__udivmoddi4+0x290>
 8000d1a:	3902      	subs	r1, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	b2a4      	uxth	r4, r4
 8000d22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2e:	fb00 f505 	mul.w	r5, r0, r5
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x90>
 8000d36:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3e:	f080 8107 	bcs.w	8000f50 <__udivmoddi4+0x294>
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	f240 8104 	bls.w	8000f50 <__udivmoddi4+0x294>
 8000d48:	4464      	add	r4, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11e      	cbz	r6, 8000d5e <__udivmoddi4+0xa2>
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0xbc>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	f000 80ed 	beq.w	8000f46 <__udivmoddi4+0x28a>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d149      	bne.n	8000e14 <__udivmoddi4+0x158>
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xce>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2be>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	4617      	mov	r7, r2
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d0e2      	beq.n	8000d5e <__udivmoddi4+0xa2>
 8000d98:	e9c6 4700 	strd	r4, r7, [r6]
 8000d9c:	e7df      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xe6>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f382 	clz	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x210>
 8000dac:	1a8a      	subs	r2, r1, r2
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	2101      	movs	r1, #1
 8000db8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dc0:	0c22      	lsrs	r2, r4, #16
 8000dc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc6:	fb0e f005 	mul.w	r0, lr, r5
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x124>
 8000dce:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x122>
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	f200 80cb 	bhi.w	8000f74 <__udivmoddi4+0x2b8>
 8000dde:	4645      	mov	r5, r8
 8000de0:	1a12      	subs	r2, r2, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df0:	fb0e fe00 	mul.w	lr, lr, r0
 8000df4:	45a6      	cmp	lr, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x14e>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x14c>
 8000e02:	45a6      	cmp	lr, r4
 8000e04:	f200 80bb 	bhi.w	8000f7e <__udivmoddi4+0x2c2>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e12:	e79f      	b.n	8000d54 <__udivmoddi4+0x98>
 8000e14:	f1c1 0720 	rsb	r7, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e22:	fa05 f401 	lsl.w	r4, r5, r1
 8000e26:	fa20 f307 	lsr.w	r3, r0, r7
 8000e2a:	40fd      	lsrs	r5, r7
 8000e2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e44:	fb08 f50e 	mul.w	r5, r8, lr
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b0>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e5c:	f080 8088 	bcs.w	8000f70 <__udivmoddi4+0x2b4>
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	f240 8085 	bls.w	8000f70 <__udivmoddi4+0x2b4>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4464      	add	r4, ip
 8000e6c:	1b64      	subs	r4, r4, r5
 8000e6e:	b29d      	uxth	r5, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e80:	45a6      	cmp	lr, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1da>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e8c:	d26c      	bcs.n	8000f68 <__udivmoddi4+0x2ac>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	d96a      	bls.n	8000f68 <__udivmoddi4+0x2ac>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ea2:	42ac      	cmp	r4, r5
 8000ea4:	46c8      	mov	r8, r9
 8000ea6:	46ae      	mov	lr, r5
 8000ea8:	d356      	bcc.n	8000f58 <__udivmoddi4+0x29c>
 8000eaa:	d053      	beq.n	8000f54 <__udivmoddi4+0x298>
 8000eac:	b156      	cbz	r6, 8000ec4 <__udivmoddi4+0x208>
 8000eae:	ebb0 0208 	subs.w	r2, r0, r8
 8000eb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eba:	40ca      	lsrs	r2, r1
 8000ebc:	40cc      	lsrs	r4, r1
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ecc:	f1c3 0120 	rsb	r1, r3, #32
 8000ed0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed8:	fa25 f101 	lsr.w	r1, r5, r1
 8000edc:	409d      	lsls	r5, r3
 8000ede:	432a      	orrs	r2, r5
 8000ee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee4:	fa1f fe8c 	uxth.w	lr, ip
 8000ee8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eec:	fb07 1510 	mls	r5, r7, r0, r1
 8000ef0:	0c11      	lsrs	r1, r2, #16
 8000ef2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef6:	fb00 f50e 	mul.w	r5, r0, lr
 8000efa:	428d      	cmp	r5, r1
 8000efc:	fa04 f403 	lsl.w	r4, r4, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x258>
 8000f02:	eb1c 0101 	adds.w	r1, ip, r1
 8000f06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0a:	d22f      	bcs.n	8000f6c <__udivmoddi4+0x2b0>
 8000f0c:	428d      	cmp	r5, r1
 8000f0e:	d92d      	bls.n	8000f6c <__udivmoddi4+0x2b0>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	1b49      	subs	r1, r1, r5
 8000f16:	b292      	uxth	r2, r2
 8000f18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	fb05 f10e 	mul.w	r1, r5, lr
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x282>
 8000f2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f34:	d216      	bcs.n	8000f64 <__udivmoddi4+0x2a8>
 8000f36:	4291      	cmp	r1, r2
 8000f38:	d914      	bls.n	8000f64 <__udivmoddi4+0x2a8>
 8000f3a:	3d02      	subs	r5, #2
 8000f3c:	4462      	add	r2, ip
 8000f3e:	1a52      	subs	r2, r2, r1
 8000f40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f44:	e738      	b.n	8000db8 <__udivmoddi4+0xfc>
 8000f46:	4631      	mov	r1, r6
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e708      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	e6e6      	b.n	8000d1e <__udivmoddi4+0x62>
 8000f50:	4610      	mov	r0, r2
 8000f52:	e6fb      	b.n	8000d4c <__udivmoddi4+0x90>
 8000f54:	4548      	cmp	r0, r9
 8000f56:	d2a9      	bcs.n	8000eac <__udivmoddi4+0x1f0>
 8000f58:	ebb9 0802 	subs.w	r8, r9, r2
 8000f5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f60:	3b01      	subs	r3, #1
 8000f62:	e7a3      	b.n	8000eac <__udivmoddi4+0x1f0>
 8000f64:	4645      	mov	r5, r8
 8000f66:	e7ea      	b.n	8000f3e <__udivmoddi4+0x282>
 8000f68:	462b      	mov	r3, r5
 8000f6a:	e794      	b.n	8000e96 <__udivmoddi4+0x1da>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	e7d1      	b.n	8000f14 <__udivmoddi4+0x258>
 8000f70:	46d0      	mov	r8, sl
 8000f72:	e77b      	b.n	8000e6c <__udivmoddi4+0x1b0>
 8000f74:	3d02      	subs	r5, #2
 8000f76:	4462      	add	r2, ip
 8000f78:	e732      	b.n	8000de0 <__udivmoddi4+0x124>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xd8>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e742      	b.n	8000e0a <__udivmoddi4+0x14e>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_DMA_Init+0x3c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <MX_DMA_Init+0x3c>)
 8000f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_DMA_Init+0x3c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2039      	movs	r0, #57	; 0x39
 8000fb0:	f001 fe8b 	bl	8002cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fb4:	2039      	movs	r0, #57	; 0x39
 8000fb6:	f001 fea4 	bl	8002d02 <HAL_NVIC_EnableIRQ>

}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <MX_GPIO_Init+0xf8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <MX_GPIO_Init+0xf8>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <MX_GPIO_Init+0xf8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <MX_GPIO_Init+0xf8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <MX_GPIO_Init+0xf8>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <MX_GPIO_Init+0xf8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <MX_GPIO_Init+0xf8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <MX_GPIO_Init+0xf8>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <MX_GPIO_Init+0xf8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <MX_GPIO_Init+0xfc>)
 800103a:	f002 fbbb 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800103e:	230f      	movs	r3, #15
 8001040:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001042:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	2301      	movs	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	481d      	ldr	r0, [pc, #116]	; (80010c8 <MX_GPIO_Init+0x100>)
 8001054:	f002 fa02 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001062:	2301      	movs	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_GPIO_Init+0xfc>)
 8001072:	f002 f9f3 	bl	800345c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2103      	movs	r1, #3
 800107a:	2006      	movs	r0, #6
 800107c:	f001 fe25 	bl	8002cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001080:	2006      	movs	r0, #6
 8001082:	f001 fe3e 	bl	8002d02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2103      	movs	r1, #3
 800108a:	2007      	movs	r0, #7
 800108c:	f001 fe1d 	bl	8002cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001090:	2007      	movs	r0, #7
 8001092:	f001 fe36 	bl	8002d02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2103      	movs	r1, #3
 800109a:	2008      	movs	r0, #8
 800109c:	f001 fe15 	bl	8002cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f001 fe2e 	bl	8002d02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2103      	movs	r1, #3
 80010aa:	2009      	movs	r0, #9
 80010ac:	f001 fe0d 	bl	8002cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010b0:	2009      	movs	r0, #9
 80010b2:	f001 fe26 	bl	8002d02 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020800 	.word	0x40020800

080010cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_I2C1_Init+0x50>)
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <MX_I2C1_Init+0x54>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_I2C1_Init+0x50>)
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <MX_I2C1_Init+0x58>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_I2C1_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_I2C1_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_I2C1_Init+0x50>)
 80010ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_I2C1_Init+0x50>)
 800110a:	f002 fb85 	bl	8003818 <HAL_I2C_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001114:	f000 ffaa 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200000ac 	.word	0x200000ac
 8001120:	40005400 	.word	0x40005400
 8001124:	000186a0 	.word	0x000186a0

08001128 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_I2C_MspInit+0x84>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d12c      	bne.n	80011a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_I2C_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_I2C_MspInit+0x88>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_I2C_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001166:	f44f 7310 	mov.w	r3, #576	; 0x240
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116c:	2312      	movs	r3, #18
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001178:	2304      	movs	r3, #4
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <HAL_I2C_MspInit+0x8c>)
 8001184:	f002 f96a 	bl	800345c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_I2C_MspInit+0x88>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_I2C_MspInit+0x88>)
 8001192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_I2C_MspInit+0x88>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40005400 	.word	0x40005400
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020400 	.word	0x40020400

080011b8 <__io_putchar>:
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80011c0:	1d39      	adds	r1, r7, #4
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	2201      	movs	r2, #1
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <__io_putchar+0x20>)
 80011ca:	f005 f8ce 	bl	800636a <HAL_UART_Transmit>
	return ch;
 80011ce:	687b      	ldr	r3, [r7, #4]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000e08 	.word	0x20000e08

080011dc <__io_getchar>:
GETCHAR_PROTOTYPE {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <__io_getchar+0x48>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__io_getchar+0x48>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80011fc:	1df9      	adds	r1, r7, #7
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	2201      	movs	r2, #1
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <__io_getchar+0x48>)
 8001206:	f005 f942 	bl	800648e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800120a:	1df9      	adds	r1, r7, #7
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2201      	movs	r2, #1
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <__io_getchar+0x48>)
 8001214:	f005 f8a9 	bl	800636a <HAL_UART_Transmit>
	return ch;
 8001218:	79fb      	ldrb	r3, [r7, #7]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000e08 	.word	0x20000e08

08001228 <LcdSendCmd>:
 * CLEAR 	0	0	0	0	0	0	0	0	0	1
 * HOME		0	0	0	0	0	0	0	0	1	-
 * ON/OFF	0	0	0	0	0	0	1	D	C	B
 */

void LcdSendCmd(char cmd) { //7-bitni podatci
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0); //gornja vrijednost 8 bitnog podatka
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0); //doljnja vrijednost 8 bitnog podatka
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //0b00001100 en=1, rs=0
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	f043 030c 	orr.w	r3, r3, #12
 8001246:	b2db      	uxtb	r3, r3
 8001248:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //0b00001000 en=0, rs=0
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	b2db      	uxtb	r3, r3
 8001252:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //0b00001100 en=1, rs=0
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	f043 030c 	orr.w	r3, r3, #12
 800125a:	b2db      	uxtb	r3, r3
 800125c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //0b00001000 en=0, rs=0
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	b2db      	uxtb	r3, r3
 8001266:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2304      	movs	r3, #4
 8001272:	214e      	movs	r1, #78	; 0x4e
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <LcdSendCmd+0x60>)
 8001276:	f002 fc13 	bl	8003aa0 <HAL_I2C_Master_Transmit>
			100);
	HAL_Delay(5);
 800127a:	2005      	movs	r0, #5
 800127c:	f001 fc26 	bl	8002acc <HAL_Delay>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200000ac 	.word	0x200000ac

0800128c <LcdSendData>:
void LcdSendData(char data) { //7-bitni podatci
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af02      	add	r7, sp, #8
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f023 030f 	bic.w	r3, r3, #15
 800129c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //0b00001101 en=1,rw=0, rs=1
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 030d 	orr.w	r3, r3, #13
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //0b00001001 en=0, rs=1
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f043 0309 	orr.w	r3, r3, #9
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //0b00001101 en=1, rs=1
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	f043 030d 	orr.w	r3, r3, #13
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //0b00001001 en=0, rs=1
 80012c2:	7bbb      	ldrb	r3, [r7, #14]
 80012c4:	f043 0309 	orr.w	r3, r3, #9
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80012cc:	f107 0208 	add.w	r2, r7, #8
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2304      	movs	r3, #4
 80012d6:	214e      	movs	r1, #78	; 0x4e
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <LcdSendData+0x60>)
 80012da:	f002 fbe1 	bl	8003aa0 <HAL_I2C_Master_Transmit>
			100);
	HAL_Delay(5);
 80012de:	2005      	movs	r0, #5
 80012e0:	f001 fbf4 	bl	8002acc <HAL_Delay>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200000ac 	.word	0x200000ac

080012f0 <LcdInit>:
void LcdInit(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	// 4 bit initialization
	//	D7	D6	D5	D4
	HAL_Delay(50);  // Cekaj >40ms
 80012f4:	2032      	movs	r0, #50	; 0x32
 80012f6:	f001 fbe9 	bl	8002acc <HAL_Delay>
	LcdSendCmd(0x30); 	//0b0	0	1	1
 80012fa:	2030      	movs	r0, #48	; 0x30
 80012fc:	f7ff ff94 	bl	8001228 <LcdSendCmd>
	HAL_Delay(5);  //  Cekaj >4.1ms
 8001300:	2005      	movs	r0, #5
 8001302:	f001 fbe3 	bl	8002acc <HAL_Delay>
	LcdSendCmd(0x30);	//0b0	0	1	1
 8001306:	2030      	movs	r0, #48	; 0x30
 8001308:	f7ff ff8e 	bl	8001228 <LcdSendCmd>
	HAL_Delay(1);  //  Cekaj >100us
 800130c:	2001      	movs	r0, #1
 800130e:	f001 fbdd 	bl	8002acc <HAL_Delay>
	LcdSendCmd(0x30);	//0b0	0	1	1
 8001312:	2030      	movs	r0, #48	; 0x30
 8001314:	f7ff ff88 	bl	8001228 <LcdSendCmd>
	HAL_Delay(10);
 8001318:	200a      	movs	r0, #10
 800131a:	f001 fbd7 	bl	8002acc <HAL_Delay>
	LcdSendCmd(0x20);   //0B0	0	1	0 4bit mode
 800131e:	2020      	movs	r0, #32
 8001320:	f7ff ff82 	bl	8001228 <LcdSendCmd>
	HAL_Delay(10);
 8001324:	200a      	movs	r0, #10
 8001326:	f001 fbd1 	bl	8002acc <HAL_Delay>

	// display initialization
	LcdSendCmd(0x28); //0b00111000 Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800132a:	2028      	movs	r0, #40	; 0x28
 800132c:	f7ff ff7c 	bl	8001228 <LcdSendCmd>
	HAL_Delay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fbcb 	bl	8002acc <HAL_Delay>
	LcdSendCmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001336:	2008      	movs	r0, #8
 8001338:	f7ff ff76 	bl	8001228 <LcdSendCmd>
	HAL_Delay(1);
 800133c:	2001      	movs	r0, #1
 800133e:	f001 fbc5 	bl	8002acc <HAL_Delay>
	LcdSendCmd(0x01);  // clear display
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff ff70 	bl	8001228 <LcdSendCmd>
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f001 fbbf 	bl	8002acc <HAL_Delay>
	HAL_Delay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f001 fbbc 	bl	8002acc <HAL_Delay>
	LcdSendCmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001354:	2006      	movs	r0, #6
 8001356:	f7ff ff67 	bl	8001228 <LcdSendCmd>
	HAL_Delay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f001 fbb6 	bl	8002acc <HAL_Delay>
	LcdSendCmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001360:	200c      	movs	r0, #12
 8001362:	f7ff ff61 	bl	8001228 <LcdSendCmd>
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}

0800136a <LcdSendString>:
void LcdSendString(char *str) {
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	while (*str)
 8001372:	e006      	b.n	8001382 <LcdSendString+0x18>
		LcdSendData(*str++);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff85 	bl	800128c <LcdSendData>
	while (*str)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f4      	bne.n	8001374 <LcdSendString+0xa>
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	0000      	movs	r0, r0
	...

08001398 <SetLed>:
		col |= 0x80;
		break;
	}
	LcdSendCmd(col);
}
void SetLed(int LedNum, int Red, int Green, int Blue, int brightness) {
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
	LedData[LedNum][0] = LedNum;	//Podatak za koju ledicu vrijedi
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	b2d9      	uxtb	r1, r3
 80013aa:	4a41      	ldr	r2, [pc, #260]	; (80014b0 <SetLed+0x118>)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LedData[LedNum][1] = Green;		//Podatak za zelenu boju
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	b2d9      	uxtb	r1, r3
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <SetLed+0x118>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	460a      	mov	r2, r1
 80013c0:	705a      	strb	r2, [r3, #1]
	LedData[LedNum][2] = Red;		//Podatak za crvenu boju
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	b2d9      	uxtb	r1, r3
 80013c6:	4a3a      	ldr	r2, [pc, #232]	; (80014b0 <SetLed+0x118>)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	460a      	mov	r2, r1
 80013d0:	709a      	strb	r2, [r3, #2]
	LedData[LedNum][3] = Blue;		//Podatak za plavu boju
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2d9      	uxtb	r1, r3
 80013d6:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <SetLed+0x118>)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	460a      	mov	r2, r1
 80013e0:	70da      	strb	r2, [r3, #3]

#if UseBrightness

	if (brightness > 45)
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	2b2d      	cmp	r3, #45	; 0x2d
 80013e6:	dd01      	ble.n	80013ec <SetLed+0x54>
		brightness = 45;
 80013e8:	232d      	movs	r3, #45	; 0x2d
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int i = 1; i < 4; i++) {
 80013ec:	2301      	movs	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e04f      	b.n	8001492 <SetLed+0xfa>
		float angle = 90 - brightness;  // in degrees
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001400:	edc7 7a04 	vstr	s15, [r7, #16]
		angle = angle * Pi / 180;  // in rad
 8001404:	6938      	ldr	r0, [r7, #16]
 8001406:	f7ff f8b7 	bl	8000578 <__aeabi_f2d>
 800140a:	a327      	add	r3, pc, #156	; (adr r3, 80014a8 <SetLed+0x110>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff f90a 	bl	8000628 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <SetLed+0x11c>)
 8001422:	f7ff fa2b 	bl	800087c <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fbdd 	bl	8000bec <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	613b      	str	r3, [r7, #16]
		//LedData[LedNum][i] = (LedData[LedNum][i]) / (tan(angle));
		LedData[LedNum][i] /= tan(angle);
 8001436:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <SetLed+0x118>)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	441a      	add	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f885 	bl	8000554 <__aeabi_i2d>
 800144a:	4604      	mov	r4, r0
 800144c:	460d      	mov	r5, r1
 800144e:	6938      	ldr	r0, [r7, #16]
 8001450:	f7ff f892 	bl	8000578 <__aeabi_f2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	ec43 2b10 	vmov	d0, r2, r3
 800145c:	f006 fad4 	bl	8007a08 <tan>
 8001460:	ec53 2b10 	vmov	r2, r3, d0
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f7ff fa08 	bl	800087c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb9a 	bl	8000bac <__aeabi_d2uiz>
 8001478:	4603      	mov	r3, r0
 800147a:	b2d9      	uxtb	r1, r3
 800147c:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <SetLed+0x118>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	441a      	add	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4413      	add	r3, r2
 8001488:	460a      	mov	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 4; i++) {
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2b03      	cmp	r3, #3
 8001496:	ddac      	ble.n	80013f2 <SetLed+0x5a>
	}

#endif
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bdb0      	pop	{r4, r5, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	53c8d4f1 	.word	0x53c8d4f1
 80014ac:	400921fb 	.word	0x400921fb
 80014b0:	20000110 	.word	0x20000110
 80014b4:	40668000 	.word	0x40668000

080014b8 <HAL_TIM_PWM_PulseFinishedCallback>:
/*void Set_Brightness(int led, int brightness)  // 0-45
 {

 }
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {//povratna funkcija PWM timera
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1); //Zaustavljanje timera za slanje PWM podataka na Ledice
 80014c0:	2100      	movs	r1, #0
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80014c4:	f003 feac 	bl	8005220 <HAL_TIM_PWM_Stop_DMA>
	DataSentFlag = 1; //Postavljanje zastavice u visoko stanje nakon poslanih podataka
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000c40 	.word	0x20000c40
 80014dc:	20000c38 	.word	0x20000c38

080014e0 <WS2812b_Send>:

void WS2812b_Send(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
	uint32_t indx = 0;	//Praćenje bitova PWM signala
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
	uint32_t color;		//redoslijedno spremanje vrijednosti boja za slanje

	for (int i = 0; i < n; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	e036      	b.n	800155e <WS2812b_Send+0x7e>
//#if UseBrightness
		/*color = ((LedMod[i][1] << 16) | (LedMod[i][2] << 8) | (LedMod[i][3]));
		 #else*/
		color =
				((LedData[i][1] << 16) | (LedData[i][2] << 8) | (LedData[i][3])); //Zapisujemo redoslijedno zapisivanje RGB vrijednosti
 80014f0:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <WS2812b_Send+0xcc>)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	041a      	lsls	r2, r3, #16
 80014fc:	492b      	ldr	r1, [pc, #172]	; (80015ac <WS2812b_Send+0xcc>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	431a      	orrs	r2, r3
 800150a:	4928      	ldr	r1, [pc, #160]	; (80015ac <WS2812b_Send+0xcc>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	78db      	ldrb	r3, [r3, #3]
 8001514:	4313      	orrs	r3, r2
		color =
 8001516:	607b      	str	r3, [r7, #4]
//#endif
		for (int i = 23; i >= 0; i--) {
 8001518:	2317      	movs	r3, #23
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e019      	b.n	8001552 <WS2812b_Send+0x72>
			if (color & (1 << i)) { //Pomoću AND naredbe prolazimo kroz sve bitove i zapisujemo njihovu PWM vrijednost
 800151e:	2201      	movs	r2, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <WS2812b_Send+0x5c>
				pwmData[indx] = 150;  	// Zapisujemo 2/3 of 225 za logičko "1"
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <WS2812b_Send+0xd0>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2196      	movs	r1, #150	; 0x96
 8001536:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800153a:	e004      	b.n	8001546 <WS2812b_Send+0x66>
			} else
				pwmData[indx] = 75;  	// Zapisujemo 1/3 of 225 za logičko "0"
 800153c:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <WS2812b_Send+0xd0>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	214b      	movs	r1, #75	; 0x4b
 8001542:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++; 					// slijedeći podatak
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3b01      	subs	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	dae2      	bge.n	800151e <WS2812b_Send+0x3e>
	for (int i = 0; i < n; i++) {
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	3301      	adds	r3, #1
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2b34      	cmp	r3, #52	; 0x34
 8001562:	ddc5      	ble.n	80014f0 <WS2812b_Send+0x10>
		}
	}
	for (int i = 0; i < 50; i++) { 	//Zahtijeva se 50 "0" na kraju komunikacije
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	e00a      	b.n	8001580 <WS2812b_Send+0xa0>
		pwmData[indx] = 0;
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <WS2812b_Send+0xd0>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2100      	movs	r1, #0
 8001570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) { 	//Zahtijeva se 50 "0" na kraju komunikacije
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b31      	cmp	r3, #49	; 0x31
 8001584:	ddf1      	ble.n	800156a <WS2812b_Send+0x8a>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx); //Slanje pripremljenih podataka
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <WS2812b_Send+0xd0>)
 800158c:	2100      	movs	r1, #0
 800158e:	4809      	ldr	r0, [pc, #36]	; (80015b4 <WS2812b_Send+0xd4>)
 8001590:	f003 fc7e 	bl	8004e90 <HAL_TIM_PWM_Start_DMA>
	while (!DataSentFlag) {
 8001594:	bf00      	nop
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <WS2812b_Send+0xd8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0fb      	beq.n	8001596 <WS2812b_Send+0xb6>
	};			//Čekaj dok se ne primimo povratan signal(DataSentFlag = 1)
	DataSentFlag = 0; 					//resetiraj povratan signal
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <WS2812b_Send+0xd8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000110 	.word	0x20000110
 80015b0:	200001e4 	.word	0x200001e4
 80015b4:	20000c40 	.word	0x20000c40
 80015b8:	20000c38 	.word	0x20000c38

080015bc <LedCheck>:

void LedCheck(int x1, uint8_t r1, uint8_t g1, uint8_t b1, uint8_t brightness1) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70bb      	strb	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
	if (x1 != -1) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d008      	beq.n	80015f0 <LedCheck+0x34>
		SetLed(x1, r1, g1, b1, brightness1);
 80015de:	78f9      	ldrb	r1, [r7, #3]
 80015e0:	78ba      	ldrb	r2, [r7, #2]
 80015e2:	7878      	ldrb	r0, [r7, #1]
 80015e4:	7c3b      	ldrb	r3, [r7, #16]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	4603      	mov	r3, r0
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fed4 	bl	8001398 <SetLed>
	}
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <LcdSendDataNum>:
void LcdSendDataNum(uint8_t x) { // dijeljenje brojeva na decimale
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	uint8_t j, d;
	j = x % 10;
 8001602:	79fa      	ldrb	r2, [r7, #7]
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <LcdSendDataNum+0x54>)
 8001606:	fba3 1302 	umull	r1, r3, r3, r2
 800160a:	08d9      	lsrs	r1, r3, #3
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	73fb      	strb	r3, [r7, #15]
	d = x / 10;
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <LcdSendDataNum+0x54>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	73bb      	strb	r3, [r7, #14]
	numbers[j];
	if (d > 0)
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <LcdSendDataNum+0x3e>
		LcdSendData(numbers[d]);
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <LcdSendDataNum+0x58>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe2b 	bl	800128c <LcdSendData>
	LcdSendData(numbers[j]);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <LcdSendDataNum+0x58>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fe25 	bl	800128c <LcdSendData>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	cccccccd 	.word	0xcccccccd
 8001650:	2000001c 	.word	0x2000001c

08001654 <OneStep>:
void OneStep(uint8_t NLed, uint8_t Brightness) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af02      	add	r7, sp, #8
 800165a:	4603      	mov	r3, r0
 800165c:	460a      	mov	r2, r1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]
	CheckpointLedSet(25);
 8001664:	2019      	movs	r0, #25
 8001666:	f000 f8b7 	bl	80017d8 <CheckpointLedSet>

	SetLed(NLed, 0, g, 0, Brightness);
 800166a:	79f8      	ldrb	r0, [r7, #7]
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <OneStep+0xb8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	2100      	movs	r1, #0
 800167a:	f7ff fe8d 	bl	8001398 <SetLed>

	SetLed(NLed - 1, 0, g, 0, 0);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	1e58      	subs	r0, r3, #1
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <OneStep+0xb8>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	2100      	movs	r1, #0
 8001690:	f7ff fe82 	bl	8001398 <SetLed>

	LedCheck(e1, r, 0, 0, 45);
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <OneStep+0xbc>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <OneStep+0xc0>)
 800169a:	7819      	ldrb	r1, [r3, #0]
 800169c:	232d      	movs	r3, #45	; 0x2d
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	2200      	movs	r2, #0
 80016a4:	f7ff ff8a 	bl	80015bc <LedCheck>
	if (p1 >= 2)
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <OneStep+0xc4>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d90a      	bls.n	80016c6 <OneStep+0x72>
		LedCheck(e2, r, g, 0, 45);
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <OneStep+0xc8>)
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <OneStep+0xc0>)
 80016b6:	7819      	ldrb	r1, [r3, #0]
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <OneStep+0xb8>)
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	232d      	movs	r3, #45	; 0x2d
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	f7ff ff7b 	bl	80015bc <LedCheck>
	if (p1 >= 3)
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <OneStep+0xc4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d90a      	bls.n	80016e4 <OneStep+0x90>
		LedCheck(e3, r, 0, b, 45);
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <OneStep+0xcc>)
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <OneStep+0xc0>)
 80016d4:	7819      	ldrb	r1, [r3, #0]
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <OneStep+0xd0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	222d      	movs	r2, #45	; 0x2d
 80016dc:	9200      	str	r2, [sp, #0]
 80016de:	2200      	movs	r2, #0
 80016e0:	f7ff ff6c 	bl	80015bc <LedCheck>
	if (p1 >= 4)
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <OneStep+0xc4>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d90a      	bls.n	8001702 <OneStep+0xae>
		LedCheck(e4, 0, g, b, 45);
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <OneStep+0xd4>)
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <OneStep+0xb8>)
 80016f2:	781a      	ldrb	r2, [r3, #0]
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <OneStep+0xd0>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	212d      	movs	r1, #45	; 0x2d
 80016fa:	9100      	str	r1, [sp, #0]
 80016fc:	2100      	movs	r1, #0
 80016fe:	f7ff ff5d 	bl	80015bc <LedCheck>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000019 	.word	0x20000019
 8001710:	20000000 	.word	0x20000000
 8001714:	20000018 	.word	0x20000018
 8001718:	2000001b 	.word	0x2000001b
 800171c:	20000004 	.word	0x20000004
 8001720:	20000008 	.word	0x20000008
 8001724:	2000001a 	.word	0x2000001a
 8001728:	2000000c 	.word	0x2000000c

0800172c <OneLap>:
void OneLap(uint8_t speed) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af02      	add	r7, sp, #8
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < n; i++) {
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e031      	b.n	80017a0 <OneLap+0x74>
		k = i;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <OneLap+0xa4>)
 8001742:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j <= 45; j += speed) {
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e00d      	b.n	8001766 <OneLap+0x3a>
			OneStep(i, j);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff7d 	bl	8001654 <OneStep>

			WS2812b_Send();
 800175a:	f7ff fec1 	bl	80014e0 <WS2812b_Send>
		for (int j = 0; j <= 45; j += speed) {
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4413      	add	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b2d      	cmp	r3, #45	; 0x2d
 800176a:	ddee      	ble.n	800174a <OneLap+0x1e>
		}
		for (int j = 40; j > 0; j -= (speed * 3)) {
 800176c:	2328      	movs	r3, #40	; 0x28
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e010      	b.n	8001794 <OneLap+0x68>
			OneStep(i, j);
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff69 	bl	8001654 <OneStep>

			WS2812b_Send();
 8001782:	f7ff fead 	bl	80014e0 <WS2812b_Send>
		for (int j = 40; j > 0; j -= (speed * 3)) {
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	461a      	mov	r2, r3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	dceb      	bgt.n	8001772 <OneLap+0x46>
	for (int i = 0; i < n; i++) {
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b34      	cmp	r3, #52	; 0x34
 80017a4:	ddca      	ble.n	800173c <OneLap+0x10>
		}
	}
	if (k == n - 1) {
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <OneLap+0xa4>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b34      	cmp	r3, #52	; 0x34
 80017ac:	d10b      	bne.n	80017c6 <OneLap+0x9a>
		SetLed(n - 1, 0, g, 0, 0);
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <OneLap+0xa8>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	2300      	movs	r3, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	2034      	movs	r0, #52	; 0x34
 80017be:	f7ff fdeb 	bl	8001398 <SetLed>
		WS2812b_Send();
 80017c2:	f7ff fe8d 	bl	80014e0 <WS2812b_Send>
	}

}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000104 	.word	0x20000104
 80017d4:	20000019 	.word	0x20000019

080017d8 <CheckpointLedSet>:
void CheckpointLedSet(uint8_t brightness) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
	//printf("Checkpoint p1=%d Oneshot[0]==%d\n",p1, oneShot[0]);
	if (p1 >= 1) {
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <CheckpointLedSet+0x74>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <CheckpointLedSet+0x22>
		SetLed(41, 255, 255, 255, brightness);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	23ff      	movs	r3, #255	; 0xff
 80017f0:	22ff      	movs	r2, #255	; 0xff
 80017f2:	21ff      	movs	r1, #255	; 0xff
 80017f4:	2029      	movs	r0, #41	; 0x29
 80017f6:	f7ff fdcf 	bl	8001398 <SetLed>
	}
	if (p1 >= 2) {
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <CheckpointLedSet+0x74>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d907      	bls.n	8001812 <CheckpointLedSet+0x3a>
		SetLed(14, 255, 255, 255, brightness);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	23ff      	movs	r3, #255	; 0xff
 8001808:	22ff      	movs	r2, #255	; 0xff
 800180a:	21ff      	movs	r1, #255	; 0xff
 800180c:	200e      	movs	r0, #14
 800180e:	f7ff fdc3 	bl	8001398 <SetLed>
	}
	if (p1 >= 3) {
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <CheckpointLedSet+0x74>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d907      	bls.n	800182a <CheckpointLedSet+0x52>
		SetLed(28, 255, 255, 255, brightness);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	23ff      	movs	r3, #255	; 0xff
 8001820:	22ff      	movs	r2, #255	; 0xff
 8001822:	21ff      	movs	r1, #255	; 0xff
 8001824:	201c      	movs	r0, #28
 8001826:	f7ff fdb7 	bl	8001398 <SetLed>
	}
	if (p1 >= 4) {
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <CheckpointLedSet+0x74>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d907      	bls.n	8001842 <CheckpointLedSet+0x6a>
		SetLed(53, 255, 255, 255, brightness);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	23ff      	movs	r3, #255	; 0xff
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	21ff      	movs	r1, #255	; 0xff
 800183c:	2035      	movs	r0, #53	; 0x35
 800183e:	f7ff fdab 	bl	8001398 <SetLed>
	}
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000001b 	.word	0x2000001b

08001850 <Start>:

void Start() {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
	Buzzer(100);
 8001856:	2064      	movs	r0, #100	; 0x64
 8001858:	f000 fa1e 	bl	8001c98 <Buzzer>
	LcdSendCmd(0x01); 					//Clear display
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff fce3 	bl	8001228 <LcdSendCmd>
	LcdSendString(
 8001862:	482e      	ldr	r0, [pc, #184]	; (800191c <Start+0xcc>)
 8001864:	f7ff fd81 	bl	800136a <LcdSendString>
			"Dobrodosli,         Za pocetak klikni                       Tipku");
	HAL_Delay(50);
 8001868:	2032      	movs	r0, #50	; 0x32
 800186a:	f001 f92f 	bl	8002acc <HAL_Delay>
	//printf("Value of s1 == -1 = %d\n", s1);
	s1 = -1;
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <Start+0xd0>)
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	601a      	str	r2, [r3, #0]

	while (s1 > 4 || s1 < 1) {
 8001876:	e002      	b.n	800187e <Start+0x2e>
		//printf("Value of loop s1 = %d\n", s1);
		HAL_Delay(10);
 8001878:	200a      	movs	r0, #10
 800187a:	f001 f927 	bl	8002acc <HAL_Delay>
	while (s1 > 4 || s1 < 1) {
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <Start+0xd0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b04      	cmp	r3, #4
 8001884:	dcf8      	bgt.n	8001878 <Start+0x28>
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <Start+0xd0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	ddf4      	ble.n	8001878 <Start+0x28>
	}
	LcdSendCmd(0x01); 					//Clear display
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff fcca 	bl	8001228 <LcdSendCmd>
	HAL_Delay(500);
 8001894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001898:	f001 f918 	bl	8002acc <HAL_Delay>
	s1 = 1;
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <Start+0xd0>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
	s11 = s1;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <Start+0xd0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <Start+0xd4>)
 80018a8:	6013      	str	r3, [r2, #0]
	uint8_t t1 = 5;
 80018aa:	2305      	movs	r3, #5
 80018ac:	71fb      	strb	r3, [r7, #7]
	do {
		LcdSendCmd(0x01); 					//Clear display
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fcba 	bl	8001228 <LcdSendCmd>
		LcdSendString("Broj igraca:");
 80018b4:	481c      	ldr	r0, [pc, #112]	; (8001928 <Start+0xd8>)
 80018b6:	f7ff fd58 	bl	800136a <LcdSendString>
		p1 = s1;
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <Start+0xd0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <Start+0xdc>)
 80018c2:	701a      	strb	r2, [r3, #0]
		//LcdSendData(numbers[p1]);
		LcdSendDataNum(p1);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <Start+0xdc>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fe95 	bl	80015f8 <LcdSendDataNum>
		LcdSendString("       Igra zapocinje: ");
 80018ce:	4818      	ldr	r0, [pc, #96]	; (8001930 <Start+0xe0>)
 80018d0:	f7ff fd4b 	bl	800136a <LcdSendString>
		//LcdSendData(numbers[t1]);
		LcdSendDataNum(t1);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fe8e 	bl	80015f8 <LcdSendDataNum>
		LcdSendString("s");
 80018dc:	4815      	ldr	r0, [pc, #84]	; (8001934 <Start+0xe4>)
 80018de:	f7ff fd44 	bl	800136a <LcdSendString>
		HAL_Delay(1000);
 80018e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e6:	f001 f8f1 	bl	8002acc <HAL_Delay>
		t1--;
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	71fb      	strb	r3, [r7, #7]
	} while (t1 > 0);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1db      	bne.n	80018ae <Start+0x5e>
	LcdSendCmd(0x01); 					//Clear display
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff fc96 	bl	8001228 <LcdSendCmd>
	LcdSendString("Zapocnimo!!         Broj igraca je: ");
 80018fc:	480e      	ldr	r0, [pc, #56]	; (8001938 <Start+0xe8>)
 80018fe:	f7ff fd34 	bl	800136a <LcdSendString>
	//LcdSendData(numbers[p1]);
	LcdSendDataNum(p1);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <Start+0xdc>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fe76 	bl	80015f8 <LcdSendDataNum>
	HAL_Delay(3000);
 800190c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001910:	f001 f8dc 	bl	8002acc <HAL_Delay>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	08008b60 	.word	0x08008b60
 8001920:	20000010 	.word	0x20000010
 8001924:	20000014 	.word	0x20000014
 8001928:	08008ba4 	.word	0x08008ba4
 800192c:	2000001b 	.word	0x2000001b
 8001930:	08008bb4 	.word	0x08008bb4
 8001934:	08008bcc 	.word	0x08008bcc
 8001938:	08008bd0 	.word	0x08008bd0

0800193c <Glavna>:

void Glavna(uint8_t rmax) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af02      	add	r7, sp, #8
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	uint8_t r1 = 1, t1 = 7;
 8001946:	2301      	movs	r3, #1
 8001948:	77fb      	strb	r3, [r7, #31]
 800194a:	2307      	movs	r3, #7
 800194c:	77bb      	strb	r3, [r7, #30]
	for (int i = 0; i < 4; i++)
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	e007      	b.n	8001964 <Glavna+0x28>
		pScore[i] = 0;
 8001954:	4a8a      	ldr	r2, [pc, #552]	; (8001b80 <Glavna+0x244>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4413      	add	r3, r2
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	3301      	adds	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b03      	cmp	r3, #3
 8001968:	ddf4      	ble.n	8001954 <Glavna+0x18>
	do {

		CheckpointLedSet(25);
 800196a:	2019      	movs	r0, #25
 800196c:	f7ff ff34 	bl	80017d8 <CheckpointLedSet>
		do {
			LcdSendCmd(0x01); 					//Clear display
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff fc59 	bl	8001228 <LcdSendCmd>
			LcdSendString("Brzina igre:x");
 8001976:	4883      	ldr	r0, [pc, #524]	; (8001b84 <Glavna+0x248>)
 8001978:	f7ff fcf7 	bl	800136a <LcdSendString>
			//LcdSendData(numbers[r1]);
			LcdSendDataNum(r1);
 800197c:	7ffb      	ldrb	r3, [r7, #31]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fe3a 	bl	80015f8 <LcdSendDataNum>

			LcdSendString("      P1:");
 8001984:	4880      	ldr	r0, [pc, #512]	; (8001b88 <Glavna+0x24c>)
 8001986:	f7ff fcf0 	bl	800136a <LcdSendString>
			//LcdSendData(numbers[pScore[0]]);
			LcdSendDataNum(pScore[0]);
 800198a:	4b7d      	ldr	r3, [pc, #500]	; (8001b80 <Glavna+0x244>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fe32 	bl	80015f8 <LcdSendDataNum>
			if (p1 >= 2) {
 8001994:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <Glavna+0x250>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d908      	bls.n	80019ae <Glavna+0x72>
				LcdSendString(" P2:");
 800199c:	487c      	ldr	r0, [pc, #496]	; (8001b90 <Glavna+0x254>)
 800199e:	f7ff fce4 	bl	800136a <LcdSendString>
				//LcdSendData(numbers[pScore[1]]);
				LcdSendDataNum(pScore[1]);
 80019a2:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <Glavna+0x244>)
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fe26 	bl	80015f8 <LcdSendDataNum>
 80019ac:	e002      	b.n	80019b4 <Glavna+0x78>
			} else
				LcdSendString("     ");
 80019ae:	4879      	ldr	r0, [pc, #484]	; (8001b94 <Glavna+0x258>)
 80019b0:	f7ff fcdb 	bl	800136a <LcdSendString>
			if (p1 >= 3) {
 80019b4:	4b75      	ldr	r3, [pc, #468]	; (8001b8c <Glavna+0x250>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d908      	bls.n	80019ce <Glavna+0x92>
				LcdSendString(" P3:");
 80019bc:	4876      	ldr	r0, [pc, #472]	; (8001b98 <Glavna+0x25c>)
 80019be:	f7ff fcd4 	bl	800136a <LcdSendString>
				//LcdSendData(numbers[pScore[2]]);
				LcdSendDataNum(pScore[2]);
 80019c2:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <Glavna+0x244>)
 80019c4:	789b      	ldrb	r3, [r3, #2]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fe16 	bl	80015f8 <LcdSendDataNum>
 80019cc:	e002      	b.n	80019d4 <Glavna+0x98>
			} else
				LcdSendString("     ");
 80019ce:	4871      	ldr	r0, [pc, #452]	; (8001b94 <Glavna+0x258>)
 80019d0:	f7ff fccb 	bl	800136a <LcdSendString>
			if (p1 >= 4) {
 80019d4:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <Glavna+0x250>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d908      	bls.n	80019ee <Glavna+0xb2>
				LcdSendString(" P4:");
 80019dc:	486f      	ldr	r0, [pc, #444]	; (8001b9c <Glavna+0x260>)
 80019de:	f7ff fcc4 	bl	800136a <LcdSendString>
				//LcdSendData(numbers[pScore[3]]);
				LcdSendDataNum(pScore[3]);
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <Glavna+0x244>)
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fe06 	bl	80015f8 <LcdSendDataNum>
 80019ec:	e002      	b.n	80019f4 <Glavna+0xb8>
			} else
				LcdSendString("     ");
 80019ee:	4869      	ldr	r0, [pc, #420]	; (8001b94 <Glavna+0x258>)
 80019f0:	f7ff fcbb 	bl	800136a <LcdSendString>
			LcdSendString("                     Spreman?  ");
 80019f4:	486a      	ldr	r0, [pc, #424]	; (8001ba0 <Glavna+0x264>)
 80019f6:	f7ff fcb8 	bl	800136a <LcdSendString>
			//LcdSendData(numbers[t1]);
			LcdSendDataNum(t1);
 80019fa:	7fbb      	ldrb	r3, [r7, #30]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fdfb 	bl	80015f8 <LcdSendDataNum>
			if (t1 < 3)
 8001a02:	7fbb      	ldrb	r3, [r7, #30]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d802      	bhi.n	8001a0e <Glavna+0xd2>
				Buzzer(100);
 8001a08:	2064      	movs	r0, #100	; 0x64
 8001a0a:	f000 f945 	bl	8001c98 <Buzzer>
			HAL_Delay(1000);
 8001a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a12:	f001 f85b 	bl	8002acc <HAL_Delay>
			t1--;
 8001a16:	7fbb      	ldrb	r3, [r7, #30]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	77bb      	strb	r3, [r7, #30]
		} while (t1 > 0);
 8001a1c:	7fbb      	ldrb	r3, [r7, #30]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1a6      	bne.n	8001970 <Glavna+0x34>
		for (int j = 0; j < n; j++) //reset ledica
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e00a      	b.n	8001a3e <Glavna+0x102>
			SetLed(j, 0, 0, 0, 0);
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff fcb0 	bl	8001398 <SetLed>
		for (int j = 0; j < n; j++) //reset ledica
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b34      	cmp	r3, #52	; 0x34
 8001a42:	ddf1      	ble.n	8001a28 <Glavna+0xec>
		WS2812b_Send();
 8001a44:	f7ff fd4c 	bl	80014e0 <WS2812b_Send>
		CheckpointLedSet(25);
 8001a48:	2019      	movs	r0, #25
 8001a4a:	f7ff fec5 	bl	80017d8 <CheckpointLedSet>
		e1 = -1, e2 = -1, e3 = -1, e4 = -1;
 8001a4e:	4b55      	ldr	r3, [pc, #340]	; (8001ba4 <Glavna+0x268>)
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <Glavna+0x26c>)
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	4b53      	ldr	r3, [pc, #332]	; (8001bac <Glavna+0x270>)
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <Glavna+0x274>)
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	601a      	str	r2, [r3, #0]
		int m = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
		while (m < 3
 8001a72:	e006      	b.n	8001a82 <Glavna+0x146>
				&& (e1 == -1 || (p1 >= 2 && e2 == -1) || (p1 >= 3 && e3 == -1)
						|| (p1 >= 4 && e4 == -1))) {
			OneLap(r1);
 8001a74:	7ffb      	ldrb	r3, [r7, #31]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fe58 	bl	800172c <OneLap>
			m++;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	613b      	str	r3, [r7, #16]
				&& (e1 == -1 || (p1 >= 2 && e2 == -1) || (p1 >= 3 && e3 == -1)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	dc1f      	bgt.n	8001ac8 <Glavna+0x18c>
 8001a88:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <Glavna+0x268>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d0f0      	beq.n	8001a74 <Glavna+0x138>
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <Glavna+0x250>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d904      	bls.n	8001aa4 <Glavna+0x168>
 8001a9a:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <Glavna+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa2:	d0e7      	beq.n	8001a74 <Glavna+0x138>
 8001aa4:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <Glavna+0x250>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d904      	bls.n	8001ab6 <Glavna+0x17a>
 8001aac:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <Glavna+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d0de      	beq.n	8001a74 <Glavna+0x138>
						|| (p1 >= 4 && e4 == -1))) {
 8001ab6:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <Glavna+0x250>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d904      	bls.n	8001ac8 <Glavna+0x18c>
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <Glavna+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac6:	d0d5      	beq.n	8001a74 <Glavna+0x138>
		}
		/*for (int i = 0; i < 3; i++) {
		 OneLap(r1);
		 }*/
		r1 += 2;
 8001ac8:	7ffb      	ldrb	r3, [r7, #31]
 8001aca:	3302      	adds	r3, #2
 8001acc:	77fb      	strb	r3, [r7, #31]
		t1 = 5;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	77bb      	strb	r3, [r7, #30]
		if (e1 != -1)
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <Glavna+0x268>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ada:	d00f      	beq.n	8001afc <Glavna+0x1c0>
			pScore[0] += 5 - (abs(41 - e1));
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <Glavna+0x244>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <Glavna+0x268>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bfb8      	it	lt
 8001aec:	425b      	neglt	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3305      	adds	r3, #5
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <Glavna+0x244>)
 8001afa:	701a      	strb	r2, [r3, #0]
		if (e2 != -1)
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <Glavna+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d00f      	beq.n	8001b26 <Glavna+0x1ea>
			pScore[1] += 5 - (abs(14 - e2));
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <Glavna+0x244>)
 8001b08:	785a      	ldrb	r2, [r3, #1]
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <Glavna+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f1c3 030e 	rsb	r3, r3, #14
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bfb8      	it	lt
 8001b16:	425b      	neglt	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	3305      	adds	r3, #5
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <Glavna+0x244>)
 8001b24:	705a      	strb	r2, [r3, #1]
		if (e3 != -1)
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <Glavna+0x270>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2e:	d00f      	beq.n	8001b50 <Glavna+0x214>
			pScore[2] += 5 - (abs(28 - e3));
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <Glavna+0x244>)
 8001b32:	789a      	ldrb	r2, [r3, #2]
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <Glavna+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1c3 031c 	rsb	r3, r3, #28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bfb8      	it	lt
 8001b40:	425b      	neglt	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	3305      	adds	r3, #5
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <Glavna+0x244>)
 8001b4e:	709a      	strb	r2, [r3, #2]
		if (e4 != -1)
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <Glavna+0x274>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d00f      	beq.n	8001b7a <Glavna+0x23e>
			pScore[3] += 5 - (abs(53 - e4));
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <Glavna+0x244>)
 8001b5c:	78da      	ldrb	r2, [r3, #3]
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <Glavna+0x274>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bfb8      	it	lt
 8001b6a:	425b      	neglt	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	3305      	adds	r3, #5
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <Glavna+0x244>)
 8001b78:	70da      	strb	r2, [r3, #3]
		for (int j = 0; j < 4; j++) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e027      	b.n	8001bd0 <Glavna+0x294>
 8001b80:	20000108 	.word	0x20000108
 8001b84:	08008bf8 	.word	0x08008bf8
 8001b88:	08008c08 	.word	0x08008c08
 8001b8c:	2000001b 	.word	0x2000001b
 8001b90:	08008c14 	.word	0x08008c14
 8001b94:	08008c1c 	.word	0x08008c1c
 8001b98:	08008c24 	.word	0x08008c24
 8001b9c:	08008c2c 	.word	0x08008c2c
 8001ba0:	08008c34 	.word	0x08008c34
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	20000008 	.word	0x20000008
 8001bb0:	2000000c 	.word	0x2000000c
			if (pScore[j] <= 0)
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <Glavna+0x338>)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4413      	add	r3, r2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d104      	bne.n	8001bca <Glavna+0x28e>
				pScore[j] = 0;
 8001bc0:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <Glavna+0x338>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	ddee      	ble.n	8001bb4 <Glavna+0x278>
		}
	} while (r1 < rmax * 2 + 1);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	005a      	lsls	r2, r3, #1
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f6bf aec4 	bge.w	800196a <Glavna+0x2e>
	LcdSendCmd(0x01); 					//Clear display
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff fb20 	bl	8001228 <LcdSendCmd>
	LcdSendString("Kraj igre           ");
 8001be8:	4823      	ldr	r0, [pc, #140]	; (8001c78 <Glavna+0x33c>)
 8001bea:	f7ff fbbe 	bl	800136a <LcdSendString>
	LcdSendString("P1:");
 8001bee:	4823      	ldr	r0, [pc, #140]	; (8001c7c <Glavna+0x340>)
 8001bf0:	f7ff fbbb 	bl	800136a <LcdSendString>
	//LcdSendData(numbers[pScore[0]]);
	LcdSendDataNum(pScore[0]);
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <Glavna+0x338>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fcfd 	bl	80015f8 <LcdSendDataNum>
	if (p1 >= 2) {
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <Glavna+0x344>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d908      	bls.n	8001c18 <Glavna+0x2dc>
		LcdSendString(" P2:");
 8001c06:	481f      	ldr	r0, [pc, #124]	; (8001c84 <Glavna+0x348>)
 8001c08:	f7ff fbaf 	bl	800136a <LcdSendString>
		//LcdSendData(numbers[pScore[1]]);
		LcdSendDataNum(pScore[1]);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <Glavna+0x338>)
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fcf1 	bl	80015f8 <LcdSendDataNum>
 8001c16:	e002      	b.n	8001c1e <Glavna+0x2e2>
	} else
		LcdSendString("     ");
 8001c18:	481b      	ldr	r0, [pc, #108]	; (8001c88 <Glavna+0x34c>)
 8001c1a:	f7ff fba6 	bl	800136a <LcdSendString>
	if (p1 >= 3) {
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <Glavna+0x344>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d908      	bls.n	8001c38 <Glavna+0x2fc>
		LcdSendString(" P3:");
 8001c26:	4819      	ldr	r0, [pc, #100]	; (8001c8c <Glavna+0x350>)
 8001c28:	f7ff fb9f 	bl	800136a <LcdSendString>
		//LcdSendData(numbers[pScore[2]]);
		LcdSendDataNum(pScore[2]);
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <Glavna+0x338>)
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fce1 	bl	80015f8 <LcdSendDataNum>
 8001c36:	e002      	b.n	8001c3e <Glavna+0x302>
	} else
		LcdSendString("     ");
 8001c38:	4813      	ldr	r0, [pc, #76]	; (8001c88 <Glavna+0x34c>)
 8001c3a:	f7ff fb96 	bl	800136a <LcdSendString>
	if (p1 >= 4) {
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <Glavna+0x344>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d908      	bls.n	8001c58 <Glavna+0x31c>
		LcdSendString(" P4:");
 8001c46:	4812      	ldr	r0, [pc, #72]	; (8001c90 <Glavna+0x354>)
 8001c48:	f7ff fb8f 	bl	800136a <LcdSendString>
		//LcdSendData(numbers[pScore[3]]);
		LcdSendDataNum(pScore[3]);
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <Glavna+0x338>)
 8001c4e:	78db      	ldrb	r3, [r3, #3]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fcd1 	bl	80015f8 <LcdSendDataNum>
 8001c56:	e002      	b.n	8001c5e <Glavna+0x322>
	} else
		LcdSendString("     ");
 8001c58:	480b      	ldr	r0, [pc, #44]	; (8001c88 <Glavna+0x34c>)
 8001c5a:	f7ff fb86 	bl	800136a <LcdSendString>
	LcdSendString("                     Hvala na igranju");
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <Glavna+0x358>)
 8001c60:	f7ff fb83 	bl	800136a <LcdSendString>
	HAL_Delay(5000);
 8001c64:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c68:	f000 ff30 	bl	8002acc <HAL_Delay>
}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000108 	.word	0x20000108
 8001c78:	08008c54 	.word	0x08008c54
 8001c7c:	08008c6c 	.word	0x08008c6c
 8001c80:	2000001b 	.word	0x2000001b
 8001c84:	08008c14 	.word	0x08008c14
 8001c88:	08008c1c 	.word	0x08008c1c
 8001c8c:	08008c24 	.word	0x08008c24
 8001c90:	08008c2c 	.word	0x08008c2c
 8001c94:	08008c70 	.word	0x08008c70

08001c98 <Buzzer>:
void Buzzer(uint16_t duration) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <Buzzer+0x34>)
 8001caa:	f001 fd83 	bl	80037b4 <HAL_GPIO_WritePin>
	HAL_Delay(duration);
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 ff0b 	bl	8002acc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <Buzzer+0x34>)
 8001cbe:	f001 fd79 	bl	80037b4 <HAL_GPIO_WritePin>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001cd4:	f000 fe88 	bl	80029e8 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001cd8:	f000 f81e 	bl	8001d18 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001cdc:	f7ff f974 	bl	8000fc8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001ce0:	f7ff f952 	bl	8000f88 <MX_DMA_Init>
	MX_TIM1_Init();
 8001ce4:	f000 fb1e 	bl	8002324 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8001ce8:	f000 fde2 	bl	80028b0 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001cec:	f000 fb9c 	bl	8002428 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001cf0:	f000 fbe6 	bl	80024c0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001cf4:	f000 fc32 	bl	800255c <MX_TIM4_Init>
	MX_TIM5_Init();
 8001cf8:	f000 fc7e 	bl	80025f8 <MX_TIM5_Init>
	MX_I2C1_Init();
 8001cfc:	f7ff f9e6 	bl	80010cc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	LcdInit();
 8001d00:	f7ff faf6 	bl	80012f0 <LcdInit>
	HAL_Delay(1000);
 8001d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d08:	f000 fee0 	bl	8002acc <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Start();
 8001d0c:	f7ff fda0 	bl	8001850 <Start>
		Glavna(5);
 8001d10:	2005      	movs	r0, #5
 8001d12:	f7ff fe13 	bl	800193c <Glavna>
		Start();
 8001d16:	e7f9      	b.n	8001d0c <main+0x3c>

08001d18 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b094      	sub	sp, #80	; 0x50
 8001d1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	2234      	movs	r2, #52	; 0x34
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 f84d 	bl	8006dc6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <SystemClock_Config+0xdc>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <SystemClock_Config+0xdc>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <SystemClock_Config+0xdc>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d58:	2300      	movs	r3, #0
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <SystemClock_Config+0xe0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a25      	ldr	r2, [pc, #148]	; (8001df8 <SystemClock_Config+0xe0>)
 8001d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <SystemClock_Config+0xe0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d80:	2302      	movs	r3, #2
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001d88:	2308      	movs	r3, #8
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001d8c:	23b4      	movs	r3, #180	; 0xb4
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d90:	2302      	movs	r3, #2
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fc99 	bl	80046d8 <HAL_RCC_OscConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0x98>
		Error_Handler();
 8001dac:	f000 f95e 	bl	800206c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001db0:	f002 f97e 	bl	80040b0 <HAL_PWREx_EnableOverDrive>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0xa6>
		Error_Handler();
 8001dba:	f000 f957 	bl	800206c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	2105      	movs	r1, #5
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 f9b7 	bl	8004150 <HAL_RCC_ClockConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <SystemClock_Config+0xd4>
		Error_Handler();
 8001de8:	f000 f940 	bl	800206c <Error_Handler>
	}
}
 8001dec:	bf00      	nop
 8001dee:	3750      	adds	r7, #80	; 0x50
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40007000 	.word	0x40007000

08001dfc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
//printf("Pocetak interupta\n");
	if (GPIO_Pin == GPIO_PIN_0 && Tim2State == 0) {
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d10c      	bne.n	8001e26 <HAL_GPIO_EXTI_Callback+0x2a>
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x94>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d108      	bne.n	8001e26 <HAL_GPIO_EXTI_Callback+0x2a>
		Tim2State = 1;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x94>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
		global_gpio_pin = GPIO_Pin;
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x98>)
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	8013      	strh	r3, [r2, #0]
		//printf("	Pritisnut gumb0: %d\n", global_gpio_pin);
		//__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
		//printf("	Pokretanje timera2\n");
		HAL_TIM_Base_Start_IT(&htim2);
 8001e20:	481d      	ldr	r0, [pc, #116]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001e22:	f002 ff47 	bl	8004cb4 <HAL_TIM_Base_Start_IT>
	}
	if (GPIO_Pin == GPIO_PIN_1 && Tim3State == 0) {
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d10c      	bne.n	8001e46 <HAL_GPIO_EXTI_Callback+0x4a>
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d108      	bne.n	8001e46 <HAL_GPIO_EXTI_Callback+0x4a>
		Tim3State = 1;
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
		global_gpio_pin = GPIO_Pin;
 8001e3a:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x98>)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	8013      	strh	r3, [r2, #0]
		//printf("	Pritisnut gumb1: %d\n", global_gpio_pin);
		//__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
		//printf("	Pokretanje timera3\n");
		HAL_TIM_Base_Start_IT(&htim3);
 8001e40:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001e42:	f002 ff37 	bl	8004cb4 <HAL_TIM_Base_Start_IT>
	}
	if (GPIO_Pin == GPIO_PIN_2 && Tim4State == 0) {
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d10c      	bne.n	8001e66 <HAL_GPIO_EXTI_Callback+0x6a>
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d108      	bne.n	8001e66 <HAL_GPIO_EXTI_Callback+0x6a>
		Tim4State = 1;
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
		global_gpio_pin = GPIO_Pin;
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x98>)
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	8013      	strh	r3, [r2, #0]
		//printf("	Pritisnut gumb2: %d\n", global_gpio_pin);
		//__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
		//printf("	Pokretanje timera4\n");
		HAL_TIM_Base_Start_IT(&htim4);
 8001e60:	4811      	ldr	r0, [pc, #68]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e62:	f002 ff27 	bl	8004cb4 <HAL_TIM_Base_Start_IT>
	}
	if (GPIO_Pin == GPIO_PIN_3 && Tim5State == 0) {
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d10c      	bne.n	8001e86 <HAL_GPIO_EXTI_Callback+0x8a>
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_GPIO_EXTI_Callback+0xb0>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d108      	bne.n	8001e86 <HAL_GPIO_EXTI_Callback+0x8a>
		Tim5State = 1;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_GPIO_EXTI_Callback+0xb0>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
		global_gpio_pin = GPIO_Pin;
 8001e7a:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x98>)
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	8013      	strh	r3, [r2, #0]
		//printf("	Pritisnut gumb3: %d\n", global_gpio_pin);
		//__HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
		//printf("	Pokretanje timera5\n");
		HAL_TIM_Base_Start_IT(&htim5);
 8001e80:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001e82:	f002 ff17 	bl	8004cb4 <HAL_TIM_Base_Start_IT>
	}
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000100 	.word	0x20000100
 8001e94:	2000010c 	.word	0x2000010c
 8001e98:	20000c88 	.word	0x20000c88
 8001e9c:	20000101 	.word	0x20000101
 8001ea0:	20000cd0 	.word	0x20000cd0
 8001ea4:	20000102 	.word	0x20000102
 8001ea8:	20000d18 	.word	0x20000d18
 8001eac:	20000103 	.word	0x20000103
 8001eb0:	20000d60 	.word	0x20000d60

08001eb4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d125      	bne.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x5e>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001ec6:	4855      	ldr	r0, [pc, #340]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ec8:	f002 ff64 	bl	8004d94 <HAL_TIM_Base_Stop_IT>
		Tim2State = 0;
 8001ecc:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
		//printf("		Timer2 zavrsio\n");
		if (HAL_GPIO_ReadPin(GPIOC, global_gpio_pin) == GPIO_PIN_RESET) {
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4853      	ldr	r0, [pc, #332]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001eda:	f001 fc53 	bl	8003784 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d116      	bne.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x5e>
			if (global_gpio_pin == GPIO_PIN_0) {
 8001ee4:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d112      	bne.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x5e>
				if (e1 == -1)
 8001eec:	4b4f      	ldr	r3, [pc, #316]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d104      	bne.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x4c>
					e1 = k;
 8001ef6:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001efe:	601a      	str	r2, [r3, #0]
				s1 = 1;
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
				printf("Value of s1 = %d\n", s1);
 8001f06:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	484a      	ldr	r0, [pc, #296]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f0e:	f004 ff05 	bl	8006d1c <iprintf>
				//printf("Value of e1:e11 = %d:%d\n", e1, e11);
			}
		}
	}
	if (htim->Instance == TIM3) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d125      	bne.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0xb4>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001f1c:	4848      	ldr	r0, [pc, #288]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001f1e:	f002 ff39 	bl	8004d94 <HAL_TIM_Base_Stop_IT>
		Tim3State = 0;
 8001f22:	4b48      	ldr	r3, [pc, #288]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
		//printf("		Timer3 zavrsio\n");
		if (HAL_GPIO_ReadPin(GPIOC, global_gpio_pin) == GPIO_PIN_RESET) {
 8001f28:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	483e      	ldr	r0, [pc, #248]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001f30:	f001 fc28 	bl	8003784 <HAL_GPIO_ReadPin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0xb4>
			if (global_gpio_pin == GPIO_PIN_1) {
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d112      	bne.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0xb4>
				if (e2 == -1)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d104      	bne.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0xa2>
					e2 = k;
 8001f4c:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001f54:	601a      	str	r2, [r3, #0]
				s1 = 2;
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f58:	2202      	movs	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]
				printf("Value of s1 = %d\n", s1);
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4835      	ldr	r0, [pc, #212]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f64:	f004 feda 	bl	8006d1c <iprintf>
				//printf("Value of e2:e21 = %d:%d\n", e2, e21);
			}
		}
	}
	if (htim->Instance == TIM4) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a37      	ldr	r2, [pc, #220]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d125      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x10a>
		HAL_TIM_Base_Stop_IT(&htim4);
 8001f72:	4837      	ldr	r0, [pc, #220]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001f74:	f002 ff0e 	bl	8004d94 <HAL_TIM_Base_Stop_IT>
		Tim4State = 0;
 8001f78:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		//printf("		Timer4 zavrsio\n");
		if (HAL_GPIO_ReadPin(GPIOC, global_gpio_pin) == GPIO_PIN_RESET) {
 8001f7e:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4828      	ldr	r0, [pc, #160]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001f86:	f001 fbfd 	bl	8003784 <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d116      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x10a>
			if (global_gpio_pin == GPIO_PIN_2) {
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d112      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x10a>
				if (e3 == -1)
 8001f98:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d104      	bne.n	8001fac <HAL_TIM_PeriodElapsedCallback+0xf8>
					e3 = k;
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001faa:	601a      	str	r2, [r3, #0]
				s1 = 3;
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001fae:	2203      	movs	r2, #3
 8001fb0:	601a      	str	r2, [r3, #0]
				printf("Value of s1 = %d\n", s1);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481f      	ldr	r0, [pc, #124]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001fba:	f004 feaf 	bl	8006d1c <iprintf>

			}
		}
	}
	if (htim->Instance == TIM5) {
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a26      	ldr	r2, [pc, #152]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d125      	bne.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x160>
		HAL_TIM_Base_Stop_IT(&htim5);
 8001fc8:	4825      	ldr	r0, [pc, #148]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001fca:	f002 fee3 	bl	8004d94 <HAL_TIM_Base_Stop_IT>
		Tim5State = 0;
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
		//printf("		Timer5 zavrsio\n");
		if (HAL_GPIO_ReadPin(GPIOC, global_gpio_pin) == GPIO_PIN_RESET) {
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4813      	ldr	r0, [pc, #76]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001fdc:	f001 fbd2 	bl	8003784 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x160>
			if (global_gpio_pin == GPIO_PIN_3) {
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d112      	bne.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x160>
				if (e4 == -1)
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d104      	bne.n	8002002 <HAL_TIM_PeriodElapsedCallback+0x14e>
					e4 = k;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002000:	601a      	str	r2, [r3, #0]
				s1 = 4;
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002004:	2204      	movs	r2, #4
 8002006:	601a      	str	r2, [r3, #0]
				printf("Value of s1 = %d\n", s1);
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	480a      	ldr	r0, [pc, #40]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002010:	f004 fe84 	bl	8006d1c <iprintf>
				//printf("Value of e4:e41 = %d:%d\n", e4, e41);
			}
		}
	}
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000c88 	.word	0x20000c88
 8002020:	20000100 	.word	0x20000100
 8002024:	2000010c 	.word	0x2000010c
 8002028:	40020800 	.word	0x40020800
 800202c:	20000000 	.word	0x20000000
 8002030:	20000104 	.word	0x20000104
 8002034:	20000010 	.word	0x20000010
 8002038:	08008c98 	.word	0x08008c98
 800203c:	40000400 	.word	0x40000400
 8002040:	20000cd0 	.word	0x20000cd0
 8002044:	20000101 	.word	0x20000101
 8002048:	20000004 	.word	0x20000004
 800204c:	40000800 	.word	0x40000800
 8002050:	20000d18 	.word	0x20000d18
 8002054:	20000102 	.word	0x20000102
 8002058:	20000008 	.word	0x20000008
 800205c:	40000c00 	.word	0x40000c00
 8002060:	20000d60 	.word	0x20000d60
 8002064:	20000103 	.word	0x20000103
 8002068:	2000000c 	.word	0x2000000c

0800206c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002074:	e7fe      	b.n	8002074 <Error_Handler+0x8>
	...

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_MspInit+0x4c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_MspInit+0x4c>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_MspInit+0x4c>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_MspInit+0x4c>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80020cc:	e7fe      	b.n	80020cc <NMI_Handler+0x4>

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002114:	f000 fcba 	bl	8002a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002120:	2001      	movs	r0, #1
 8002122:	f001 fb61 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}

0800212a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800212e:	2002      	movs	r0, #2
 8002130:	f001 fb5a 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800213c:	2004      	movs	r0, #4
 800213e:	f001 fb53 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}

08002146 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800214a:	2008      	movs	r0, #8
 800214c:	f001 fb4c 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <TIM2_IRQHandler+0x10>)
 800215a:	f003 f933 	bl	80053c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000c88 	.word	0x20000c88

08002168 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM3_IRQHandler+0x10>)
 800216e:	f003 f929 	bl	80053c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000cd0 	.word	0x20000cd0

0800217c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM4_IRQHandler+0x10>)
 8002182:	f003 f91f 	bl	80053c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000d18 	.word	0x20000d18

08002190 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM5_IRQHandler+0x10>)
 8002196:	f003 f915 	bl	80053c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000d60 	.word	0x20000d60

080021a4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <DMA2_Stream1_IRQHandler+0x10>)
 80021aa:	f000 feed 	bl	8002f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000da8 	.word	0x20000da8

080021b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e00a      	b.n	80021e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ca:	f7ff f807 	bl	80011dc <__io_getchar>
 80021ce:	4601      	mov	r1, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf0      	blt.n	80021ca <_read+0x12>
  }

  return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e009      	b.n	8002218 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe ffd3 	bl	80011b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf1      	blt.n	8002204 <_write+0x12>
  }
  return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002252:	605a      	str	r2, [r3, #4]
  return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_isatty>:

int _isatty(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f004 fdce 	bl	8006e64 <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20020000 	.word	0x20020000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000c3c 	.word	0x20000c3c
 80022fc:	20000fa0 	.word	0x20000fa0

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <SystemInit+0x20>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SystemInit+0x20>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b092      	sub	sp, #72	; 0x48
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	2220      	movs	r2, #32
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f004 fd39 	bl	8006dc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <MX_TIM1_Init+0xfc>)
 8002356:	4a33      	ldr	r2, [pc, #204]	; (8002424 <MX_TIM1_Init+0x100>)
 8002358:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <MX_TIM1_Init+0xfc>)
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <MX_TIM1_Init+0xfc>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 225-1;
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <MX_TIM1_Init+0xfc>)
 8002368:	22e0      	movs	r2, #224	; 0xe0
 800236a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <MX_TIM1_Init+0xfc>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002372:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <MX_TIM1_Init+0xfc>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <MX_TIM1_Init+0xfc>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800237e:	4828      	ldr	r0, [pc, #160]	; (8002420 <MX_TIM1_Init+0xfc>)
 8002380:	f002 fd37 	bl	8004df2 <HAL_TIM_PWM_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800238a:	f7ff fe6f 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002396:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800239a:	4619      	mov	r1, r3
 800239c:	4820      	ldr	r0, [pc, #128]	; (8002420 <MX_TIM1_Init+0xfc>)
 800239e:	f003 feb5 	bl	800610c <HAL_TIMEx_MasterConfigSynchronization>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80023a8:	f7ff fe60 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ac:	2360      	movs	r3, #96	; 0x60
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023b8:	2300      	movs	r3, #0
 80023ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	2200      	movs	r2, #0
 80023ce:	4619      	mov	r1, r3
 80023d0:	4813      	ldr	r0, [pc, #76]	; (8002420 <MX_TIM1_Init+0xfc>)
 80023d2:	f003 f8ff 	bl	80055d4 <HAL_TIM_PWM_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80023dc:	f7ff fe46 	bl	800206c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <MX_TIM1_Init+0xfc>)
 8002404:	f003 fefe 	bl	8006204 <HAL_TIMEx_ConfigBreakDeadTime>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800240e:	f7ff fe2d 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002412:	4803      	ldr	r0, [pc, #12]	; (8002420 <MX_TIM1_Init+0xfc>)
 8002414:	f000 fa12 	bl	800283c <HAL_TIM_MspPostInit>

}
 8002418:	bf00      	nop
 800241a:	3748      	adds	r7, #72	; 0x48
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000c40 	.word	0x20000c40
 8002424:	40010000 	.word	0x40010000

08002428 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243c:	463b      	mov	r3, r7
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <MX_TIM2_Init+0x94>)
 8002446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800244a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45000-1;
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <MX_TIM2_Init+0x94>)
 800244e:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <MX_TIM2_Init+0x94>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6-1;
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <MX_TIM2_Init+0x94>)
 800245c:	2205      	movs	r2, #5
 800245e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <MX_TIM2_Init+0x94>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MX_TIM2_Init+0x94>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800246c:	4813      	ldr	r0, [pc, #76]	; (80024bc <MX_TIM2_Init+0x94>)
 800246e:	f002 fbd1 	bl	8004c14 <HAL_TIM_Base_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002478:	f7ff fdf8 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800247c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	4619      	mov	r1, r3
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <MX_TIM2_Init+0x94>)
 800248a:	f003 f965 	bl	8005758 <HAL_TIM_ConfigClockSource>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002494:	f7ff fdea 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024a0:	463b      	mov	r3, r7
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_TIM2_Init+0x94>)
 80024a6:	f003 fe31 	bl	800610c <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024b0:	f7ff fddc 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000c88 	.word	0x20000c88

080024c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c6:	f107 0308 	add.w	r3, r7, #8
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d4:	463b      	mov	r3, r7
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <MX_TIM3_Init+0x94>)
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <MX_TIM3_Init+0x98>)
 80024e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45000-1;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <MX_TIM3_Init+0x94>)
 80024e4:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80024e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <MX_TIM3_Init+0x94>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6-1;
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <MX_TIM3_Init+0x94>)
 80024f2:	2205      	movs	r2, #5
 80024f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <MX_TIM3_Init+0x94>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <MX_TIM3_Init+0x94>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <MX_TIM3_Init+0x94>)
 8002504:	f002 fb86 	bl	8004c14 <HAL_TIM_Base_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800250e:	f7ff fdad 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	4619      	mov	r1, r3
 800251e:	480d      	ldr	r0, [pc, #52]	; (8002554 <MX_TIM3_Init+0x94>)
 8002520:	f003 f91a 	bl	8005758 <HAL_TIM_ConfigClockSource>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800252a:	f7ff fd9f 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002536:	463b      	mov	r3, r7
 8002538:	4619      	mov	r1, r3
 800253a:	4806      	ldr	r0, [pc, #24]	; (8002554 <MX_TIM3_Init+0x94>)
 800253c:	f003 fde6 	bl	800610c <HAL_TIMEx_MasterConfigSynchronization>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002546:	f7ff fd91 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000cd0 	.word	0x20000cd0
 8002558:	40000400 	.word	0x40000400

0800255c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	463b      	mov	r3, r7
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <MX_TIM4_Init+0x94>)
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <MX_TIM4_Init+0x98>)
 800257c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 45000-1;
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <MX_TIM4_Init+0x94>)
 8002580:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002584:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <MX_TIM4_Init+0x94>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6-1;
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <MX_TIM4_Init+0x94>)
 800258e:	2205      	movs	r2, #5
 8002590:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <MX_TIM4_Init+0x94>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <MX_TIM4_Init+0x94>)
 800259a:	2200      	movs	r2, #0
 800259c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800259e:	4814      	ldr	r0, [pc, #80]	; (80025f0 <MX_TIM4_Init+0x94>)
 80025a0:	f002 fb38 	bl	8004c14 <HAL_TIM_Base_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025aa:	f7ff fd5f 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4619      	mov	r1, r3
 80025ba:	480d      	ldr	r0, [pc, #52]	; (80025f0 <MX_TIM4_Init+0x94>)
 80025bc:	f003 f8cc 	bl	8005758 <HAL_TIM_ConfigClockSource>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80025c6:	f7ff fd51 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025d2:	463b      	mov	r3, r7
 80025d4:	4619      	mov	r1, r3
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <MX_TIM4_Init+0x94>)
 80025d8:	f003 fd98 	bl	800610c <HAL_TIMEx_MasterConfigSynchronization>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80025e2:	f7ff fd43 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000d18 	.word	0x20000d18
 80025f4:	40000800 	.word	0x40000800

080025f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260c:	463b      	mov	r3, r7
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <MX_TIM5_Init+0x94>)
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <MX_TIM5_Init+0x98>)
 8002618:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <MX_TIM5_Init+0x94>)
 800261c:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002620:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MX_TIM5_Init+0x94>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 6-1;
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <MX_TIM5_Init+0x94>)
 800262a:	2205      	movs	r2, #5
 800262c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <MX_TIM5_Init+0x94>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b15      	ldr	r3, [pc, #84]	; (800268c <MX_TIM5_Init+0x94>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800263a:	4814      	ldr	r0, [pc, #80]	; (800268c <MX_TIM5_Init+0x94>)
 800263c:	f002 faea 	bl	8004c14 <HAL_TIM_Base_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002646:	f7ff fd11 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002650:	f107 0308 	add.w	r3, r7, #8
 8002654:	4619      	mov	r1, r3
 8002656:	480d      	ldr	r0, [pc, #52]	; (800268c <MX_TIM5_Init+0x94>)
 8002658:	f003 f87e 	bl	8005758 <HAL_TIM_ConfigClockSource>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002662:	f7ff fd03 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800266e:	463b      	mov	r3, r7
 8002670:	4619      	mov	r1, r3
 8002672:	4806      	ldr	r0, [pc, #24]	; (800268c <MX_TIM5_Init+0x94>)
 8002674:	f003 fd4a 	bl	800610c <HAL_TIMEx_MasterConfigSynchronization>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800267e:	f7ff fcf5 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000d60 	.word	0x20000d60
 8002690:	40000c00 	.word	0x40000c00

08002694 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_TIM_PWM_MspInit+0x98>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d13d      	bne.n	8002722 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_TIM_PWM_MspInit+0x9c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_TIM_PWM_MspInit+0x9c>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_TIM_PWM_MspInit+0x9c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_TIM_PWM_MspInit+0xa4>)
 80026c6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80026c8:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026ca:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80026ce:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026f2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 8002702:	2200      	movs	r2, #0
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002706:	480b      	ldr	r0, [pc, #44]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 8002708:	f000 fb16 	bl	8002d38 <HAL_DMA_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002712:	f7ff fcab 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a06      	ldr	r2, [pc, #24]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
 800271c:	4a05      	ldr	r2, [pc, #20]	; (8002734 <HAL_TIM_PWM_MspInit+0xa0>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40010000 	.word	0x40010000
 8002730:	40023800 	.word	0x40023800
 8002734:	20000da8 	.word	0x20000da8
 8002738:	40026428 	.word	0x40026428

0800273c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274c:	d116      	bne.n	800277c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	4b36      	ldr	r3, [pc, #216]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a35      	ldr	r2, [pc, #212]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b33      	ldr	r3, [pc, #204]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2103      	movs	r1, #3
 800276e:	201c      	movs	r0, #28
 8002770:	f000 faab 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002774:	201c      	movs	r0, #28
 8002776:	f000 fac4 	bl	8002d02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800277a:	e052      	b.n	8002822 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <HAL_TIM_Base_MspInit+0xf4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d116      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2103      	movs	r1, #3
 80027a6:	201d      	movs	r0, #29
 80027a8:	f000 fa8f 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027ac:	201d      	movs	r0, #29
 80027ae:	f000 faa8 	bl	8002d02 <HAL_NVIC_EnableIRQ>
}
 80027b2:	e036      	b.n	8002822 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_TIM_Base_MspInit+0xf8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d116      	bne.n	80027ec <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2103      	movs	r1, #3
 80027de:	201e      	movs	r0, #30
 80027e0:	f000 fa73 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027e4:	201e      	movs	r0, #30
 80027e6:	f000 fa8c 	bl	8002d02 <HAL_NVIC_EnableIRQ>
}
 80027ea:	e01a      	b.n	8002822 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM5)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_TIM_Base_MspInit+0xfc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d115      	bne.n	8002822 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a0b      	ldr	r2, [pc, #44]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_TIM_Base_MspInit+0xf0>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2103      	movs	r1, #3
 8002816:	2032      	movs	r0, #50	; 0x32
 8002818:	f000 fa57 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800281c:	2032      	movs	r0, #50	; 0x32
 800281e:	f000 fa70 	bl	8002d02 <HAL_NVIC_EnableIRQ>
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00

0800283c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_TIM_MspPostInit+0x68>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d11e      	bne.n	800289c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_TIM_MspPostInit+0x6c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_TIM_MspPostInit+0x6c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_TIM_MspPostInit+0x6c>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800287a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800287e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800288c:	2301      	movs	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	4619      	mov	r1, r3
 8002896:	4805      	ldr	r0, [pc, #20]	; (80028ac <HAL_TIM_MspPostInit+0x70>)
 8002898:	f000 fde0 	bl	800345c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800289c:	bf00      	nop
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000

080028b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <MX_USART2_UART_Init+0x50>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_USART2_UART_Init+0x4c>)
 80028e8:	f003 fcf2 	bl	80062d0 <HAL_UART_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028f2:	f7ff fbbb 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000e08 	.word	0x20000e08
 8002900:	40004400 	.word	0x40004400

08002904 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_UART_MspInit+0x84>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d12b      	bne.n	800297e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_UART_MspInit+0x88>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_UART_MspInit+0x88>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_UART_MspInit+0x88>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_UART_MspInit+0x88>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a10      	ldr	r2, [pc, #64]	; (800298c <HAL_UART_MspInit+0x88>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <HAL_UART_MspInit+0x88>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800295e:	230c      	movs	r3, #12
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800296e:	2307      	movs	r3, #7
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	4805      	ldr	r0, [pc, #20]	; (8002990 <HAL_UART_MspInit+0x8c>)
 800297a:	f000 fd6f 	bl	800345c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800297e:	bf00      	nop
 8002980:	3728      	adds	r7, #40	; 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40004400 	.word	0x40004400
 800298c:	40023800 	.word	0x40023800
 8002990:	40020000 	.word	0x40020000

08002994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002998:	480d      	ldr	r0, [pc, #52]	; (80029d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800299a:	490e      	ldr	r1, [pc, #56]	; (80029d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800299c:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a0:	e002      	b.n	80029a8 <LoopCopyDataInit>

080029a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a6:	3304      	adds	r3, #4

080029a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029ac:	d3f9      	bcc.n	80029a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029b0:	4c0b      	ldr	r4, [pc, #44]	; (80029e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b4:	e001      	b.n	80029ba <LoopFillZerobss>

080029b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b8:	3204      	adds	r2, #4

080029ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029bc:	d3fb      	bcc.n	80029b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029be:	f7ff fc9f 	bl	8002300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029c2:	f004 fa55 	bl	8006e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029c6:	f7ff f983 	bl	8001cd0 <main>
  bx  lr    
 80029ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80029d8:	08008ee8 	.word	0x08008ee8
  ldr r2, =_sbss
 80029dc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80029e0:	20000f9c 	.word	0x20000f9c

080029e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC_IRQHandler>
	...

080029e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <HAL_Init+0x40>)
 80029f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_Init+0x40>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_Init+0x40>)
 80029fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_Init+0x40>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <HAL_Init+0x40>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a10:	2003      	movs	r0, #3
 8002a12:	f000 f94f 	bl	8002cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a16:	200f      	movs	r0, #15
 8002a18:	f000 f808 	bl	8002a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a1c:	f7ff fb2c 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00

08002a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_InitTick+0x54>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_InitTick+0x58>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f967 	bl	8002d1e <HAL_SYSTICK_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00e      	b.n	8002a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b0f      	cmp	r3, #15
 8002a5e:	d80a      	bhi.n	8002a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a60:	2200      	movs	r2, #0
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	f000 f92f 	bl	8002cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a6c:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <HAL_InitTick+0x5c>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000028 	.word	0x20000028
 8002a84:	20000030 	.word	0x20000030
 8002a88:	2000002c 	.word	0x2000002c

08002a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_IncTick+0x20>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_IncTick+0x24>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_IncTick+0x24>)
 8002a9e:	6013      	str	r3, [r2, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000030 	.word	0x20000030
 8002ab0:	20000e4c 	.word	0x20000e4c

08002ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_GetTick+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000e4c 	.word	0x20000e4c

08002acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff ffee 	bl	8002ab4 <HAL_GetTick>
 8002ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d005      	beq.n	8002af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_Delay+0x44>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002af2:	bf00      	nop
 8002af4:	f7ff ffde 	bl	8002ab4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d8f7      	bhi.n	8002af4 <HAL_Delay+0x28>
  {
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000030 	.word	0x20000030

08002b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60d3      	str	r3, [r2, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db0b      	blt.n	8002ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4907      	ldr	r1, [pc, #28]	; (8002bb0 <__NVIC_EnableIRQ+0x38>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2001      	movs	r0, #1
 8002b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000e100 	.word	0xe000e100

08002bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	db0a      	blt.n	8002bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	490c      	ldr	r1, [pc, #48]	; (8002c00 <__NVIC_SetPriority+0x4c>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bdc:	e00a      	b.n	8002bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4908      	ldr	r1, [pc, #32]	; (8002c04 <__NVIC_SetPriority+0x50>)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	3b04      	subs	r3, #4
 8002bec:	0112      	lsls	r2, r2, #4
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	761a      	strb	r2, [r3, #24]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000e100 	.word	0xe000e100
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f1c3 0307 	rsb	r3, r3, #7
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	bf28      	it	cs
 8002c26:	2304      	movcs	r3, #4
 8002c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d902      	bls.n	8002c38 <NVIC_EncodePriority+0x30>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3b03      	subs	r3, #3
 8002c36:	e000      	b.n	8002c3a <NVIC_EncodePriority+0x32>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c50:	f04f 31ff 	mov.w	r1, #4294967295
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	43d9      	mvns	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	4313      	orrs	r3, r2
         );
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3724      	adds	r7, #36	; 0x24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c80:	d301      	bcc.n	8002c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00f      	b.n	8002ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c86:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <SysTick_Config+0x40>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8e:	210f      	movs	r1, #15
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	f7ff ff8e 	bl	8002bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <SysTick_Config+0x40>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <SysTick_Config+0x40>)
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	e000e010 	.word	0xe000e010

08002cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff ff29 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cdc:	f7ff ff3e 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	f7ff ff8e 	bl	8002c08 <NVIC_EncodePriority>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff5d 	bl	8002bb4 <__NVIC_SetPriority>
}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff31 	bl	8002b78 <__NVIC_EnableIRQ>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffa2 	bl	8002c70 <SysTick_Config>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff feb6 	bl	8002ab4 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e099      	b.n	8002e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d74:	e00f      	b.n	8002d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d76:	f7ff fe9d 	bl	8002ab4 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d908      	bls.n	8002d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e078      	b.n	8002e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e8      	bne.n	8002d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_DMA_Init+0x158>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d107      	bne.n	8002e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f023 0307 	bic.w	r3, r3, #7
 8002e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d117      	bne.n	8002e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fa91 	bl	8003364 <DMA_CheckFifoParam>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2240      	movs	r2, #64	; 0x40
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e56:	2301      	movs	r3, #1
 8002e58:	e016      	b.n	8002e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa48 	bl	80032f8 <DMA_CalcBaseAndBitshift>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	223f      	movs	r2, #63	; 0x3f
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	f010803f 	.word	0xf010803f

08002e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_DMA_Start_IT+0x26>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e040      	b.n	8002f3c <HAL_DMA_Start_IT+0xa8>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d12f      	bne.n	8002f2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f9da 	bl	800329c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	223f      	movs	r2, #63	; 0x3f
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0216 	orr.w	r2, r2, #22
 8002f02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0208 	orr.w	r2, r2, #8
 8002f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e005      	b.n	8002f3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d004      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00c      	b.n	8002f7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2205      	movs	r2, #5
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f94:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <HAL_DMA_IRQHandler+0x248>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a8e      	ldr	r2, [pc, #568]	; (80031d4 <HAL_DMA_IRQHandler+0x24c>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0204 	bic.w	r2, r2, #4
 8002fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	2204      	movs	r2, #4
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	2204      	movs	r2, #4
 800304e:	409a      	lsls	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0204 	orr.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2210      	movs	r2, #16
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d043      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03c      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2210      	movs	r2, #16
 8003084:	409a      	lsls	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d018      	beq.n	80030ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d024      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
 80030b6:	e01f      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
 80030c8:	e016      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0208 	bic.w	r2, r2, #8
 80030e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2220      	movs	r2, #32
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 808f 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8087 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2220      	movs	r2, #32
 8003120:	409a      	lsls	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b05      	cmp	r3, #5
 8003130:	d136      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0216 	bic.w	r2, r2, #22
 8003140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_DMA_IRQHandler+0x1da>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0208 	bic.w	r2, r2, #8
 8003170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	223f      	movs	r2, #63	; 0x3f
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	2b00      	cmp	r3, #0
 8003194:	d07e      	beq.n	8003294 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
        }
        return;
 800319e:	e079      	b.n	8003294 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d031      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e02c      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
 80031ce:	bf00      	nop
 80031d0:	20000028 	.word	0x20000028
 80031d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d023      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	e01e      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0210 	bic.w	r2, r2, #16
 8003206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	2b00      	cmp	r3, #0
 800322e:	d032      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2205      	movs	r2, #5
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3301      	adds	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	d307      	bcc.n	8003270 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f2      	bne.n	8003254 <HAL_DMA_IRQHandler+0x2cc>
 800326e:	e000      	b.n	8003272 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003270:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e000      	b.n	8003296 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003294:	bf00      	nop
    }
  }
}
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d108      	bne.n	80032dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032da:	e007      	b.n	80032ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3b10      	subs	r3, #16
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <DMA_CalcBaseAndBitshift+0x64>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <DMA_CalcBaseAndBitshift+0x68>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d909      	bls.n	800333a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	1d1a      	adds	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	659a      	str	r2, [r3, #88]	; 0x58
 8003338:	e007      	b.n	800334a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	aaaaaaab 	.word	0xaaaaaaab
 8003360:	08008cc4 	.word	0x08008cc4

08003364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11f      	bne.n	80033be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d856      	bhi.n	8003432 <DMA_CheckFifoParam+0xce>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <DMA_CheckFifoParam+0x28>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033af 	.word	0x080033af
 8003394:	0800339d 	.word	0x0800339d
 8003398:	08003433 	.word	0x08003433
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d046      	beq.n	8003436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ac:	e043      	b.n	8003436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033b6:	d140      	bne.n	800343a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e03d      	b.n	800343a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c6:	d121      	bne.n	800340c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d837      	bhi.n	800343e <DMA_CheckFifoParam+0xda>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <DMA_CheckFifoParam+0x70>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033eb 	.word	0x080033eb
 80033dc:	080033e5 	.word	0x080033e5
 80033e0:	080033fd 	.word	0x080033fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e030      	b.n	800344c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d025      	beq.n	8003442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fa:	e022      	b.n	8003442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003404:	d11f      	bne.n	8003446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340a:	e01c      	b.n	8003446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d903      	bls.n	800341a <DMA_CheckFifoParam+0xb6>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d003      	beq.n	8003420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003418:	e018      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      break;
 800341e:	e015      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00e      	beq.n	800344a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e00b      	b.n	800344a <DMA_CheckFifoParam+0xe6>
      break;
 8003432:	bf00      	nop
 8003434:	e00a      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e008      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e006      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e004      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e002      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;   
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
    }
  } 
  
  return status; 
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop

0800345c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e165      	b.n	8003744 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	f040 8154 	bne.w	800373e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d005      	beq.n	80034ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d130      	bne.n	8003510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e4:	2201      	movs	r2, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 0201 	and.w	r2, r3, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b03      	cmp	r3, #3
 800351a:	d017      	beq.n	800354c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d123      	bne.n	80035a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	08da      	lsrs	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3208      	adds	r2, #8
 8003560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	220f      	movs	r2, #15
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	08da      	lsrs	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3208      	adds	r2, #8
 800359a:	69b9      	ldr	r1, [r7, #24]
 800359c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0203 	and.w	r2, r3, #3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80ae 	beq.w	800373e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_GPIO_Init+0x300>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a5c      	ldr	r2, [pc, #368]	; (800375c <HAL_GPIO_Init+0x300>)
 80035ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b5a      	ldr	r3, [pc, #360]	; (800375c <HAL_GPIO_Init+0x300>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035fe:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_GPIO_Init+0x304>)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4f      	ldr	r2, [pc, #316]	; (8003764 <HAL_GPIO_Init+0x308>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d025      	beq.n	8003676 <HAL_GPIO_Init+0x21a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a4e      	ldr	r2, [pc, #312]	; (8003768 <HAL_GPIO_Init+0x30c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01f      	beq.n	8003672 <HAL_GPIO_Init+0x216>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a4d      	ldr	r2, [pc, #308]	; (800376c <HAL_GPIO_Init+0x310>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d019      	beq.n	800366e <HAL_GPIO_Init+0x212>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a4c      	ldr	r2, [pc, #304]	; (8003770 <HAL_GPIO_Init+0x314>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_GPIO_Init+0x20e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a4b      	ldr	r2, [pc, #300]	; (8003774 <HAL_GPIO_Init+0x318>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00d      	beq.n	8003666 <HAL_GPIO_Init+0x20a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a4a      	ldr	r2, [pc, #296]	; (8003778 <HAL_GPIO_Init+0x31c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <HAL_GPIO_Init+0x206>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a49      	ldr	r2, [pc, #292]	; (800377c <HAL_GPIO_Init+0x320>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <HAL_GPIO_Init+0x202>
 800365a:	2306      	movs	r3, #6
 800365c:	e00c      	b.n	8003678 <HAL_GPIO_Init+0x21c>
 800365e:	2307      	movs	r3, #7
 8003660:	e00a      	b.n	8003678 <HAL_GPIO_Init+0x21c>
 8003662:	2305      	movs	r3, #5
 8003664:	e008      	b.n	8003678 <HAL_GPIO_Init+0x21c>
 8003666:	2304      	movs	r3, #4
 8003668:	e006      	b.n	8003678 <HAL_GPIO_Init+0x21c>
 800366a:	2303      	movs	r3, #3
 800366c:	e004      	b.n	8003678 <HAL_GPIO_Init+0x21c>
 800366e:	2302      	movs	r3, #2
 8003670:	e002      	b.n	8003678 <HAL_GPIO_Init+0x21c>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_GPIO_Init+0x21c>
 8003676:	2300      	movs	r3, #0
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	f002 0203 	and.w	r2, r2, #3
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	4093      	lsls	r3, r2
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003688:	4935      	ldr	r1, [pc, #212]	; (8003760 <HAL_GPIO_Init+0x304>)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3302      	adds	r3, #2
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003696:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <HAL_GPIO_Init+0x324>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ba:	4a31      	ldr	r2, [pc, #196]	; (8003780 <HAL_GPIO_Init+0x324>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036c0:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <HAL_GPIO_Init+0x324>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036e4:	4a26      	ldr	r2, [pc, #152]	; (8003780 <HAL_GPIO_Init+0x324>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_GPIO_Init+0x324>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_GPIO_Init+0x324>)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_GPIO_Init+0x324>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <HAL_GPIO_Init+0x324>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3301      	adds	r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b0f      	cmp	r3, #15
 8003748:	f67f ae96 	bls.w	8003478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3724      	adds	r7, #36	; 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	40013800 	.word	0x40013800
 8003764:	40020000 	.word	0x40020000
 8003768:	40020400 	.word	0x40020400
 800376c:	40020800 	.word	0x40020800
 8003770:	40020c00 	.word	0x40020c00
 8003774:	40021000 	.word	0x40021000
 8003778:	40021400 	.word	0x40021400
 800377c:	40021800 	.word	0x40021800
 8003780:	40013c00 	.word	0x40013c00

08003784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e001      	b.n	80037a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
 80037c0:	4613      	mov	r3, r2
 80037c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c4:	787b      	ldrb	r3, [r7, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037d0:	e003      	b.n	80037da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	041a      	lsls	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	619a      	str	r2, [r3, #24]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d006      	beq.n	800380c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037fe:	4a05      	ldr	r2, [pc, #20]	; (8003814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe faf8 	bl	8001dfc <HAL_GPIO_EXTI_Callback>
  }
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40013c00 	.word	0x40013c00

08003818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e12b      	b.n	8003a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd fc72 	bl	8001128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800387a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800387c:	f000 fd5a 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8003880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a81      	ldr	r2, [pc, #516]	; (8003a8c <HAL_I2C_Init+0x274>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d807      	bhi.n	800389c <HAL_I2C_Init+0x84>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a80      	ldr	r2, [pc, #512]	; (8003a90 <HAL_I2C_Init+0x278>)
 8003890:	4293      	cmp	r3, r2
 8003892:	bf94      	ite	ls
 8003894:	2301      	movls	r3, #1
 8003896:	2300      	movhi	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e006      	b.n	80038aa <HAL_I2C_Init+0x92>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a7d      	ldr	r2, [pc, #500]	; (8003a94 <HAL_I2C_Init+0x27c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bf94      	ite	ls
 80038a4:	2301      	movls	r3, #1
 80038a6:	2300      	movhi	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0e7      	b.n	8003a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a78      	ldr	r2, [pc, #480]	; (8003a98 <HAL_I2C_Init+0x280>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9b      	lsrs	r3, r3, #18
 80038bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a6a      	ldr	r2, [pc, #424]	; (8003a8c <HAL_I2C_Init+0x274>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d802      	bhi.n	80038ec <HAL_I2C_Init+0xd4>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3301      	adds	r3, #1
 80038ea:	e009      	b.n	8003900 <HAL_I2C_Init+0xe8>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	4a69      	ldr	r2, [pc, #420]	; (8003a9c <HAL_I2C_Init+0x284>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	3301      	adds	r3, #1
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	495c      	ldr	r1, [pc, #368]	; (8003a8c <HAL_I2C_Init+0x274>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d819      	bhi.n	8003954 <HAL_I2C_Init+0x13c>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e59      	subs	r1, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fbb1 f3f3 	udiv	r3, r1, r3
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003934:	400b      	ands	r3, r1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_I2C_Init+0x138>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1e59      	subs	r1, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fbb1 f3f3 	udiv	r3, r1, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	e051      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 8003950:	2304      	movs	r3, #4
 8003952:	e04f      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d111      	bne.n	8003980 <HAL_I2C_Init+0x168>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1e58      	subs	r0, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	440b      	add	r3, r1
 800396a:	fbb0 f3f3 	udiv	r3, r0, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e012      	b.n	80039a6 <HAL_I2C_Init+0x18e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1e58      	subs	r0, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	0099      	lsls	r1, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	fbb0 f3f3 	udiv	r3, r0, r3
 8003996:	3301      	adds	r3, #1
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Init+0x196>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e022      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10e      	bne.n	80039d4 <HAL_I2C_Init+0x1bc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1e58      	subs	r0, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	440b      	add	r3, r1
 80039c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c8:	3301      	adds	r3, #1
 80039ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d2:	e00f      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	6809      	ldr	r1, [r1, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6911      	ldr	r1, [r2, #16]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68d2      	ldr	r2, [r2, #12]
 8003a2e:	4311      	orrs	r1, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	000186a0 	.word	0x000186a0
 8003a90:	001e847f 	.word	0x001e847f
 8003a94:	003d08ff 	.word	0x003d08ff
 8003a98:	431bde83 	.word	0x431bde83
 8003a9c:	10624dd3 	.word	0x10624dd3

08003aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7fe fffe 	bl	8002ab4 <HAL_GetTick>
 8003ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	f040 80e0 	bne.w	8003c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2319      	movs	r3, #25
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4970      	ldr	r1, [pc, #448]	; (8003c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f964 	bl	8003da0 <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e0d3      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2C_Master_Transmit+0x50>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0cc      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d007      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2221      	movs	r2, #33	; 0x21
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2210      	movs	r2, #16
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	893a      	ldrh	r2, [r7, #8]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a50      	ldr	r2, [pc, #320]	; (8003c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b58:	8979      	ldrh	r1, [r7, #10]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f89c 	bl	8003c9c <I2C_MasterRequestWrite>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e08d      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b84:	e066      	b.n	8003c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f9de 	bl	8003f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06b      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d11b      	bne.n	8003c28 <HAL_I2C_Master_Transmit+0x188>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d017      	beq.n	8003c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	6a39      	ldr	r1, [r7, #32]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f9ce 	bl	8003fce <I2C_WaitOnBTFFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d107      	bne.n	8003c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e01a      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d194      	bne.n	8003b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	00100002 	.word	0x00100002
 8003c98:	ffff0000 	.word	0xffff0000

08003c9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d006      	beq.n	8003cc6 <I2C_MasterRequestWrite+0x2a>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d003      	beq.n	8003cc6 <I2C_MasterRequestWrite+0x2a>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cc4:	d108      	bne.n	8003cd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e00b      	b.n	8003cf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	2b12      	cmp	r3, #18
 8003cde:	d107      	bne.n	8003cf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f84f 	bl	8003da0 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d16:	d103      	bne.n	8003d20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e035      	b.n	8003d90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d2c:	d108      	bne.n	8003d40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d2e:	897b      	ldrh	r3, [r7, #10]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	e01b      	b.n	8003d78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d40:	897b      	ldrh	r3, [r7, #10]
 8003d42:	11db      	asrs	r3, r3, #7
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f003 0306 	and.w	r3, r3, #6
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f063 030f 	orn	r3, r3, #15
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	490e      	ldr	r1, [pc, #56]	; (8003d98 <I2C_MasterRequestWrite+0xfc>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f875 	bl	8003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e010      	b.n	8003d90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4907      	ldr	r1, [pc, #28]	; (8003d9c <I2C_MasterRequestWrite+0x100>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f865 	bl	8003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	00010008 	.word	0x00010008
 8003d9c:	00010002 	.word	0x00010002

08003da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db0:	e025      	b.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d021      	beq.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	f7fe fe7b 	bl	8002ab4 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d116      	bne.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e023      	b.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d10d      	bne.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	e00c      	b.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d0b6      	beq.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e5c:	e051      	b.n	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6c:	d123      	bne.n	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f043 0204 	orr.w	r2, r3, #4
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e046      	b.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d021      	beq.n	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fe fdf9 	bl	8002ab4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e020      	b.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10c      	bne.n	8003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	43da      	mvns	r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4013      	ands	r3, r2
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e00b      	b.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d18d      	bne.n	8003e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f58:	e02d      	b.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f878 	bl	8004050 <I2C_IsAcknowledgeFailed>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e02d      	b.n	8003fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d021      	beq.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fe fd9f 	bl	8002ab4 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d116      	bne.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e007      	b.n	8003fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d1ca      	bne.n	8003f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fda:	e02d      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f837 	bl	8004050 <I2C_IsAcknowledgeFailed>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e02d      	b.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d021      	beq.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fe fd5e 	bl	8002ab4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e007      	b.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b04      	cmp	r3, #4
 8004044:	d1ca      	bne.n	8003fdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d11b      	bne.n	80040a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004070:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_PWREx_EnableOverDrive+0x90>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	4a1f      	ldr	r2, [pc, #124]	; (8004140 <HAL_PWREx_EnableOverDrive+0x90>)
 80040c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ca:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <HAL_PWREx_EnableOverDrive+0x90>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_PWREx_EnableOverDrive+0x94>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7fe fcea 	bl	8002ab4 <HAL_GetTick>
 80040e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040e2:	e009      	b.n	80040f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040e4:	f7fe fce6 	bl	8002ab4 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f2:	d901      	bls.n	80040f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e01f      	b.n	8004138 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_PWREx_EnableOverDrive+0x98>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d1ee      	bne.n	80040e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800410c:	f7fe fcd2 	bl	8002ab4 <HAL_GetTick>
 8004110:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004112:	e009      	b.n	8004128 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004114:	f7fe fcce 	bl	8002ab4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004122:	d901      	bls.n	8004128 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e007      	b.n	8004138 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <HAL_PWREx_EnableOverDrive+0x98>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004134:	d1ee      	bne.n	8004114 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	420e0040 	.word	0x420e0040
 8004148:	40007000 	.word	0x40007000
 800414c:	420e0044 	.word	0x420e0044

08004150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0cc      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b68      	ldr	r3, [pc, #416]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d90c      	bls.n	800418c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0b8      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d020      	beq.n	80041da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a4:	4b59      	ldr	r3, [pc, #356]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a58      	ldr	r2, [pc, #352]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041bc:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c8:	4b50      	ldr	r3, [pc, #320]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	494d      	ldr	r1, [pc, #308]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d044      	beq.n	8004270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b47      	ldr	r3, [pc, #284]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d119      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e07f      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d003      	beq.n	800420e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420a:	2b03      	cmp	r3, #3
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420e:	4b3f      	ldr	r3, [pc, #252]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e06f      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	4b3b      	ldr	r3, [pc, #236]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e067      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4934      	ldr	r1, [pc, #208]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004240:	f7fe fc38 	bl	8002ab4 <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	e00a      	b.n	800425e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fe fc34 	bl	8002ab4 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e04f      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b2b      	ldr	r3, [pc, #172]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 020c 	and.w	r2, r3, #12
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1eb      	bne.n	8004248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d20c      	bcs.n	8004298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e032      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4916      	ldr	r1, [pc, #88]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	490e      	ldr	r1, [pc, #56]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d6:	f000 f855 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	490a      	ldr	r1, [pc, #40]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 80042e8:	5ccb      	ldrb	r3, [r1, r3]
 80042ea:	fa22 f303 	lsr.w	r3, r2, r3
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_ClockConfig+0x1c8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe fb98 	bl	8002a2c <HAL_InitTick>

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023c00 	.word	0x40023c00
 800430c:	40023800 	.word	0x40023800
 8004310:	08008cac 	.word	0x08008cac
 8004314:	20000028 	.word	0x20000028
 8004318:	2000002c 	.word	0x2000002c

0800431c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_RCC_GetHCLKFreq+0x14>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000028 	.word	0x20000028

08004334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004338:	f7ff fff0 	bl	800431c <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0a9b      	lsrs	r3, r3, #10
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	08008cbc 	.word	0x08008cbc

0800435c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004360:	f7ff ffdc 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	0b5b      	lsrs	r3, r3, #13
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4903      	ldr	r1, [pc, #12]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40023800 	.word	0x40023800
 8004380:	08008cbc 	.word	0x08008cbc

08004384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004388:	b0a6      	sub	sp, #152	; 0x98
 800438a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043aa:	4bc8      	ldr	r3, [pc, #800]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	f200 817e 	bhi.w	80046b4 <HAL_RCC_GetSysClockFreq+0x330>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	080046b5 	.word	0x080046b5
 80043c8:	080046b5 	.word	0x080046b5
 80043cc:	080046b5 	.word	0x080046b5
 80043d0:	080043fd 	.word	0x080043fd
 80043d4:	080046b5 	.word	0x080046b5
 80043d8:	080046b5 	.word	0x080046b5
 80043dc:	080046b5 	.word	0x080046b5
 80043e0:	08004405 	.word	0x08004405
 80043e4:	080046b5 	.word	0x080046b5
 80043e8:	080046b5 	.word	0x080046b5
 80043ec:	080046b5 	.word	0x080046b5
 80043f0:	0800456f 	.word	0x0800456f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f4:	4bb6      	ldr	r3, [pc, #728]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80043f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80043fa:	e15f      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fc:	4bb5      	ldr	r3, [pc, #724]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80043fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004402:	e15b      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004404:	4bb1      	ldr	r3, [pc, #708]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004410:	4bae      	ldr	r3, [pc, #696]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d031      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441c:	4bab      	ldr	r3, [pc, #684]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	099b      	lsrs	r3, r3, #6
 8004422:	2200      	movs	r2, #0
 8004424:	66bb      	str	r3, [r7, #104]	; 0x68
 8004426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800442a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442e:	663b      	str	r3, [r7, #96]	; 0x60
 8004430:	2300      	movs	r3, #0
 8004432:	667b      	str	r3, [r7, #100]	; 0x64
 8004434:	4ba7      	ldr	r3, [pc, #668]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004436:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800443a:	462a      	mov	r2, r5
 800443c:	fb03 f202 	mul.w	r2, r3, r2
 8004440:	2300      	movs	r3, #0
 8004442:	4621      	mov	r1, r4
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	4aa2      	ldr	r2, [pc, #648]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800444c:	4621      	mov	r1, r4
 800444e:	fba1 1202 	umull	r1, r2, r1, r2
 8004452:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004454:	460a      	mov	r2, r1
 8004456:	67ba      	str	r2, [r7, #120]	; 0x78
 8004458:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800445a:	4413      	add	r3, r2
 800445c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800445e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004462:	2200      	movs	r2, #0
 8004464:	65bb      	str	r3, [r7, #88]	; 0x58
 8004466:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004468:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800446c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004470:	f7fc fc0c 	bl	8000c8c <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4613      	mov	r3, r2
 800447a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800447e:	e064      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004480:	4b92      	ldr	r3, [pc, #584]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	2200      	movs	r2, #0
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
 800448a:	657a      	str	r2, [r7, #84]	; 0x54
 800448c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
 8004494:	2300      	movs	r3, #0
 8004496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004498:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800449c:	4622      	mov	r2, r4
 800449e:	462b      	mov	r3, r5
 80044a0:	f04f 0000 	mov.w	r0, #0
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	0159      	lsls	r1, r3, #5
 80044aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ae:	0150      	lsls	r0, r2, #5
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4621      	mov	r1, r4
 80044b6:	1a51      	subs	r1, r2, r1
 80044b8:	6139      	str	r1, [r7, #16]
 80044ba:	4629      	mov	r1, r5
 80044bc:	eb63 0301 	sbc.w	r3, r3, r1
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044ce:	4659      	mov	r1, fp
 80044d0:	018b      	lsls	r3, r1, #6
 80044d2:	4651      	mov	r1, sl
 80044d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044d8:	4651      	mov	r1, sl
 80044da:	018a      	lsls	r2, r1, #6
 80044dc:	4651      	mov	r1, sl
 80044de:	ebb2 0801 	subs.w	r8, r2, r1
 80044e2:	4659      	mov	r1, fp
 80044e4:	eb63 0901 	sbc.w	r9, r3, r1
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044fc:	4690      	mov	r8, r2
 80044fe:	4699      	mov	r9, r3
 8004500:	4623      	mov	r3, r4
 8004502:	eb18 0303 	adds.w	r3, r8, r3
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	462b      	mov	r3, r5
 800450a:	eb49 0303 	adc.w	r3, r9, r3
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800451c:	4629      	mov	r1, r5
 800451e:	028b      	lsls	r3, r1, #10
 8004520:	4621      	mov	r1, r4
 8004522:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004526:	4621      	mov	r1, r4
 8004528:	028a      	lsls	r2, r1, #10
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004532:	2200      	movs	r2, #0
 8004534:	643b      	str	r3, [r7, #64]	; 0x40
 8004536:	647a      	str	r2, [r7, #68]	; 0x44
 8004538:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800453c:	f7fc fba6 	bl	8000c8c <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800454a:	4b60      	ldr	r3, [pc, #384]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	3301      	adds	r3, #1
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800455c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800456c:	e0a6      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800456e:	4b57      	ldr	r3, [pc, #348]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800457a:	4b54      	ldr	r3, [pc, #336]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d02a      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004586:	4b51      	ldr	r3, [pc, #324]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	099b      	lsrs	r3, r3, #6
 800458c:	2200      	movs	r2, #0
 800458e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004590:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004598:	2100      	movs	r1, #0
 800459a:	4b4e      	ldr	r3, [pc, #312]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800459c:	fb03 f201 	mul.w	r2, r3, r1
 80045a0:	2300      	movs	r3, #0
 80045a2:	fb00 f303 	mul.w	r3, r0, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	4a4a      	ldr	r2, [pc, #296]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80045aa:	fba0 1202 	umull	r1, r2, r0, r2
 80045ae:	677a      	str	r2, [r7, #116]	; 0x74
 80045b0:	460a      	mov	r2, r1
 80045b2:	673a      	str	r2, [r7, #112]	; 0x70
 80045b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045b6:	4413      	add	r3, r2
 80045b8:	677b      	str	r3, [r7, #116]	; 0x74
 80045ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045be:	2200      	movs	r2, #0
 80045c0:	633b      	str	r3, [r7, #48]	; 0x30
 80045c2:	637a      	str	r2, [r7, #52]	; 0x34
 80045c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80045cc:	f7fc fb5e 	bl	8000c8c <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045da:	e05b      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045dc:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	2200      	movs	r2, #0
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	2300      	movs	r3, #0
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
 80045f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f8:	4642      	mov	r2, r8
 80045fa:	464b      	mov	r3, r9
 80045fc:	f04f 0000 	mov.w	r0, #0
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	0159      	lsls	r1, r3, #5
 8004606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800460a:	0150      	lsls	r0, r2, #5
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4641      	mov	r1, r8
 8004612:	ebb2 0a01 	subs.w	sl, r2, r1
 8004616:	4649      	mov	r1, r9
 8004618:	eb63 0b01 	sbc.w	fp, r3, r1
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800462c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004630:	ebb2 040a 	subs.w	r4, r2, sl
 8004634:	eb63 050b 	sbc.w	r5, r3, fp
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	00eb      	lsls	r3, r5, #3
 8004642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004646:	00e2      	lsls	r2, r4, #3
 8004648:	4614      	mov	r4, r2
 800464a:	461d      	mov	r5, r3
 800464c:	4643      	mov	r3, r8
 800464e:	18e3      	adds	r3, r4, r3
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	464b      	mov	r3, r9
 8004654:	eb45 0303 	adc.w	r3, r5, r3
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004666:	4629      	mov	r1, r5
 8004668:	028b      	lsls	r3, r1, #10
 800466a:	4621      	mov	r1, r4
 800466c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004670:	4621      	mov	r1, r4
 8004672:	028a      	lsls	r2, r1, #10
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800467c:	2200      	movs	r2, #0
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	61fa      	str	r2, [r7, #28]
 8004682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004686:	f7fc fb01 	bl	8000c8c <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4613      	mov	r3, r2
 8004690:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_RCC_GetSysClockFreq+0x348>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	0f1b      	lsrs	r3, r3, #28
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80046a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80046b2:	e003      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80046b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80046ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3798      	adds	r7, #152	; 0x98
 80046c4:	46bd      	mov	sp, r7
 80046c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	00f42400 	.word	0x00f42400
 80046d4:	017d7840 	.word	0x017d7840

080046d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e28d      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8083 	beq.w	80047fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046f8:	4b94      	ldr	r3, [pc, #592]	; (800494c <HAL_RCC_OscConfig+0x274>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b04      	cmp	r3, #4
 8004702:	d019      	beq.n	8004738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004704:	4b91      	ldr	r3, [pc, #580]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800470c:	2b08      	cmp	r3, #8
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004710:	4b8e      	ldr	r3, [pc, #568]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471c:	d00c      	beq.n	8004738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471e:	4b8b      	ldr	r3, [pc, #556]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d112      	bne.n	8004750 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472a:	4b88      	ldr	r3, [pc, #544]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004736:	d10b      	bne.n	8004750 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	4b84      	ldr	r3, [pc, #528]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05b      	beq.n	80047fc <HAL_RCC_OscConfig+0x124>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d157      	bne.n	80047fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e25a      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004758:	d106      	bne.n	8004768 <HAL_RCC_OscConfig+0x90>
 800475a:	4b7c      	ldr	r3, [pc, #496]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a7b      	ldr	r2, [pc, #492]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e01d      	b.n	80047a4 <HAL_RCC_OscConfig+0xcc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0xb4>
 8004772:	4b76      	ldr	r3, [pc, #472]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a75      	ldr	r2, [pc, #468]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b73      	ldr	r3, [pc, #460]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a72      	ldr	r2, [pc, #456]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0xcc>
 800478c:	4b6f      	ldr	r3, [pc, #444]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6e      	ldr	r2, [pc, #440]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b6c      	ldr	r3, [pc, #432]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6b      	ldr	r2, [pc, #428]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fe f982 	bl	8002ab4 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fe f97e 	bl	8002ab4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e21f      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b61      	ldr	r3, [pc, #388]	; (800494c <HAL_RCC_OscConfig+0x274>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0xdc>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe f96e 	bl	8002ab4 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fe f96a 	bl	8002ab4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e20b      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	4b57      	ldr	r3, [pc, #348]	; (800494c <HAL_RCC_OscConfig+0x274>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x104>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d06f      	beq.n	80048ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800480a:	4b50      	ldr	r3, [pc, #320]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b00      	cmp	r3, #0
 8004814:	d017      	beq.n	8004846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004816:	4b4d      	ldr	r3, [pc, #308]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800481e:	2b08      	cmp	r3, #8
 8004820:	d105      	bne.n	800482e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004822:	4b4a      	ldr	r3, [pc, #296]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482e:	4b47      	ldr	r3, [pc, #284]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d11c      	bne.n	8004874 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483a:	4b44      	ldr	r3, [pc, #272]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d116      	bne.n	8004874 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004846:	4b41      	ldr	r3, [pc, #260]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_RCC_OscConfig+0x186>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e1d3      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485e:	4b3b      	ldr	r3, [pc, #236]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4937      	ldr	r1, [pc, #220]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	e03a      	b.n	80048ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800487c:	4b34      	ldr	r3, [pc, #208]	; (8004950 <HAL_RCC_OscConfig+0x278>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fe f917 	bl	8002ab4 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800488a:	f7fe f913 	bl	8002ab4 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e1b4      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489c:	4b2b      	ldr	r3, [pc, #172]	; (800494c <HAL_RCC_OscConfig+0x274>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a8:	4b28      	ldr	r3, [pc, #160]	; (800494c <HAL_RCC_OscConfig+0x274>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4925      	ldr	r1, [pc, #148]	; (800494c <HAL_RCC_OscConfig+0x274>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	600b      	str	r3, [r1, #0]
 80048bc:	e015      	b.n	80048ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_RCC_OscConfig+0x278>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fe f8f6 	bl	8002ab4 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048cc:	f7fe f8f2 	bl	8002ab4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e193      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x274>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d036      	beq.n	8004964 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fe f8d6 	bl	8002ab4 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800490c:	f7fe f8d2 	bl	8002ab4 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e173      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_OscConfig+0x274>)
 8004920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x234>
 800492a:	e01b      	b.n	8004964 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCC_OscConfig+0x27c>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fe f8bf 	bl	8002ab4 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004938:	e00e      	b.n	8004958 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800493a:	f7fe f8bb 	bl	8002ab4 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d907      	bls.n	8004958 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e15c      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
 800494c:	40023800 	.word	0x40023800
 8004950:	42470000 	.word	0x42470000
 8004954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004958:	4b8a      	ldr	r3, [pc, #552]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 800495a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ea      	bne.n	800493a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8097 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004976:	4b83      	ldr	r3, [pc, #524]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10f      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	4b7f      	ldr	r3, [pc, #508]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	4a7e      	ldr	r2, [pc, #504]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 800498c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004990:	6413      	str	r3, [r2, #64]	; 0x40
 8004992:	4b7c      	ldr	r3, [pc, #496]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499a:	60bb      	str	r3, [r7, #8]
 800499c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a2:	4b79      	ldr	r3, [pc, #484]	; (8004b88 <HAL_RCC_OscConfig+0x4b0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d118      	bne.n	80049e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ae:	4b76      	ldr	r3, [pc, #472]	; (8004b88 <HAL_RCC_OscConfig+0x4b0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a75      	ldr	r2, [pc, #468]	; (8004b88 <HAL_RCC_OscConfig+0x4b0>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ba:	f7fe f87b 	bl	8002ab4 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c2:	f7fe f877 	bl	8002ab4 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e118      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d4:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCC_OscConfig+0x4b0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d106      	bne.n	80049f6 <HAL_RCC_OscConfig+0x31e>
 80049e8:	4b66      	ldr	r3, [pc, #408]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	4a65      	ldr	r2, [pc, #404]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6713      	str	r3, [r2, #112]	; 0x70
 80049f4:	e01c      	b.n	8004a30 <HAL_RCC_OscConfig+0x358>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x340>
 80049fe:	4b61      	ldr	r3, [pc, #388]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a60      	ldr	r2, [pc, #384]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	4b5e      	ldr	r3, [pc, #376]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	4a5d      	ldr	r2, [pc, #372]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6713      	str	r3, [r2, #112]	; 0x70
 8004a16:	e00b      	b.n	8004a30 <HAL_RCC_OscConfig+0x358>
 8004a18:	4b5a      	ldr	r3, [pc, #360]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1c:	4a59      	ldr	r2, [pc, #356]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	6713      	str	r3, [r2, #112]	; 0x70
 8004a24:	4b57      	ldr	r3, [pc, #348]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	4a56      	ldr	r2, [pc, #344]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a2a:	f023 0304 	bic.w	r3, r3, #4
 8004a2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d015      	beq.n	8004a64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fe f83c 	bl	8002ab4 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fe f838 	bl	8002ab4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0d7      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a56:	4b4b      	ldr	r3, [pc, #300]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ee      	beq.n	8004a40 <HAL_RCC_OscConfig+0x368>
 8004a62:	e014      	b.n	8004a8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fe f826 	bl	8002ab4 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6c:	f7fe f822 	bl	8002ab4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e0c1      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a82:	4b40      	ldr	r3, [pc, #256]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ee      	bne.n	8004a6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a94:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	4a3a      	ldr	r2, [pc, #232]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80ad 	beq.w	8004c04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aaa:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d060      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d145      	bne.n	8004b4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b33      	ldr	r3, [pc, #204]	; (8004b8c <HAL_RCC_OscConfig+0x4b4>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fff6 	bl	8002ab4 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fd fff2 	bl	8002ab4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e093      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	019b      	lsls	r3, r3, #6
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	061b      	lsls	r3, r3, #24
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	491b      	ldr	r1, [pc, #108]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x4b4>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd ffc7 	bl	8002ab4 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2a:	f7fd ffc3 	bl	8002ab4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e064      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3c:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x452>
 8004b48:	e05c      	b.n	8004c04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <HAL_RCC_OscConfig+0x4b4>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fd ffb0 	bl	8002ab4 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b58:	f7fd ffac 	bl	8002ab4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e04d      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x480>
 8004b76:	e045      	b.n	8004c04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e040      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b90:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <HAL_RCC_OscConfig+0x538>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d030      	beq.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d129      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d122      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d119      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d10f      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800

08004c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e041      	b.n	8004caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fd fd7e 	bl	800273c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f000 ff4a 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e04e      	b.n	8004d6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a23      	ldr	r2, [pc, #140]	; (8004d78 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d022      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x80>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf6:	d01d      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x80>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x80>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x80>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x80>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x80>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x80>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d111      	bne.n	8004d58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d010      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d56:	e007      	b.n	8004d68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	40010400 	.word	0x40010400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40001800 	.word	0x40001800

08004d94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a1a      	ldr	r2, [r3, #32]
 8004db2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10f      	bne.n	8004ddc <HAL_TIM_Base_Stop_IT+0x48>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6a1a      	ldr	r2, [r3, #32]
 8004dc2:	f240 4344 	movw	r3, #1092	; 0x444
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d107      	bne.n	8004ddc <HAL_TIM_Base_Stop_IT+0x48>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e041      	b.n	8004e88 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7fd fc3b 	bl	8002694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f000 fe5b 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d109      	bne.n	8004ebc <HAL_TIM_PWM_Start_DMA+0x2c>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	e022      	b.n	8004f02 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d109      	bne.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0x46>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	e015      	b.n	8004f02 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d109      	bne.n	8004ef0 <HAL_TIM_PWM_Start_DMA+0x60>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e008      	b.n	8004f02 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
 8004f08:	e171      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d109      	bne.n	8004f24 <HAL_TIM_PWM_Start_DMA+0x94>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e022      	b.n	8004f6a <HAL_TIM_PWM_Start_DMA+0xda>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d109      	bne.n	8004f3e <HAL_TIM_PWM_Start_DMA+0xae>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	bf0c      	ite	eq
 8004f36:	2301      	moveq	r3, #1
 8004f38:	2300      	movne	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	e015      	b.n	8004f6a <HAL_TIM_PWM_Start_DMA+0xda>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d109      	bne.n	8004f58 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	e008      	b.n	8004f6a <HAL_TIM_PWM_Start_DMA+0xda>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	bf0c      	ite	eq
 8004f64:	2301      	moveq	r3, #1
 8004f66:	2300      	movne	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d024      	beq.n	8004fb8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Start_DMA+0xee>
 8004f74:	887b      	ldrh	r3, [r7, #2]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e137      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f8c:	e016      	b.n	8004fbc <HAL_TIM_PWM_Start_DMA+0x12c>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9c:	e00e      	b.n	8004fbc <HAL_TIM_PWM_Start_DMA+0x12c>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start_DMA+0x11e>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	e006      	b.n	8004fbc <HAL_TIM_PWM_Start_DMA+0x12c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb6:	e001      	b.n	8004fbc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e118      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	f200 80ae 	bhi.w	8005120 <HAL_TIM_PWM_Start_DMA+0x290>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005121 	.word	0x08005121
 8004fd4:	08005121 	.word	0x08005121
 8004fd8:	08005121 	.word	0x08005121
 8004fdc:	08005049 	.word	0x08005049
 8004fe0:	08005121 	.word	0x08005121
 8004fe4:	08005121 	.word	0x08005121
 8004fe8:	08005121 	.word	0x08005121
 8004fec:	08005091 	.word	0x08005091
 8004ff0:	08005121 	.word	0x08005121
 8004ff4:	08005121 	.word	0x08005121
 8004ff8:	08005121 	.word	0x08005121
 8004ffc:	080050d9 	.word	0x080050d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	4a7c      	ldr	r2, [pc, #496]	; (80051f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005006:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	4a7b      	ldr	r2, [pc, #492]	; (80051fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800500e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	4a7a      	ldr	r2, [pc, #488]	; (8005200 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005016:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3334      	adds	r3, #52	; 0x34
 8005024:	461a      	mov	r2, r3
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	f7fd ff34 	bl	8002e94 <HAL_DMA_Start_IT>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0db      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005044:	60da      	str	r2, [r3, #12]
      break;
 8005046:	e06e      	b.n	8005126 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	4a6a      	ldr	r2, [pc, #424]	; (80051f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800504e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	4a69      	ldr	r2, [pc, #420]	; (80051fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005056:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	4a68      	ldr	r2, [pc, #416]	; (8005200 <HAL_TIM_PWM_Start_DMA+0x370>)
 800505e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3338      	adds	r3, #56	; 0x38
 800506c:	461a      	mov	r2, r3
 800506e:	887b      	ldrh	r3, [r7, #2]
 8005070:	f7fd ff10 	bl	8002e94 <HAL_DMA_Start_IT>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e0b7      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800508c:	60da      	str	r2, [r3, #12]
      break;
 800508e:	e04a      	b.n	8005126 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	4a58      	ldr	r2, [pc, #352]	; (80051f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005096:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	4a57      	ldr	r2, [pc, #348]	; (80051fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800509e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a56      	ldr	r2, [pc, #344]	; (8005200 <HAL_TIM_PWM_Start_DMA+0x370>)
 80050a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	333c      	adds	r3, #60	; 0x3c
 80050b4:	461a      	mov	r2, r3
 80050b6:	887b      	ldrh	r3, [r7, #2]
 80050b8:	f7fd feec 	bl	8002e94 <HAL_DMA_Start_IT>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e093      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d4:	60da      	str	r2, [r3, #12]
      break;
 80050d6:	e026      	b.n	8005126 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	4a46      	ldr	r2, [pc, #280]	; (80051f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80050de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	4a45      	ldr	r2, [pc, #276]	; (80051fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	4a44      	ldr	r2, [pc, #272]	; (8005200 <HAL_TIM_PWM_Start_DMA+0x370>)
 80050ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3340      	adds	r3, #64	; 0x40
 80050fc:	461a      	mov	r2, r3
 80050fe:	887b      	ldrh	r3, [r7, #2]
 8005100:	f7fd fec8 	bl	8002e94 <HAL_DMA_Start_IT>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06f      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800511c:	60da      	str	r2, [r3, #12]
      break;
 800511e:	e002      	b.n	8005126 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	75fb      	strb	r3, [r7, #23]
      break;
 8005124:	bf00      	nop
  }

  if (status == HAL_OK)
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d15f      	bne.n	80051ec <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2201      	movs	r2, #1
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 ffc3 	bl	80060c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a31      	ldr	r2, [pc, #196]	; (8005204 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIM_PWM_Start_DMA+0x2be>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <HAL_TIM_PWM_Start_DMA+0x378>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005166:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a25      	ldr	r2, [pc, #148]	; (8005204 <HAL_TIM_PWM_Start_DMA+0x374>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d022      	beq.n	80051b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517a:	d01d      	beq.n	80051b8 <HAL_TIM_PWM_Start_DMA+0x328>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d018      	beq.n	80051b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a21      	ldr	r2, [pc, #132]	; (8005210 <HAL_TIM_PWM_Start_DMA+0x380>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d013      	beq.n	80051b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00e      	beq.n	80051b8 <HAL_TIM_PWM_Start_DMA+0x328>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1a      	ldr	r2, [pc, #104]	; (8005208 <HAL_TIM_PWM_Start_DMA+0x378>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_TIM_PWM_Start_DMA+0x328>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <HAL_TIM_PWM_Start_DMA+0x388>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_TIM_PWM_Start_DMA+0x328>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	; (800521c <HAL_TIM_PWM_Start_DMA+0x38c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d111      	bne.n	80051dc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d010      	beq.n	80051ec <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	e007      	b.n	80051ec <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	080059dd 	.word	0x080059dd
 80051fc:	08005a85 	.word	0x08005a85
 8005200:	0800594b 	.word	0x0800594b
 8005204:	40010000 	.word	0x40010000
 8005208:	40010400 	.word	0x40010400
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40014000 	.word	0x40014000
 800521c:	40001800 	.word	0x40001800

08005220 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b0c      	cmp	r3, #12
 8005232:	d855      	bhi.n	80052e0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005271 	.word	0x08005271
 8005240:	080052e1 	.word	0x080052e1
 8005244:	080052e1 	.word	0x080052e1
 8005248:	080052e1 	.word	0x080052e1
 800524c:	0800528d 	.word	0x0800528d
 8005250:	080052e1 	.word	0x080052e1
 8005254:	080052e1 	.word	0x080052e1
 8005258:	080052e1 	.word	0x080052e1
 800525c:	080052a9 	.word	0x080052a9
 8005260:	080052e1 	.word	0x080052e1
 8005264:	080052e1 	.word	0x080052e1
 8005268:	080052e1 	.word	0x080052e1
 800526c:	080052c5 	.word	0x080052c5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800527e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	4618      	mov	r0, r3
 8005286:	f7fd fe5d 	bl	8002f44 <HAL_DMA_Abort_IT>
      break;
 800528a:	e02c      	b.n	80052e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fd fe4f 	bl	8002f44 <HAL_DMA_Abort_IT>
      break;
 80052a6:	e01e      	b.n	80052e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fd fe41 	bl	8002f44 <HAL_DMA_Abort_IT>
      break;
 80052c2:	e010      	b.n	80052e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fd fe33 	bl	8002f44 <HAL_DMA_Abort_IT>
      break;
 80052de:	e002      	b.n	80052e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      break;
 80052e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d161      	bne.n	80053b0 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2200      	movs	r2, #0
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fee3 	bl	80060c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIM_PWM_Stop_DMA+0xee>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d017      	beq.n	8005348 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10f      	bne.n	8005348 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	f240 4344 	movw	r3, #1092	; 0x444
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d107      	bne.n	8005348 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005346:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a1a      	ldr	r2, [r3, #32]
 800534e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10f      	bne.n	8005378 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a1a      	ldr	r2, [r3, #32]
 800535e:	f240 4344 	movw	r3, #1092	; 0x444
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d107      	bne.n	8005378 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d104      	bne.n	8005388 <HAL_TIM_PWM_Stop_DMA+0x168>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005386:	e013      	b.n	80053b0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d104      	bne.n	8005398 <HAL_TIM_PWM_Stop_DMA+0x178>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005396:	e00b      	b.n	80053b0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b08      	cmp	r3, #8
 800539c:	d104      	bne.n	80053a8 <HAL_TIM_PWM_Stop_DMA+0x188>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a6:	e003      	b.n	80053b0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010400 	.word	0x40010400

080053c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d122      	bne.n	8005420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0202 	mvn.w	r2, #2
 80053f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa77 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa69 	bl	80058e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fc f84f 	bl	80014b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b04      	cmp	r3, #4
 800542c:	d122      	bne.n	8005474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b04      	cmp	r3, #4
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0204 	mvn.w	r2, #4
 8005444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa4d 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa3f 	bl	80058e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fc f825 	bl	80014b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b08      	cmp	r3, #8
 8005480:	d122      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b08      	cmp	r3, #8
 800548e:	d11b      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0208 	mvn.w	r2, #8
 8005498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2204      	movs	r2, #4
 800549e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa23 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa15 	bl	80058e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7fb fffb 	bl	80014b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0210 	mvn.w	r2, #16
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2208      	movs	r2, #8
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f9f9 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9eb 	bl	80058e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fb ffd1 	bl	80014b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b01      	cmp	r3, #1
 8005528:	d10e      	bne.n	8005548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d107      	bne.n	8005548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0201 	mvn.w	r2, #1
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc fcb6 	bl	8001eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fea4 	bl	80062bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9c1 	bl	8005922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d10e      	bne.n	80055cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d107      	bne.n	80055cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0220 	mvn.w	r2, #32
 80055c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fe6e 	bl	80062a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e0ae      	b.n	8005750 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	f200 809f 	bhi.w	8005740 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005602:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	0800563d 	.word	0x0800563d
 800560c:	08005741 	.word	0x08005741
 8005610:	08005741 	.word	0x08005741
 8005614:	08005741 	.word	0x08005741
 8005618:	0800567d 	.word	0x0800567d
 800561c:	08005741 	.word	0x08005741
 8005620:	08005741 	.word	0x08005741
 8005624:	08005741 	.word	0x08005741
 8005628:	080056bf 	.word	0x080056bf
 800562c:	08005741 	.word	0x08005741
 8005630:	08005741 	.word	0x08005741
 8005634:	08005741 	.word	0x08005741
 8005638:	080056ff 	.word	0x080056ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 faf2 	bl	8005c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0208 	orr.w	r2, r2, #8
 8005656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0204 	bic.w	r2, r2, #4
 8005666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6999      	ldr	r1, [r3, #24]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	619a      	str	r2, [r3, #24]
      break;
 800567a:	e064      	b.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb42 	bl	8005d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6999      	ldr	r1, [r3, #24]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	021a      	lsls	r2, r3, #8
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	619a      	str	r2, [r3, #24]
      break;
 80056bc:	e043      	b.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fb97 	bl	8005df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0208 	orr.w	r2, r2, #8
 80056d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0204 	bic.w	r2, r2, #4
 80056e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69d9      	ldr	r1, [r3, #28]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	61da      	str	r2, [r3, #28]
      break;
 80056fc:	e023      	b.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fbeb 	bl	8005ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69d9      	ldr	r1, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	021a      	lsls	r2, r3, #8
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	61da      	str	r2, [r3, #28]
      break;
 800573e:	e002      	b.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	75fb      	strb	r3, [r7, #23]
      break;
 8005744:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_TIM_ConfigClockSource+0x1c>
 8005770:	2302      	movs	r3, #2
 8005772:	e0b4      	b.n	80058de <HAL_TIM_ConfigClockSource+0x186>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800579a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ac:	d03e      	beq.n	800582c <HAL_TIM_ConfigClockSource+0xd4>
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b2:	f200 8087 	bhi.w	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	f000 8086 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x172>
 80057be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c2:	d87f      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b70      	cmp	r3, #112	; 0x70
 80057c6:	d01a      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0xa6>
 80057c8:	2b70      	cmp	r3, #112	; 0x70
 80057ca:	d87b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b60      	cmp	r3, #96	; 0x60
 80057ce:	d050      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x11a>
 80057d0:	2b60      	cmp	r3, #96	; 0x60
 80057d2:	d877      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b50      	cmp	r3, #80	; 0x50
 80057d6:	d03c      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xfa>
 80057d8:	2b50      	cmp	r3, #80	; 0x50
 80057da:	d873      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d058      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x13a>
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d86f      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b30      	cmp	r3, #48	; 0x30
 80057e6:	d064      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	d86b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d060      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15a>
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d867      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d05c      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15a>
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d05a      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	e062      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6899      	ldr	r1, [r3, #8]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f000 fc37 	bl	8006080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	609a      	str	r2, [r3, #8]
      break;
 800582a:	e04f      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6899      	ldr	r1, [r3, #8]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f000 fc20 	bl	8006080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800584e:	609a      	str	r2, [r3, #8]
      break;
 8005850:	e03c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	461a      	mov	r2, r3
 8005860:	f000 fb94 	bl	8005f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2150      	movs	r1, #80	; 0x50
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fbed 	bl	800604a <TIM_ITRx_SetConfig>
      break;
 8005870:	e02c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	461a      	mov	r2, r3
 8005880:	f000 fbb3 	bl	8005fea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2160      	movs	r1, #96	; 0x60
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fbdd 	bl	800604a <TIM_ITRx_SetConfig>
      break;
 8005890:	e01c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 fb74 	bl	8005f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2140      	movs	r1, #64	; 0x40
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fbcd 	bl	800604a <TIM_ITRx_SetConfig>
      break;
 80058b0:	e00c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f000 fbc4 	bl	800604a <TIM_ITRx_SetConfig>
      break;
 80058c2:	e003      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
      break;
 80058c8:	e000      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	d107      	bne.n	8005972 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005970:	e02a      	b.n	80059c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d107      	bne.n	800598c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2202      	movs	r2, #2
 8005980:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800598a:	e01d      	b.n	80059c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d107      	bne.n	80059a6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2204      	movs	r2, #4
 800599a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a4:	e010      	b.n	80059c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d107      	bne.n	80059c0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2208      	movs	r2, #8
 80059b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059be:	e003      	b.n	80059c8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ffb4 	bl	8005936 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
}
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d10b      	bne.n	8005a0c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d136      	bne.n	8005a70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a0a:	e031      	b.n	8005a70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d10b      	bne.n	8005a2e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d125      	bne.n	8005a70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a2c:	e020      	b.n	8005a70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d10b      	bne.n	8005a50 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d114      	bne.n	8005a70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4e:	e00f      	b.n	8005a70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d10a      	bne.n	8005a70 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d103      	bne.n	8005a70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7fb fd21 	bl	80014b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	771a      	strb	r2, [r3, #28]
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d103      	bne.n	8005aa4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	771a      	strb	r2, [r3, #28]
 8005aa2:	e019      	b.n	8005ad8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d103      	bne.n	8005ab6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	771a      	strb	r2, [r3, #28]
 8005ab4:	e010      	b.n	8005ad8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d103      	bne.n	8005ac8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	771a      	strb	r2, [r3, #28]
 8005ac6:	e007      	b.n	8005ad8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d102      	bne.n	8005ad8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff ff18 	bl	800590e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a40      	ldr	r2, [pc, #256]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d00f      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3d      	ldr	r2, [pc, #244]	; (8005c04 <TIM_Base_SetConfig+0x118>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3c      	ldr	r2, [pc, #240]	; (8005c08 <TIM_Base_SetConfig+0x11c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3b      	ldr	r2, [pc, #236]	; (8005c0c <TIM_Base_SetConfig+0x120>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3a      	ldr	r2, [pc, #232]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d108      	bne.n	8005b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2f      	ldr	r2, [pc, #188]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d02b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d027      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2c      	ldr	r2, [pc, #176]	; (8005c04 <TIM_Base_SetConfig+0x118>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d023      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2b      	ldr	r2, [pc, #172]	; (8005c08 <TIM_Base_SetConfig+0x11c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01f      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2a      	ldr	r2, [pc, #168]	; (8005c0c <TIM_Base_SetConfig+0x120>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a29      	ldr	r2, [pc, #164]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d017      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <TIM_Base_SetConfig+0x128>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a27      	ldr	r2, [pc, #156]	; (8005c18 <TIM_Base_SetConfig+0x12c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00f      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a26      	ldr	r2, [pc, #152]	; (8005c1c <TIM_Base_SetConfig+0x130>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a25      	ldr	r2, [pc, #148]	; (8005c20 <TIM_Base_SetConfig+0x134>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a24      	ldr	r2, [pc, #144]	; (8005c24 <TIM_Base_SetConfig+0x138>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a23      	ldr	r2, [pc, #140]	; (8005c28 <TIM_Base_SetConfig+0x13c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d108      	bne.n	8005bb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_Base_SetConfig+0xf8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d103      	bne.n	8005bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	615a      	str	r2, [r3, #20]
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40010000 	.word	0x40010000
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	40000c00 	.word	0x40000c00
 8005c10:	40010400 	.word	0x40010400
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800
 8005c20:	40001800 	.word	0x40001800
 8005c24:	40001c00 	.word	0x40001c00
 8005c28:	40002000 	.word	0x40002000

08005c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0303 	bic.w	r3, r3, #3
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 0302 	bic.w	r3, r3, #2
 8005c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <TIM_OC1_SetConfig+0xd8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC1_SetConfig+0x64>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a1f      	ldr	r2, [pc, #124]	; (8005d08 <TIM_OC1_SetConfig+0xdc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10c      	bne.n	8005caa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0308 	bic.w	r3, r3, #8
 8005c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 0304 	bic.w	r3, r3, #4
 8005ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <TIM_OC1_SetConfig+0xd8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d003      	beq.n	8005cba <TIM_OC1_SetConfig+0x8e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <TIM_OC1_SetConfig+0xdc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d111      	bne.n	8005cde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	621a      	str	r2, [r3, #32]
}
 8005cf8:	bf00      	nop
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	40010000 	.word	0x40010000
 8005d08:	40010400 	.word	0x40010400

08005d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0210 	bic.w	r2, r3, #16
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0320 	bic.w	r3, r3, #32
 8005d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a22      	ldr	r2, [pc, #136]	; (8005df0 <TIM_OC2_SetConfig+0xe4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_OC2_SetConfig+0x68>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a21      	ldr	r2, [pc, #132]	; (8005df4 <TIM_OC2_SetConfig+0xe8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10d      	bne.n	8005d90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <TIM_OC2_SetConfig+0xe4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC2_SetConfig+0x94>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a16      	ldr	r2, [pc, #88]	; (8005df4 <TIM_OC2_SetConfig+0xe8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d113      	bne.n	8005dc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400

08005df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0303 	bic.w	r3, r3, #3
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <TIM_OC3_SetConfig+0xe0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_OC3_SetConfig+0x66>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a20      	ldr	r2, [pc, #128]	; (8005edc <TIM_OC3_SetConfig+0xe4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10d      	bne.n	8005e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <TIM_OC3_SetConfig+0xe0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_OC3_SetConfig+0x92>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <TIM_OC3_SetConfig+0xe4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d113      	bne.n	8005eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	621a      	str	r2, [r3, #32]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40010400 	.word	0x40010400

08005ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <TIM_OC4_SetConfig+0xa4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <TIM_OC4_SetConfig+0x68>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <TIM_OC4_SetConfig+0xa8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d109      	bne.n	8005f5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	019b      	lsls	r3, r3, #6
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40010400 	.word	0x40010400

08005f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f023 0201 	bic.w	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 030a 	bic.w	r3, r3, #10
 8005fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b087      	sub	sp, #28
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f023 0210 	bic.w	r2, r3, #16
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	031b      	lsls	r3, r3, #12
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	f043 0307 	orr.w	r3, r3, #7
 800606c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800609a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	021a      	lsls	r2, r3, #8
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	609a      	str	r2, [r3, #8]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	2201      	movs	r2, #1
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a1a      	ldr	r2, [r3, #32]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	401a      	ands	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1a      	ldr	r2, [r3, #32]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	431a      	orrs	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006120:	2302      	movs	r3, #2
 8006122:	e05a      	b.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006170:	d01d      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1d      	ldr	r2, [pc, #116]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a17      	ldr	r2, [pc, #92]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a15      	ldr	r2, [pc, #84]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d10c      	bne.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40010000 	.word	0x40010000
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40010400 	.word	0x40010400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40001800 	.word	0x40001800

08006204 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800621c:	2302      	movs	r3, #2
 800621e:	e03d      	b.n	800629c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e03f      	b.n	8006362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fc fb04 	bl	8002904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	; 0x24
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f9cb 	bl	80066b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695a      	ldr	r2, [r3, #20]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b08a      	sub	sp, #40	; 0x28
 800636e:	af02      	add	r7, sp, #8
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b20      	cmp	r3, #32
 8006388:	d17c      	bne.n	8006484 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_UART_Transmit+0x2c>
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e075      	b.n	8006486 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_UART_Transmit+0x3e>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e06e      	b.n	8006486 <HAL_UART_Transmit+0x11c>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2221      	movs	r2, #33	; 0x21
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063be:	f7fc fb79 	bl	8002ab4 <HAL_GetTick>
 80063c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88fa      	ldrh	r2, [r7, #6]
 80063c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	88fa      	ldrh	r2, [r7, #6]
 80063ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d8:	d108      	bne.n	80063ec <HAL_UART_Transmit+0x82>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	e003      	b.n	80063f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063fc:	e02a      	b.n	8006454 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2200      	movs	r2, #0
 8006406:	2180      	movs	r1, #128	; 0x80
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f8e2 	bl	80065d2 <UART_WaitOnFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e036      	b.n	8006486 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800642c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	3302      	adds	r3, #2
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	e007      	b.n	8006446 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	781a      	ldrb	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	3301      	adds	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1cf      	bne.n	80063fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	2140      	movs	r1, #64	; 0x40
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f8b2 	bl	80065d2 <UART_WaitOnFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e006      	b.n	8006486 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	e000      	b.n	8006486 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006484:	2302      	movs	r3, #2
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b08a      	sub	sp, #40	; 0x28
 8006492:	af02      	add	r7, sp, #8
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	603b      	str	r3, [r7, #0]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	f040 808c 	bne.w	80065c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_UART_Receive+0x2e>
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e084      	b.n	80065ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_UART_Receive+0x40>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e07d      	b.n	80065ca <HAL_UART_Receive+0x13c>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2222      	movs	r2, #34	; 0x22
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ea:	f7fc fae3 	bl	8002ab4 <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	88fa      	ldrh	r2, [r7, #6]
 80064fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006504:	d108      	bne.n	8006518 <HAL_UART_Receive+0x8a>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	e003      	b.n	8006520 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800651c:	2300      	movs	r3, #0
 800651e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006528:	e043      	b.n	80065b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	2120      	movs	r1, #32
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f84c 	bl	80065d2 <UART_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e042      	b.n	80065ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10c      	bne.n	8006564 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	b29a      	uxth	r2, r3
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	3302      	adds	r3, #2
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	e01f      	b.n	80065a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656c:	d007      	beq.n	800657e <HAL_UART_Receive+0xf0>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <HAL_UART_Receive+0xfe>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e008      	b.n	800659e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006598:	b2da      	uxtb	r2, r3
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	3301      	adds	r3, #1
 80065a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1b6      	bne.n	800652a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e000      	b.n	80065ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
  }
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b090      	sub	sp, #64	; 0x40
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	4613      	mov	r3, r2
 80065e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e2:	e050      	b.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d04c      	beq.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <UART_WaitOnFlagUntilTimeout+0x30>
 80065f2:	f7fc fa5f 	bl	8002ab4 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065fe:	429a      	cmp	r2, r3
 8006600:	d241      	bcs.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006622:	637a      	str	r2, [r7, #52]	; 0x34
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e5      	bne.n	8006602 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	613b      	str	r3, [r7, #16]
   return(result);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006656:	623a      	str	r2, [r7, #32]
 8006658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	69f9      	ldr	r1, [r7, #28]
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	61bb      	str	r3, [r7, #24]
   return(result);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e00f      	b.n	80066a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4013      	ands	r3, r2
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	bf0c      	ite	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	2300      	movne	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d09f      	beq.n	80065e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3740      	adds	r7, #64	; 0x40
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b4:	b0c0      	sub	sp, #256	; 0x100
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	68d9      	ldr	r1, [r3, #12]
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	ea40 0301 	orr.w	r3, r0, r1
 80066d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006708:	f021 010c 	bic.w	r1, r1, #12
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006716:	430b      	orrs	r3, r1
 8006718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672a:	6999      	ldr	r1, [r3, #24]
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	ea40 0301 	orr.w	r3, r0, r1
 8006736:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b8f      	ldr	r3, [pc, #572]	; (800697c <UART_SetConfig+0x2cc>)
 8006740:	429a      	cmp	r2, r3
 8006742:	d005      	beq.n	8006750 <UART_SetConfig+0xa0>
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b8d      	ldr	r3, [pc, #564]	; (8006980 <UART_SetConfig+0x2d0>)
 800674c:	429a      	cmp	r2, r3
 800674e:	d104      	bne.n	800675a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006750:	f7fd fe04 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8006754:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006758:	e003      	b.n	8006762 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800675a:	f7fd fdeb 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 800675e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676c:	f040 810c 	bne.w	8006988 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006774:	2200      	movs	r2, #0
 8006776:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800677a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800677e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006782:	4622      	mov	r2, r4
 8006784:	462b      	mov	r3, r5
 8006786:	1891      	adds	r1, r2, r2
 8006788:	65b9      	str	r1, [r7, #88]	; 0x58
 800678a:	415b      	adcs	r3, r3
 800678c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800678e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006792:	4621      	mov	r1, r4
 8006794:	eb12 0801 	adds.w	r8, r2, r1
 8006798:	4629      	mov	r1, r5
 800679a:	eb43 0901 	adc.w	r9, r3, r1
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067b2:	4690      	mov	r8, r2
 80067b4:	4699      	mov	r9, r3
 80067b6:	4623      	mov	r3, r4
 80067b8:	eb18 0303 	adds.w	r3, r8, r3
 80067bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067c0:	462b      	mov	r3, r5
 80067c2:	eb49 0303 	adc.w	r3, r9, r3
 80067c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067de:	460b      	mov	r3, r1
 80067e0:	18db      	adds	r3, r3, r3
 80067e2:	653b      	str	r3, [r7, #80]	; 0x50
 80067e4:	4613      	mov	r3, r2
 80067e6:	eb42 0303 	adc.w	r3, r2, r3
 80067ea:	657b      	str	r3, [r7, #84]	; 0x54
 80067ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067f4:	f7fa fa4a 	bl	8000c8c <__aeabi_uldivmod>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4b61      	ldr	r3, [pc, #388]	; (8006984 <UART_SetConfig+0x2d4>)
 80067fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	011c      	lsls	r4, r3, #4
 8006806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680a:	2200      	movs	r2, #0
 800680c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006810:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006814:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006818:	4642      	mov	r2, r8
 800681a:	464b      	mov	r3, r9
 800681c:	1891      	adds	r1, r2, r2
 800681e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006820:	415b      	adcs	r3, r3
 8006822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006828:	4641      	mov	r1, r8
 800682a:	eb12 0a01 	adds.w	sl, r2, r1
 800682e:	4649      	mov	r1, r9
 8006830:	eb43 0b01 	adc.w	fp, r3, r1
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006840:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006848:	4692      	mov	sl, r2
 800684a:	469b      	mov	fp, r3
 800684c:	4643      	mov	r3, r8
 800684e:	eb1a 0303 	adds.w	r3, sl, r3
 8006852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006856:	464b      	mov	r3, r9
 8006858:	eb4b 0303 	adc.w	r3, fp, r3
 800685c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800686c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006870:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006874:	460b      	mov	r3, r1
 8006876:	18db      	adds	r3, r3, r3
 8006878:	643b      	str	r3, [r7, #64]	; 0x40
 800687a:	4613      	mov	r3, r2
 800687c:	eb42 0303 	adc.w	r3, r2, r3
 8006880:	647b      	str	r3, [r7, #68]	; 0x44
 8006882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006886:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800688a:	f7fa f9ff 	bl	8000c8c <__aeabi_uldivmod>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4611      	mov	r1, r2
 8006894:	4b3b      	ldr	r3, [pc, #236]	; (8006984 <UART_SetConfig+0x2d4>)
 8006896:	fba3 2301 	umull	r2, r3, r3, r1
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	2264      	movs	r2, #100	; 0x64
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	1acb      	subs	r3, r1, r3
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068aa:	4b36      	ldr	r3, [pc, #216]	; (8006984 <UART_SetConfig+0x2d4>)
 80068ac:	fba3 2302 	umull	r2, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068b8:	441c      	add	r4, r3
 80068ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068cc:	4642      	mov	r2, r8
 80068ce:	464b      	mov	r3, r9
 80068d0:	1891      	adds	r1, r2, r2
 80068d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80068d4:	415b      	adcs	r3, r3
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068dc:	4641      	mov	r1, r8
 80068de:	1851      	adds	r1, r2, r1
 80068e0:	6339      	str	r1, [r7, #48]	; 0x30
 80068e2:	4649      	mov	r1, r9
 80068e4:	414b      	adcs	r3, r1
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068f4:	4659      	mov	r1, fp
 80068f6:	00cb      	lsls	r3, r1, #3
 80068f8:	4651      	mov	r1, sl
 80068fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068fe:	4651      	mov	r1, sl
 8006900:	00ca      	lsls	r2, r1, #3
 8006902:	4610      	mov	r0, r2
 8006904:	4619      	mov	r1, r3
 8006906:	4603      	mov	r3, r0
 8006908:	4642      	mov	r2, r8
 800690a:	189b      	adds	r3, r3, r2
 800690c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006910:	464b      	mov	r3, r9
 8006912:	460a      	mov	r2, r1
 8006914:	eb42 0303 	adc.w	r3, r2, r3
 8006918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006928:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800692c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006930:	460b      	mov	r3, r1
 8006932:	18db      	adds	r3, r3, r3
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
 8006936:	4613      	mov	r3, r2
 8006938:	eb42 0303 	adc.w	r3, r2, r3
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800693e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006942:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006946:	f7fa f9a1 	bl	8000c8c <__aeabi_uldivmod>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <UART_SetConfig+0x2d4>)
 8006950:	fba3 1302 	umull	r1, r3, r3, r2
 8006954:	095b      	lsrs	r3, r3, #5
 8006956:	2164      	movs	r1, #100	; 0x64
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	3332      	adds	r3, #50	; 0x32
 8006962:	4a08      	ldr	r2, [pc, #32]	; (8006984 <UART_SetConfig+0x2d4>)
 8006964:	fba2 2303 	umull	r2, r3, r2, r3
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	f003 0207 	and.w	r2, r3, #7
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4422      	add	r2, r4
 8006976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006978:	e106      	b.n	8006b88 <UART_SetConfig+0x4d8>
 800697a:	bf00      	nop
 800697c:	40011000 	.word	0x40011000
 8006980:	40011400 	.word	0x40011400
 8006984:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800698c:	2200      	movs	r2, #0
 800698e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006992:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006996:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800699a:	4642      	mov	r2, r8
 800699c:	464b      	mov	r3, r9
 800699e:	1891      	adds	r1, r2, r2
 80069a0:	6239      	str	r1, [r7, #32]
 80069a2:	415b      	adcs	r3, r3
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
 80069a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069aa:	4641      	mov	r1, r8
 80069ac:	1854      	adds	r4, r2, r1
 80069ae:	4649      	mov	r1, r9
 80069b0:	eb43 0501 	adc.w	r5, r3, r1
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	00eb      	lsls	r3, r5, #3
 80069be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069c2:	00e2      	lsls	r2, r4, #3
 80069c4:	4614      	mov	r4, r2
 80069c6:	461d      	mov	r5, r3
 80069c8:	4643      	mov	r3, r8
 80069ca:	18e3      	adds	r3, r4, r3
 80069cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069d0:	464b      	mov	r3, r9
 80069d2:	eb45 0303 	adc.w	r3, r5, r3
 80069d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069f6:	4629      	mov	r1, r5
 80069f8:	008b      	lsls	r3, r1, #2
 80069fa:	4621      	mov	r1, r4
 80069fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a00:	4621      	mov	r1, r4
 8006a02:	008a      	lsls	r2, r1, #2
 8006a04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a08:	f7fa f940 	bl	8000c8c <__aeabi_uldivmod>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4b60      	ldr	r3, [pc, #384]	; (8006b94 <UART_SetConfig+0x4e4>)
 8006a12:	fba3 2302 	umull	r2, r3, r3, r2
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	011c      	lsls	r4, r3, #4
 8006a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a2c:	4642      	mov	r2, r8
 8006a2e:	464b      	mov	r3, r9
 8006a30:	1891      	adds	r1, r2, r2
 8006a32:	61b9      	str	r1, [r7, #24]
 8006a34:	415b      	adcs	r3, r3
 8006a36:	61fb      	str	r3, [r7, #28]
 8006a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	1851      	adds	r1, r2, r1
 8006a40:	6139      	str	r1, [r7, #16]
 8006a42:	4649      	mov	r1, r9
 8006a44:	414b      	adcs	r3, r1
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a54:	4659      	mov	r1, fp
 8006a56:	00cb      	lsls	r3, r1, #3
 8006a58:	4651      	mov	r1, sl
 8006a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a5e:	4651      	mov	r1, sl
 8006a60:	00ca      	lsls	r2, r1, #3
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	4642      	mov	r2, r8
 8006a6a:	189b      	adds	r3, r3, r2
 8006a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a70:	464b      	mov	r3, r9
 8006a72:	460a      	mov	r2, r1
 8006a74:	eb42 0303 	adc.w	r3, r2, r3
 8006a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a94:	4649      	mov	r1, r9
 8006a96:	008b      	lsls	r3, r1, #2
 8006a98:	4641      	mov	r1, r8
 8006a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a9e:	4641      	mov	r1, r8
 8006aa0:	008a      	lsls	r2, r1, #2
 8006aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006aa6:	f7fa f8f1 	bl	8000c8c <__aeabi_uldivmod>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4b38      	ldr	r3, [pc, #224]	; (8006b94 <UART_SetConfig+0x4e4>)
 8006ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	2264      	movs	r2, #100	; 0x64
 8006aba:	fb02 f303 	mul.w	r3, r2, r3
 8006abe:	1acb      	subs	r3, r1, r3
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	3332      	adds	r3, #50	; 0x32
 8006ac4:	4a33      	ldr	r2, [pc, #204]	; (8006b94 <UART_SetConfig+0x4e4>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ad0:	441c      	add	r4, r3
 8006ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	673b      	str	r3, [r7, #112]	; 0x70
 8006ada:	677a      	str	r2, [r7, #116]	; 0x74
 8006adc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	464b      	mov	r3, r9
 8006ae4:	1891      	adds	r1, r2, r2
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	415b      	adcs	r3, r3
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006af0:	4641      	mov	r1, r8
 8006af2:	1851      	adds	r1, r2, r1
 8006af4:	6039      	str	r1, [r7, #0]
 8006af6:	4649      	mov	r1, r9
 8006af8:	414b      	adcs	r3, r1
 8006afa:	607b      	str	r3, [r7, #4]
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b08:	4659      	mov	r1, fp
 8006b0a:	00cb      	lsls	r3, r1, #3
 8006b0c:	4651      	mov	r1, sl
 8006b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b12:	4651      	mov	r1, sl
 8006b14:	00ca      	lsls	r2, r1, #3
 8006b16:	4610      	mov	r0, r2
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	189b      	adds	r3, r3, r2
 8006b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b22:	464b      	mov	r3, r9
 8006b24:	460a      	mov	r2, r1
 8006b26:	eb42 0303 	adc.w	r3, r2, r3
 8006b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	663b      	str	r3, [r7, #96]	; 0x60
 8006b36:	667a      	str	r2, [r7, #100]	; 0x64
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b44:	4649      	mov	r1, r9
 8006b46:	008b      	lsls	r3, r1, #2
 8006b48:	4641      	mov	r1, r8
 8006b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b4e:	4641      	mov	r1, r8
 8006b50:	008a      	lsls	r2, r1, #2
 8006b52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b56:	f7fa f899 	bl	8000c8c <__aeabi_uldivmod>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <UART_SetConfig+0x4e4>)
 8006b60:	fba3 1302 	umull	r1, r3, r3, r2
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	2164      	movs	r1, #100	; 0x64
 8006b68:	fb01 f303 	mul.w	r3, r1, r3
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	3332      	adds	r3, #50	; 0x32
 8006b72:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <UART_SetConfig+0x4e4>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	f003 020f 	and.w	r2, r3, #15
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4422      	add	r2, r4
 8006b86:	609a      	str	r2, [r3, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b94:	51eb851f 	.word	0x51eb851f

08006b98 <std>:
 8006b98:	2300      	movs	r3, #0
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ba6:	6083      	str	r3, [r0, #8]
 8006ba8:	8181      	strh	r1, [r0, #12]
 8006baa:	6643      	str	r3, [r0, #100]	; 0x64
 8006bac:	81c2      	strh	r2, [r0, #14]
 8006bae:	6183      	str	r3, [r0, #24]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	305c      	adds	r0, #92	; 0x5c
 8006bb6:	f000 f906 	bl	8006dc6 <memset>
 8006bba:	4b0d      	ldr	r3, [pc, #52]	; (8006bf0 <std+0x58>)
 8006bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <std+0x5c>)
 8006bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <std+0x60>)
 8006bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <std+0x64>)
 8006bc8:	6323      	str	r3, [r4, #48]	; 0x30
 8006bca:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <std+0x68>)
 8006bcc:	6224      	str	r4, [r4, #32]
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d006      	beq.n	8006be0 <std+0x48>
 8006bd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006bd6:	4294      	cmp	r4, r2
 8006bd8:	d002      	beq.n	8006be0 <std+0x48>
 8006bda:	33d0      	adds	r3, #208	; 0xd0
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	d105      	bne.n	8006bec <std+0x54>
 8006be0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be8:	f000 b966 	b.w	8006eb8 <__retarget_lock_init_recursive>
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	bf00      	nop
 8006bf0:	08006d41 	.word	0x08006d41
 8006bf4:	08006d63 	.word	0x08006d63
 8006bf8:	08006d9b 	.word	0x08006d9b
 8006bfc:	08006dbf 	.word	0x08006dbf
 8006c00:	20000e50 	.word	0x20000e50

08006c04 <stdio_exit_handler>:
 8006c04:	4a02      	ldr	r2, [pc, #8]	; (8006c10 <stdio_exit_handler+0xc>)
 8006c06:	4903      	ldr	r1, [pc, #12]	; (8006c14 <stdio_exit_handler+0x10>)
 8006c08:	4803      	ldr	r0, [pc, #12]	; (8006c18 <stdio_exit_handler+0x14>)
 8006c0a:	f000 b869 	b.w	8006ce0 <_fwalk_sglue>
 8006c0e:	bf00      	nop
 8006c10:	20000034 	.word	0x20000034
 8006c14:	08007765 	.word	0x08007765
 8006c18:	20000040 	.word	0x20000040

08006c1c <cleanup_stdio>:
 8006c1c:	6841      	ldr	r1, [r0, #4]
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <cleanup_stdio+0x34>)
 8006c20:	4299      	cmp	r1, r3
 8006c22:	b510      	push	{r4, lr}
 8006c24:	4604      	mov	r4, r0
 8006c26:	d001      	beq.n	8006c2c <cleanup_stdio+0x10>
 8006c28:	f000 fd9c 	bl	8007764 <_fflush_r>
 8006c2c:	68a1      	ldr	r1, [r4, #8]
 8006c2e:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <cleanup_stdio+0x38>)
 8006c30:	4299      	cmp	r1, r3
 8006c32:	d002      	beq.n	8006c3a <cleanup_stdio+0x1e>
 8006c34:	4620      	mov	r0, r4
 8006c36:	f000 fd95 	bl	8007764 <_fflush_r>
 8006c3a:	68e1      	ldr	r1, [r4, #12]
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <cleanup_stdio+0x3c>)
 8006c3e:	4299      	cmp	r1, r3
 8006c40:	d004      	beq.n	8006c4c <cleanup_stdio+0x30>
 8006c42:	4620      	mov	r0, r4
 8006c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c48:	f000 bd8c 	b.w	8007764 <_fflush_r>
 8006c4c:	bd10      	pop	{r4, pc}
 8006c4e:	bf00      	nop
 8006c50:	20000e50 	.word	0x20000e50
 8006c54:	20000eb8 	.word	0x20000eb8
 8006c58:	20000f20 	.word	0x20000f20

08006c5c <global_stdio_init.part.0>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <global_stdio_init.part.0+0x30>)
 8006c60:	4c0b      	ldr	r4, [pc, #44]	; (8006c90 <global_stdio_init.part.0+0x34>)
 8006c62:	4a0c      	ldr	r2, [pc, #48]	; (8006c94 <global_stdio_init.part.0+0x38>)
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	4620      	mov	r0, r4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2104      	movs	r1, #4
 8006c6c:	f7ff ff94 	bl	8006b98 <std>
 8006c70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c74:	2201      	movs	r2, #1
 8006c76:	2109      	movs	r1, #9
 8006c78:	f7ff ff8e 	bl	8006b98 <std>
 8006c7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c80:	2202      	movs	r2, #2
 8006c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c86:	2112      	movs	r1, #18
 8006c88:	f7ff bf86 	b.w	8006b98 <std>
 8006c8c:	20000f88 	.word	0x20000f88
 8006c90:	20000e50 	.word	0x20000e50
 8006c94:	08006c05 	.word	0x08006c05

08006c98 <__sfp_lock_acquire>:
 8006c98:	4801      	ldr	r0, [pc, #4]	; (8006ca0 <__sfp_lock_acquire+0x8>)
 8006c9a:	f000 b90e 	b.w	8006eba <__retarget_lock_acquire_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	20000f91 	.word	0x20000f91

08006ca4 <__sfp_lock_release>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	; (8006cac <__sfp_lock_release+0x8>)
 8006ca6:	f000 b909 	b.w	8006ebc <__retarget_lock_release_recursive>
 8006caa:	bf00      	nop
 8006cac:	20000f91 	.word	0x20000f91

08006cb0 <__sinit>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	f7ff fff0 	bl	8006c98 <__sfp_lock_acquire>
 8006cb8:	6a23      	ldr	r3, [r4, #32]
 8006cba:	b11b      	cbz	r3, 8006cc4 <__sinit+0x14>
 8006cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc0:	f7ff bff0 	b.w	8006ca4 <__sfp_lock_release>
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <__sinit+0x28>)
 8006cc6:	6223      	str	r3, [r4, #32]
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <__sinit+0x2c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f5      	bne.n	8006cbc <__sinit+0xc>
 8006cd0:	f7ff ffc4 	bl	8006c5c <global_stdio_init.part.0>
 8006cd4:	e7f2      	b.n	8006cbc <__sinit+0xc>
 8006cd6:	bf00      	nop
 8006cd8:	08006c1d 	.word	0x08006c1d
 8006cdc:	20000f88 	.word	0x20000f88

08006ce0 <_fwalk_sglue>:
 8006ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	4688      	mov	r8, r1
 8006ce8:	4614      	mov	r4, r2
 8006cea:	2600      	movs	r6, #0
 8006cec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf0:	f1b9 0901 	subs.w	r9, r9, #1
 8006cf4:	d505      	bpl.n	8006d02 <_fwalk_sglue+0x22>
 8006cf6:	6824      	ldr	r4, [r4, #0]
 8006cf8:	2c00      	cmp	r4, #0
 8006cfa:	d1f7      	bne.n	8006cec <_fwalk_sglue+0xc>
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d907      	bls.n	8006d18 <_fwalk_sglue+0x38>
 8006d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	d003      	beq.n	8006d18 <_fwalk_sglue+0x38>
 8006d10:	4629      	mov	r1, r5
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c0      	blx	r8
 8006d16:	4306      	orrs	r6, r0
 8006d18:	3568      	adds	r5, #104	; 0x68
 8006d1a:	e7e9      	b.n	8006cf0 <_fwalk_sglue+0x10>

08006d1c <iprintf>:
 8006d1c:	b40f      	push	{r0, r1, r2, r3}
 8006d1e:	b507      	push	{r0, r1, r2, lr}
 8006d20:	4906      	ldr	r1, [pc, #24]	; (8006d3c <iprintf+0x20>)
 8006d22:	ab04      	add	r3, sp, #16
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2a:	6881      	ldr	r1, [r0, #8]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	f000 f9e9 	bl	8007104 <_vfiprintf_r>
 8006d32:	b003      	add	sp, #12
 8006d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d38:	b004      	add	sp, #16
 8006d3a:	4770      	bx	lr
 8006d3c:	2000008c 	.word	0x2000008c

08006d40 <__sread>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	460c      	mov	r4, r1
 8006d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d48:	f000 f868 	bl	8006e1c <_read_r>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	bfab      	itete	ge
 8006d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d52:	89a3      	ldrhlt	r3, [r4, #12]
 8006d54:	181b      	addge	r3, r3, r0
 8006d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d5a:	bfac      	ite	ge
 8006d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d5e:	81a3      	strhlt	r3, [r4, #12]
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <__swrite>:
 8006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	461f      	mov	r7, r3
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	05db      	lsls	r3, r3, #23
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	4616      	mov	r6, r2
 8006d72:	d505      	bpl.n	8006d80 <__swrite+0x1e>
 8006d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d78:	2302      	movs	r3, #2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f000 f83c 	bl	8006df8 <_lseek_r>
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	463b      	mov	r3, r7
 8006d90:	4628      	mov	r0, r5
 8006d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d96:	f000 b853 	b.w	8006e40 <_write_r>

08006d9a <__sseek>:
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da2:	f000 f829 	bl	8006df8 <_lseek_r>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	bf15      	itete	ne
 8006dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006db6:	81a3      	strheq	r3, [r4, #12]
 8006db8:	bf18      	it	ne
 8006dba:	81a3      	strhne	r3, [r4, #12]
 8006dbc:	bd10      	pop	{r4, pc}

08006dbe <__sclose>:
 8006dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc2:	f000 b809 	b.w	8006dd8 <_close_r>

08006dc6 <memset>:
 8006dc6:	4402      	add	r2, r0
 8006dc8:	4603      	mov	r3, r0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d100      	bne.n	8006dd0 <memset+0xa>
 8006dce:	4770      	bx	lr
 8006dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd4:	e7f9      	b.n	8006dca <memset+0x4>
	...

08006dd8 <_close_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d06      	ldr	r5, [pc, #24]	; (8006df4 <_close_r+0x1c>)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4604      	mov	r4, r0
 8006de0:	4608      	mov	r0, r1
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	f7fb fa21 	bl	800222a <_close>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d102      	bne.n	8006df2 <_close_r+0x1a>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	b103      	cbz	r3, 8006df2 <_close_r+0x1a>
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	20000f8c 	.word	0x20000f8c

08006df8 <_lseek_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	; (8006e18 <_lseek_r+0x20>)
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4611      	mov	r1, r2
 8006e02:	2200      	movs	r2, #0
 8006e04:	602a      	str	r2, [r5, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f7fb fa36 	bl	8002278 <_lseek>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_lseek_r+0x1e>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_lseek_r+0x1e>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	20000f8c 	.word	0x20000f8c

08006e1c <_read_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d07      	ldr	r5, [pc, #28]	; (8006e3c <_read_r+0x20>)
 8006e20:	4604      	mov	r4, r0
 8006e22:	4608      	mov	r0, r1
 8006e24:	4611      	mov	r1, r2
 8006e26:	2200      	movs	r2, #0
 8006e28:	602a      	str	r2, [r5, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f7fb f9c4 	bl	80021b8 <_read>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_read_r+0x1e>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_read_r+0x1e>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20000f8c 	.word	0x20000f8c

08006e40 <_write_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d07      	ldr	r5, [pc, #28]	; (8006e60 <_write_r+0x20>)
 8006e44:	4604      	mov	r4, r0
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	602a      	str	r2, [r5, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7fb f9cf 	bl	80021f2 <_write>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_write_r+0x1e>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_write_r+0x1e>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20000f8c 	.word	0x20000f8c

08006e64 <__errno>:
 8006e64:	4b01      	ldr	r3, [pc, #4]	; (8006e6c <__errno+0x8>)
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	2000008c 	.word	0x2000008c

08006e70 <__libc_init_array>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	4d0d      	ldr	r5, [pc, #52]	; (8006ea8 <__libc_init_array+0x38>)
 8006e74:	4c0d      	ldr	r4, [pc, #52]	; (8006eac <__libc_init_array+0x3c>)
 8006e76:	1b64      	subs	r4, r4, r5
 8006e78:	10a4      	asrs	r4, r4, #2
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	42a6      	cmp	r6, r4
 8006e7e:	d109      	bne.n	8006e94 <__libc_init_array+0x24>
 8006e80:	4d0b      	ldr	r5, [pc, #44]	; (8006eb0 <__libc_init_array+0x40>)
 8006e82:	4c0c      	ldr	r4, [pc, #48]	; (8006eb4 <__libc_init_array+0x44>)
 8006e84:	f001 fe60 	bl	8008b48 <_init>
 8006e88:	1b64      	subs	r4, r4, r5
 8006e8a:	10a4      	asrs	r4, r4, #2
 8006e8c:	2600      	movs	r6, #0
 8006e8e:	42a6      	cmp	r6, r4
 8006e90:	d105      	bne.n	8006e9e <__libc_init_array+0x2e>
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e98:	4798      	blx	r3
 8006e9a:	3601      	adds	r6, #1
 8006e9c:	e7ee      	b.n	8006e7c <__libc_init_array+0xc>
 8006e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea2:	4798      	blx	r3
 8006ea4:	3601      	adds	r6, #1
 8006ea6:	e7f2      	b.n	8006e8e <__libc_init_array+0x1e>
 8006ea8:	08008ee0 	.word	0x08008ee0
 8006eac:	08008ee0 	.word	0x08008ee0
 8006eb0:	08008ee0 	.word	0x08008ee0
 8006eb4:	08008ee4 	.word	0x08008ee4

08006eb8 <__retarget_lock_init_recursive>:
 8006eb8:	4770      	bx	lr

08006eba <__retarget_lock_acquire_recursive>:
 8006eba:	4770      	bx	lr

08006ebc <__retarget_lock_release_recursive>:
 8006ebc:	4770      	bx	lr
	...

08006ec0 <_free_r>:
 8006ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ec2:	2900      	cmp	r1, #0
 8006ec4:	d044      	beq.n	8006f50 <_free_r+0x90>
 8006ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eca:	9001      	str	r0, [sp, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f1a1 0404 	sub.w	r4, r1, #4
 8006ed2:	bfb8      	it	lt
 8006ed4:	18e4      	addlt	r4, r4, r3
 8006ed6:	f000 f8df 	bl	8007098 <__malloc_lock>
 8006eda:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <_free_r+0x94>)
 8006edc:	9801      	ldr	r0, [sp, #4]
 8006ede:	6813      	ldr	r3, [r2, #0]
 8006ee0:	b933      	cbnz	r3, 8006ef0 <_free_r+0x30>
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	6014      	str	r4, [r2, #0]
 8006ee6:	b003      	add	sp, #12
 8006ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eec:	f000 b8da 	b.w	80070a4 <__malloc_unlock>
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d908      	bls.n	8006f06 <_free_r+0x46>
 8006ef4:	6825      	ldr	r5, [r4, #0]
 8006ef6:	1961      	adds	r1, r4, r5
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	bf01      	itttt	eq
 8006efc:	6819      	ldreq	r1, [r3, #0]
 8006efe:	685b      	ldreq	r3, [r3, #4]
 8006f00:	1949      	addeq	r1, r1, r5
 8006f02:	6021      	streq	r1, [r4, #0]
 8006f04:	e7ed      	b.n	8006ee2 <_free_r+0x22>
 8006f06:	461a      	mov	r2, r3
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	b10b      	cbz	r3, 8006f10 <_free_r+0x50>
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d9fa      	bls.n	8006f06 <_free_r+0x46>
 8006f10:	6811      	ldr	r1, [r2, #0]
 8006f12:	1855      	adds	r5, r2, r1
 8006f14:	42a5      	cmp	r5, r4
 8006f16:	d10b      	bne.n	8006f30 <_free_r+0x70>
 8006f18:	6824      	ldr	r4, [r4, #0]
 8006f1a:	4421      	add	r1, r4
 8006f1c:	1854      	adds	r4, r2, r1
 8006f1e:	42a3      	cmp	r3, r4
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	d1e0      	bne.n	8006ee6 <_free_r+0x26>
 8006f24:	681c      	ldr	r4, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	6053      	str	r3, [r2, #4]
 8006f2a:	440c      	add	r4, r1
 8006f2c:	6014      	str	r4, [r2, #0]
 8006f2e:	e7da      	b.n	8006ee6 <_free_r+0x26>
 8006f30:	d902      	bls.n	8006f38 <_free_r+0x78>
 8006f32:	230c      	movs	r3, #12
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	e7d6      	b.n	8006ee6 <_free_r+0x26>
 8006f38:	6825      	ldr	r5, [r4, #0]
 8006f3a:	1961      	adds	r1, r4, r5
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	bf04      	itt	eq
 8006f40:	6819      	ldreq	r1, [r3, #0]
 8006f42:	685b      	ldreq	r3, [r3, #4]
 8006f44:	6063      	str	r3, [r4, #4]
 8006f46:	bf04      	itt	eq
 8006f48:	1949      	addeq	r1, r1, r5
 8006f4a:	6021      	streq	r1, [r4, #0]
 8006f4c:	6054      	str	r4, [r2, #4]
 8006f4e:	e7ca      	b.n	8006ee6 <_free_r+0x26>
 8006f50:	b003      	add	sp, #12
 8006f52:	bd30      	pop	{r4, r5, pc}
 8006f54:	20000f94 	.word	0x20000f94

08006f58 <sbrk_aligned>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	4e0e      	ldr	r6, [pc, #56]	; (8006f94 <sbrk_aligned+0x3c>)
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	6831      	ldr	r1, [r6, #0]
 8006f60:	4605      	mov	r5, r0
 8006f62:	b911      	cbnz	r1, 8006f6a <sbrk_aligned+0x12>
 8006f64:	f000 fcbc 	bl	80078e0 <_sbrk_r>
 8006f68:	6030      	str	r0, [r6, #0]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 fcb7 	bl	80078e0 <_sbrk_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d00a      	beq.n	8006f8c <sbrk_aligned+0x34>
 8006f76:	1cc4      	adds	r4, r0, #3
 8006f78:	f024 0403 	bic.w	r4, r4, #3
 8006f7c:	42a0      	cmp	r0, r4
 8006f7e:	d007      	beq.n	8006f90 <sbrk_aligned+0x38>
 8006f80:	1a21      	subs	r1, r4, r0
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 fcac 	bl	80078e0 <_sbrk_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d101      	bne.n	8006f90 <sbrk_aligned+0x38>
 8006f8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f90:	4620      	mov	r0, r4
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	20000f98 	.word	0x20000f98

08006f98 <_malloc_r>:
 8006f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9c:	1ccd      	adds	r5, r1, #3
 8006f9e:	f025 0503 	bic.w	r5, r5, #3
 8006fa2:	3508      	adds	r5, #8
 8006fa4:	2d0c      	cmp	r5, #12
 8006fa6:	bf38      	it	cc
 8006fa8:	250c      	movcc	r5, #12
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	4607      	mov	r7, r0
 8006fae:	db01      	blt.n	8006fb4 <_malloc_r+0x1c>
 8006fb0:	42a9      	cmp	r1, r5
 8006fb2:	d905      	bls.n	8006fc0 <_malloc_r+0x28>
 8006fb4:	230c      	movs	r3, #12
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	2600      	movs	r6, #0
 8006fba:	4630      	mov	r0, r6
 8006fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007094 <_malloc_r+0xfc>
 8006fc4:	f000 f868 	bl	8007098 <__malloc_lock>
 8006fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fcc:	461c      	mov	r4, r3
 8006fce:	bb5c      	cbnz	r4, 8007028 <_malloc_r+0x90>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f7ff ffc0 	bl	8006f58 <sbrk_aligned>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	4604      	mov	r4, r0
 8006fdc:	d155      	bne.n	800708a <_malloc_r+0xf2>
 8006fde:	f8d8 4000 	ldr.w	r4, [r8]
 8006fe2:	4626      	mov	r6, r4
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	d145      	bne.n	8007074 <_malloc_r+0xdc>
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	d048      	beq.n	800707e <_malloc_r+0xe6>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	eb04 0903 	add.w	r9, r4, r3
 8006ff6:	f000 fc73 	bl	80078e0 <_sbrk_r>
 8006ffa:	4581      	cmp	r9, r0
 8006ffc:	d13f      	bne.n	800707e <_malloc_r+0xe6>
 8006ffe:	6821      	ldr	r1, [r4, #0]
 8007000:	1a6d      	subs	r5, r5, r1
 8007002:	4629      	mov	r1, r5
 8007004:	4638      	mov	r0, r7
 8007006:	f7ff ffa7 	bl	8006f58 <sbrk_aligned>
 800700a:	3001      	adds	r0, #1
 800700c:	d037      	beq.n	800707e <_malloc_r+0xe6>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	442b      	add	r3, r5
 8007012:	6023      	str	r3, [r4, #0]
 8007014:	f8d8 3000 	ldr.w	r3, [r8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d038      	beq.n	800708e <_malloc_r+0xf6>
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	42a2      	cmp	r2, r4
 8007020:	d12b      	bne.n	800707a <_malloc_r+0xe2>
 8007022:	2200      	movs	r2, #0
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	e00f      	b.n	8007048 <_malloc_r+0xb0>
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	1b52      	subs	r2, r2, r5
 800702c:	d41f      	bmi.n	800706e <_malloc_r+0xd6>
 800702e:	2a0b      	cmp	r2, #11
 8007030:	d917      	bls.n	8007062 <_malloc_r+0xca>
 8007032:	1961      	adds	r1, r4, r5
 8007034:	42a3      	cmp	r3, r4
 8007036:	6025      	str	r5, [r4, #0]
 8007038:	bf18      	it	ne
 800703a:	6059      	strne	r1, [r3, #4]
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	bf08      	it	eq
 8007040:	f8c8 1000 	streq.w	r1, [r8]
 8007044:	5162      	str	r2, [r4, r5]
 8007046:	604b      	str	r3, [r1, #4]
 8007048:	4638      	mov	r0, r7
 800704a:	f104 060b 	add.w	r6, r4, #11
 800704e:	f000 f829 	bl	80070a4 <__malloc_unlock>
 8007052:	f026 0607 	bic.w	r6, r6, #7
 8007056:	1d23      	adds	r3, r4, #4
 8007058:	1af2      	subs	r2, r6, r3
 800705a:	d0ae      	beq.n	8006fba <_malloc_r+0x22>
 800705c:	1b9b      	subs	r3, r3, r6
 800705e:	50a3      	str	r3, [r4, r2]
 8007060:	e7ab      	b.n	8006fba <_malloc_r+0x22>
 8007062:	42a3      	cmp	r3, r4
 8007064:	6862      	ldr	r2, [r4, #4]
 8007066:	d1dd      	bne.n	8007024 <_malloc_r+0x8c>
 8007068:	f8c8 2000 	str.w	r2, [r8]
 800706c:	e7ec      	b.n	8007048 <_malloc_r+0xb0>
 800706e:	4623      	mov	r3, r4
 8007070:	6864      	ldr	r4, [r4, #4]
 8007072:	e7ac      	b.n	8006fce <_malloc_r+0x36>
 8007074:	4634      	mov	r4, r6
 8007076:	6876      	ldr	r6, [r6, #4]
 8007078:	e7b4      	b.n	8006fe4 <_malloc_r+0x4c>
 800707a:	4613      	mov	r3, r2
 800707c:	e7cc      	b.n	8007018 <_malloc_r+0x80>
 800707e:	230c      	movs	r3, #12
 8007080:	603b      	str	r3, [r7, #0]
 8007082:	4638      	mov	r0, r7
 8007084:	f000 f80e 	bl	80070a4 <__malloc_unlock>
 8007088:	e797      	b.n	8006fba <_malloc_r+0x22>
 800708a:	6025      	str	r5, [r4, #0]
 800708c:	e7dc      	b.n	8007048 <_malloc_r+0xb0>
 800708e:	605b      	str	r3, [r3, #4]
 8007090:	deff      	udf	#255	; 0xff
 8007092:	bf00      	nop
 8007094:	20000f94 	.word	0x20000f94

08007098 <__malloc_lock>:
 8007098:	4801      	ldr	r0, [pc, #4]	; (80070a0 <__malloc_lock+0x8>)
 800709a:	f7ff bf0e 	b.w	8006eba <__retarget_lock_acquire_recursive>
 800709e:	bf00      	nop
 80070a0:	20000f90 	.word	0x20000f90

080070a4 <__malloc_unlock>:
 80070a4:	4801      	ldr	r0, [pc, #4]	; (80070ac <__malloc_unlock+0x8>)
 80070a6:	f7ff bf09 	b.w	8006ebc <__retarget_lock_release_recursive>
 80070aa:	bf00      	nop
 80070ac:	20000f90 	.word	0x20000f90

080070b0 <__sfputc_r>:
 80070b0:	6893      	ldr	r3, [r2, #8]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	b410      	push	{r4}
 80070b8:	6093      	str	r3, [r2, #8]
 80070ba:	da08      	bge.n	80070ce <__sfputc_r+0x1e>
 80070bc:	6994      	ldr	r4, [r2, #24]
 80070be:	42a3      	cmp	r3, r4
 80070c0:	db01      	blt.n	80070c6 <__sfputc_r+0x16>
 80070c2:	290a      	cmp	r1, #10
 80070c4:	d103      	bne.n	80070ce <__sfputc_r+0x1e>
 80070c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070ca:	f000 bb73 	b.w	80077b4 <__swbuf_r>
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	1c58      	adds	r0, r3, #1
 80070d2:	6010      	str	r0, [r2, #0]
 80070d4:	7019      	strb	r1, [r3, #0]
 80070d6:	4608      	mov	r0, r1
 80070d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070dc:	4770      	bx	lr

080070de <__sfputs_r>:
 80070de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e0:	4606      	mov	r6, r0
 80070e2:	460f      	mov	r7, r1
 80070e4:	4614      	mov	r4, r2
 80070e6:	18d5      	adds	r5, r2, r3
 80070e8:	42ac      	cmp	r4, r5
 80070ea:	d101      	bne.n	80070f0 <__sfputs_r+0x12>
 80070ec:	2000      	movs	r0, #0
 80070ee:	e007      	b.n	8007100 <__sfputs_r+0x22>
 80070f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f4:	463a      	mov	r2, r7
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff ffda 	bl	80070b0 <__sfputc_r>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d1f3      	bne.n	80070e8 <__sfputs_r+0xa>
 8007100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007104 <_vfiprintf_r>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	460d      	mov	r5, r1
 800710a:	b09d      	sub	sp, #116	; 0x74
 800710c:	4614      	mov	r4, r2
 800710e:	4698      	mov	r8, r3
 8007110:	4606      	mov	r6, r0
 8007112:	b118      	cbz	r0, 800711c <_vfiprintf_r+0x18>
 8007114:	6a03      	ldr	r3, [r0, #32]
 8007116:	b90b      	cbnz	r3, 800711c <_vfiprintf_r+0x18>
 8007118:	f7ff fdca 	bl	8006cb0 <__sinit>
 800711c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800711e:	07d9      	lsls	r1, r3, #31
 8007120:	d405      	bmi.n	800712e <_vfiprintf_r+0x2a>
 8007122:	89ab      	ldrh	r3, [r5, #12]
 8007124:	059a      	lsls	r2, r3, #22
 8007126:	d402      	bmi.n	800712e <_vfiprintf_r+0x2a>
 8007128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800712a:	f7ff fec6 	bl	8006eba <__retarget_lock_acquire_recursive>
 800712e:	89ab      	ldrh	r3, [r5, #12]
 8007130:	071b      	lsls	r3, r3, #28
 8007132:	d501      	bpl.n	8007138 <_vfiprintf_r+0x34>
 8007134:	692b      	ldr	r3, [r5, #16]
 8007136:	b99b      	cbnz	r3, 8007160 <_vfiprintf_r+0x5c>
 8007138:	4629      	mov	r1, r5
 800713a:	4630      	mov	r0, r6
 800713c:	f000 fb78 	bl	8007830 <__swsetup_r>
 8007140:	b170      	cbz	r0, 8007160 <_vfiprintf_r+0x5c>
 8007142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007144:	07dc      	lsls	r4, r3, #31
 8007146:	d504      	bpl.n	8007152 <_vfiprintf_r+0x4e>
 8007148:	f04f 30ff 	mov.w	r0, #4294967295
 800714c:	b01d      	add	sp, #116	; 0x74
 800714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	0598      	lsls	r0, r3, #22
 8007156:	d4f7      	bmi.n	8007148 <_vfiprintf_r+0x44>
 8007158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800715a:	f7ff feaf 	bl	8006ebc <__retarget_lock_release_recursive>
 800715e:	e7f3      	b.n	8007148 <_vfiprintf_r+0x44>
 8007160:	2300      	movs	r3, #0
 8007162:	9309      	str	r3, [sp, #36]	; 0x24
 8007164:	2320      	movs	r3, #32
 8007166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800716a:	f8cd 800c 	str.w	r8, [sp, #12]
 800716e:	2330      	movs	r3, #48	; 0x30
 8007170:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007324 <_vfiprintf_r+0x220>
 8007174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007178:	f04f 0901 	mov.w	r9, #1
 800717c:	4623      	mov	r3, r4
 800717e:	469a      	mov	sl, r3
 8007180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007184:	b10a      	cbz	r2, 800718a <_vfiprintf_r+0x86>
 8007186:	2a25      	cmp	r2, #37	; 0x25
 8007188:	d1f9      	bne.n	800717e <_vfiprintf_r+0x7a>
 800718a:	ebba 0b04 	subs.w	fp, sl, r4
 800718e:	d00b      	beq.n	80071a8 <_vfiprintf_r+0xa4>
 8007190:	465b      	mov	r3, fp
 8007192:	4622      	mov	r2, r4
 8007194:	4629      	mov	r1, r5
 8007196:	4630      	mov	r0, r6
 8007198:	f7ff ffa1 	bl	80070de <__sfputs_r>
 800719c:	3001      	adds	r0, #1
 800719e:	f000 80a9 	beq.w	80072f4 <_vfiprintf_r+0x1f0>
 80071a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071a4:	445a      	add	r2, fp
 80071a6:	9209      	str	r2, [sp, #36]	; 0x24
 80071a8:	f89a 3000 	ldrb.w	r3, [sl]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 80a1 	beq.w	80072f4 <_vfiprintf_r+0x1f0>
 80071b2:	2300      	movs	r3, #0
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295
 80071b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071bc:	f10a 0a01 	add.w	sl, sl, #1
 80071c0:	9304      	str	r3, [sp, #16]
 80071c2:	9307      	str	r3, [sp, #28]
 80071c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071c8:	931a      	str	r3, [sp, #104]	; 0x68
 80071ca:	4654      	mov	r4, sl
 80071cc:	2205      	movs	r2, #5
 80071ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d2:	4854      	ldr	r0, [pc, #336]	; (8007324 <_vfiprintf_r+0x220>)
 80071d4:	f7f9 f81c 	bl	8000210 <memchr>
 80071d8:	9a04      	ldr	r2, [sp, #16]
 80071da:	b9d8      	cbnz	r0, 8007214 <_vfiprintf_r+0x110>
 80071dc:	06d1      	lsls	r1, r2, #27
 80071de:	bf44      	itt	mi
 80071e0:	2320      	movmi	r3, #32
 80071e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e6:	0713      	lsls	r3, r2, #28
 80071e8:	bf44      	itt	mi
 80071ea:	232b      	movmi	r3, #43	; 0x2b
 80071ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071f0:	f89a 3000 	ldrb.w	r3, [sl]
 80071f4:	2b2a      	cmp	r3, #42	; 0x2a
 80071f6:	d015      	beq.n	8007224 <_vfiprintf_r+0x120>
 80071f8:	9a07      	ldr	r2, [sp, #28]
 80071fa:	4654      	mov	r4, sl
 80071fc:	2000      	movs	r0, #0
 80071fe:	f04f 0c0a 	mov.w	ip, #10
 8007202:	4621      	mov	r1, r4
 8007204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007208:	3b30      	subs	r3, #48	; 0x30
 800720a:	2b09      	cmp	r3, #9
 800720c:	d94d      	bls.n	80072aa <_vfiprintf_r+0x1a6>
 800720e:	b1b0      	cbz	r0, 800723e <_vfiprintf_r+0x13a>
 8007210:	9207      	str	r2, [sp, #28]
 8007212:	e014      	b.n	800723e <_vfiprintf_r+0x13a>
 8007214:	eba0 0308 	sub.w	r3, r0, r8
 8007218:	fa09 f303 	lsl.w	r3, r9, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	46a2      	mov	sl, r4
 8007222:	e7d2      	b.n	80071ca <_vfiprintf_r+0xc6>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	1d19      	adds	r1, r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	9103      	str	r1, [sp, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfbb      	ittet	lt
 8007230:	425b      	neglt	r3, r3
 8007232:	f042 0202 	orrlt.w	r2, r2, #2
 8007236:	9307      	strge	r3, [sp, #28]
 8007238:	9307      	strlt	r3, [sp, #28]
 800723a:	bfb8      	it	lt
 800723c:	9204      	strlt	r2, [sp, #16]
 800723e:	7823      	ldrb	r3, [r4, #0]
 8007240:	2b2e      	cmp	r3, #46	; 0x2e
 8007242:	d10c      	bne.n	800725e <_vfiprintf_r+0x15a>
 8007244:	7863      	ldrb	r3, [r4, #1]
 8007246:	2b2a      	cmp	r3, #42	; 0x2a
 8007248:	d134      	bne.n	80072b4 <_vfiprintf_r+0x1b0>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	1d1a      	adds	r2, r3, #4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	9203      	str	r2, [sp, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfb8      	it	lt
 8007256:	f04f 33ff 	movlt.w	r3, #4294967295
 800725a:	3402      	adds	r4, #2
 800725c:	9305      	str	r3, [sp, #20]
 800725e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007334 <_vfiprintf_r+0x230>
 8007262:	7821      	ldrb	r1, [r4, #0]
 8007264:	2203      	movs	r2, #3
 8007266:	4650      	mov	r0, sl
 8007268:	f7f8 ffd2 	bl	8000210 <memchr>
 800726c:	b138      	cbz	r0, 800727e <_vfiprintf_r+0x17a>
 800726e:	9b04      	ldr	r3, [sp, #16]
 8007270:	eba0 000a 	sub.w	r0, r0, sl
 8007274:	2240      	movs	r2, #64	; 0x40
 8007276:	4082      	lsls	r2, r0
 8007278:	4313      	orrs	r3, r2
 800727a:	3401      	adds	r4, #1
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007282:	4829      	ldr	r0, [pc, #164]	; (8007328 <_vfiprintf_r+0x224>)
 8007284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007288:	2206      	movs	r2, #6
 800728a:	f7f8 ffc1 	bl	8000210 <memchr>
 800728e:	2800      	cmp	r0, #0
 8007290:	d03f      	beq.n	8007312 <_vfiprintf_r+0x20e>
 8007292:	4b26      	ldr	r3, [pc, #152]	; (800732c <_vfiprintf_r+0x228>)
 8007294:	bb1b      	cbnz	r3, 80072de <_vfiprintf_r+0x1da>
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	3307      	adds	r3, #7
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	3308      	adds	r3, #8
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a4:	443b      	add	r3, r7
 80072a6:	9309      	str	r3, [sp, #36]	; 0x24
 80072a8:	e768      	b.n	800717c <_vfiprintf_r+0x78>
 80072aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ae:	460c      	mov	r4, r1
 80072b0:	2001      	movs	r0, #1
 80072b2:	e7a6      	b.n	8007202 <_vfiprintf_r+0xfe>
 80072b4:	2300      	movs	r3, #0
 80072b6:	3401      	adds	r4, #1
 80072b8:	9305      	str	r3, [sp, #20]
 80072ba:	4619      	mov	r1, r3
 80072bc:	f04f 0c0a 	mov.w	ip, #10
 80072c0:	4620      	mov	r0, r4
 80072c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072c6:	3a30      	subs	r2, #48	; 0x30
 80072c8:	2a09      	cmp	r2, #9
 80072ca:	d903      	bls.n	80072d4 <_vfiprintf_r+0x1d0>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0c6      	beq.n	800725e <_vfiprintf_r+0x15a>
 80072d0:	9105      	str	r1, [sp, #20]
 80072d2:	e7c4      	b.n	800725e <_vfiprintf_r+0x15a>
 80072d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072d8:	4604      	mov	r4, r0
 80072da:	2301      	movs	r3, #1
 80072dc:	e7f0      	b.n	80072c0 <_vfiprintf_r+0x1bc>
 80072de:	ab03      	add	r3, sp, #12
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	462a      	mov	r2, r5
 80072e4:	4b12      	ldr	r3, [pc, #72]	; (8007330 <_vfiprintf_r+0x22c>)
 80072e6:	a904      	add	r1, sp, #16
 80072e8:	4630      	mov	r0, r6
 80072ea:	f3af 8000 	nop.w
 80072ee:	4607      	mov	r7, r0
 80072f0:	1c78      	adds	r0, r7, #1
 80072f2:	d1d6      	bne.n	80072a2 <_vfiprintf_r+0x19e>
 80072f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072f6:	07d9      	lsls	r1, r3, #31
 80072f8:	d405      	bmi.n	8007306 <_vfiprintf_r+0x202>
 80072fa:	89ab      	ldrh	r3, [r5, #12]
 80072fc:	059a      	lsls	r2, r3, #22
 80072fe:	d402      	bmi.n	8007306 <_vfiprintf_r+0x202>
 8007300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007302:	f7ff fddb 	bl	8006ebc <__retarget_lock_release_recursive>
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	065b      	lsls	r3, r3, #25
 800730a:	f53f af1d 	bmi.w	8007148 <_vfiprintf_r+0x44>
 800730e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007310:	e71c      	b.n	800714c <_vfiprintf_r+0x48>
 8007312:	ab03      	add	r3, sp, #12
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	462a      	mov	r2, r5
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <_vfiprintf_r+0x22c>)
 800731a:	a904      	add	r1, sp, #16
 800731c:	4630      	mov	r0, r6
 800731e:	f000 f879 	bl	8007414 <_printf_i>
 8007322:	e7e4      	b.n	80072ee <_vfiprintf_r+0x1ea>
 8007324:	08008ccc 	.word	0x08008ccc
 8007328:	08008cd6 	.word	0x08008cd6
 800732c:	00000000 	.word	0x00000000
 8007330:	080070df 	.word	0x080070df
 8007334:	08008cd2 	.word	0x08008cd2

08007338 <_printf_common>:
 8007338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	4616      	mov	r6, r2
 800733e:	4699      	mov	r9, r3
 8007340:	688a      	ldr	r2, [r1, #8]
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007348:	4293      	cmp	r3, r2
 800734a:	bfb8      	it	lt
 800734c:	4613      	movlt	r3, r2
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007354:	4607      	mov	r7, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b10a      	cbz	r2, 800735e <_printf_common+0x26>
 800735a:	3301      	adds	r3, #1
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	0699      	lsls	r1, r3, #26
 8007362:	bf42      	ittt	mi
 8007364:	6833      	ldrmi	r3, [r6, #0]
 8007366:	3302      	addmi	r3, #2
 8007368:	6033      	strmi	r3, [r6, #0]
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	f015 0506 	ands.w	r5, r5, #6
 8007370:	d106      	bne.n	8007380 <_printf_common+0x48>
 8007372:	f104 0a19 	add.w	sl, r4, #25
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	6832      	ldr	r2, [r6, #0]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	42ab      	cmp	r3, r5
 800737e:	dc26      	bgt.n	80073ce <_printf_common+0x96>
 8007380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007384:	1e13      	subs	r3, r2, #0
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	bf18      	it	ne
 800738a:	2301      	movne	r3, #1
 800738c:	0692      	lsls	r2, r2, #26
 800738e:	d42b      	bmi.n	80073e8 <_printf_common+0xb0>
 8007390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007394:	4649      	mov	r1, r9
 8007396:	4638      	mov	r0, r7
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d01e      	beq.n	80073dc <_printf_common+0xa4>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	6922      	ldr	r2, [r4, #16]
 80073a2:	f003 0306 	and.w	r3, r3, #6
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	bf02      	ittt	eq
 80073aa:	68e5      	ldreq	r5, [r4, #12]
 80073ac:	6833      	ldreq	r3, [r6, #0]
 80073ae:	1aed      	subeq	r5, r5, r3
 80073b0:	68a3      	ldr	r3, [r4, #8]
 80073b2:	bf0c      	ite	eq
 80073b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b8:	2500      	movne	r5, #0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	bfc4      	itt	gt
 80073be:	1a9b      	subgt	r3, r3, r2
 80073c0:	18ed      	addgt	r5, r5, r3
 80073c2:	2600      	movs	r6, #0
 80073c4:	341a      	adds	r4, #26
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d11a      	bne.n	8007400 <_printf_common+0xc8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e008      	b.n	80073e0 <_printf_common+0xa8>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4652      	mov	r2, sl
 80073d2:	4649      	mov	r1, r9
 80073d4:	4638      	mov	r0, r7
 80073d6:	47c0      	blx	r8
 80073d8:	3001      	adds	r0, #1
 80073da:	d103      	bne.n	80073e4 <_printf_common+0xac>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	3501      	adds	r5, #1
 80073e6:	e7c6      	b.n	8007376 <_printf_common+0x3e>
 80073e8:	18e1      	adds	r1, r4, r3
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	2030      	movs	r0, #48	; 0x30
 80073ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f2:	4422      	add	r2, r4
 80073f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073fc:	3302      	adds	r3, #2
 80073fe:	e7c7      	b.n	8007390 <_printf_common+0x58>
 8007400:	2301      	movs	r3, #1
 8007402:	4622      	mov	r2, r4
 8007404:	4649      	mov	r1, r9
 8007406:	4638      	mov	r0, r7
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d0e6      	beq.n	80073dc <_printf_common+0xa4>
 800740e:	3601      	adds	r6, #1
 8007410:	e7d9      	b.n	80073c6 <_printf_common+0x8e>
	...

08007414 <_printf_i>:
 8007414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	7e0f      	ldrb	r7, [r1, #24]
 800741a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800741c:	2f78      	cmp	r7, #120	; 0x78
 800741e:	4691      	mov	r9, r2
 8007420:	4680      	mov	r8, r0
 8007422:	460c      	mov	r4, r1
 8007424:	469a      	mov	sl, r3
 8007426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800742a:	d807      	bhi.n	800743c <_printf_i+0x28>
 800742c:	2f62      	cmp	r7, #98	; 0x62
 800742e:	d80a      	bhi.n	8007446 <_printf_i+0x32>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f000 80d4 	beq.w	80075de <_printf_i+0x1ca>
 8007436:	2f58      	cmp	r7, #88	; 0x58
 8007438:	f000 80c0 	beq.w	80075bc <_printf_i+0x1a8>
 800743c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007444:	e03a      	b.n	80074bc <_printf_i+0xa8>
 8007446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800744a:	2b15      	cmp	r3, #21
 800744c:	d8f6      	bhi.n	800743c <_printf_i+0x28>
 800744e:	a101      	add	r1, pc, #4	; (adr r1, 8007454 <_printf_i+0x40>)
 8007450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074c1 	.word	0x080074c1
 800745c:	0800743d 	.word	0x0800743d
 8007460:	0800743d 	.word	0x0800743d
 8007464:	0800743d 	.word	0x0800743d
 8007468:	0800743d 	.word	0x0800743d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800743d 	.word	0x0800743d
 8007474:	0800743d 	.word	0x0800743d
 8007478:	0800743d 	.word	0x0800743d
 800747c:	0800743d 	.word	0x0800743d
 8007480:	080075c5 	.word	0x080075c5
 8007484:	080074ed 	.word	0x080074ed
 8007488:	0800757f 	.word	0x0800757f
 800748c:	0800743d 	.word	0x0800743d
 8007490:	0800743d 	.word	0x0800743d
 8007494:	080075e7 	.word	0x080075e7
 8007498:	0800743d 	.word	0x0800743d
 800749c:	080074ed 	.word	0x080074ed
 80074a0:	0800743d 	.word	0x0800743d
 80074a4:	0800743d 	.word	0x0800743d
 80074a8:	08007587 	.word	0x08007587
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	602a      	str	r2, [r5, #0]
 80074b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074bc:	2301      	movs	r3, #1
 80074be:	e09f      	b.n	8007600 <_printf_i+0x1ec>
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	682b      	ldr	r3, [r5, #0]
 80074c4:	0607      	lsls	r7, r0, #24
 80074c6:	f103 0104 	add.w	r1, r3, #4
 80074ca:	6029      	str	r1, [r5, #0]
 80074cc:	d501      	bpl.n	80074d2 <_printf_i+0xbe>
 80074ce:	681e      	ldr	r6, [r3, #0]
 80074d0:	e003      	b.n	80074da <_printf_i+0xc6>
 80074d2:	0646      	lsls	r6, r0, #25
 80074d4:	d5fb      	bpl.n	80074ce <_printf_i+0xba>
 80074d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074da:	2e00      	cmp	r6, #0
 80074dc:	da03      	bge.n	80074e6 <_printf_i+0xd2>
 80074de:	232d      	movs	r3, #45	; 0x2d
 80074e0:	4276      	negs	r6, r6
 80074e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e6:	485a      	ldr	r0, [pc, #360]	; (8007650 <_printf_i+0x23c>)
 80074e8:	230a      	movs	r3, #10
 80074ea:	e012      	b.n	8007512 <_printf_i+0xfe>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	1d19      	adds	r1, r3, #4
 80074f2:	6029      	str	r1, [r5, #0]
 80074f4:	0605      	lsls	r5, r0, #24
 80074f6:	d501      	bpl.n	80074fc <_printf_i+0xe8>
 80074f8:	681e      	ldr	r6, [r3, #0]
 80074fa:	e002      	b.n	8007502 <_printf_i+0xee>
 80074fc:	0641      	lsls	r1, r0, #25
 80074fe:	d5fb      	bpl.n	80074f8 <_printf_i+0xe4>
 8007500:	881e      	ldrh	r6, [r3, #0]
 8007502:	4853      	ldr	r0, [pc, #332]	; (8007650 <_printf_i+0x23c>)
 8007504:	2f6f      	cmp	r7, #111	; 0x6f
 8007506:	bf0c      	ite	eq
 8007508:	2308      	moveq	r3, #8
 800750a:	230a      	movne	r3, #10
 800750c:	2100      	movs	r1, #0
 800750e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007512:	6865      	ldr	r5, [r4, #4]
 8007514:	60a5      	str	r5, [r4, #8]
 8007516:	2d00      	cmp	r5, #0
 8007518:	bfa2      	ittt	ge
 800751a:	6821      	ldrge	r1, [r4, #0]
 800751c:	f021 0104 	bicge.w	r1, r1, #4
 8007520:	6021      	strge	r1, [r4, #0]
 8007522:	b90e      	cbnz	r6, 8007528 <_printf_i+0x114>
 8007524:	2d00      	cmp	r5, #0
 8007526:	d04b      	beq.n	80075c0 <_printf_i+0x1ac>
 8007528:	4615      	mov	r5, r2
 800752a:	fbb6 f1f3 	udiv	r1, r6, r3
 800752e:	fb03 6711 	mls	r7, r3, r1, r6
 8007532:	5dc7      	ldrb	r7, [r0, r7]
 8007534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007538:	4637      	mov	r7, r6
 800753a:	42bb      	cmp	r3, r7
 800753c:	460e      	mov	r6, r1
 800753e:	d9f4      	bls.n	800752a <_printf_i+0x116>
 8007540:	2b08      	cmp	r3, #8
 8007542:	d10b      	bne.n	800755c <_printf_i+0x148>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	07de      	lsls	r6, r3, #31
 8007548:	d508      	bpl.n	800755c <_printf_i+0x148>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	6861      	ldr	r1, [r4, #4]
 800754e:	4299      	cmp	r1, r3
 8007550:	bfde      	ittt	le
 8007552:	2330      	movle	r3, #48	; 0x30
 8007554:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007558:	f105 35ff 	addle.w	r5, r5, #4294967295
 800755c:	1b52      	subs	r2, r2, r5
 800755e:	6122      	str	r2, [r4, #16]
 8007560:	f8cd a000 	str.w	sl, [sp]
 8007564:	464b      	mov	r3, r9
 8007566:	aa03      	add	r2, sp, #12
 8007568:	4621      	mov	r1, r4
 800756a:	4640      	mov	r0, r8
 800756c:	f7ff fee4 	bl	8007338 <_printf_common>
 8007570:	3001      	adds	r0, #1
 8007572:	d14a      	bne.n	800760a <_printf_i+0x1f6>
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	b004      	add	sp, #16
 800757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	4833      	ldr	r0, [pc, #204]	; (8007654 <_printf_i+0x240>)
 8007588:	2778      	movs	r7, #120	; 0x78
 800758a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	6829      	ldr	r1, [r5, #0]
 8007592:	061f      	lsls	r7, r3, #24
 8007594:	f851 6b04 	ldr.w	r6, [r1], #4
 8007598:	d402      	bmi.n	80075a0 <_printf_i+0x18c>
 800759a:	065f      	lsls	r7, r3, #25
 800759c:	bf48      	it	mi
 800759e:	b2b6      	uxthmi	r6, r6
 80075a0:	07df      	lsls	r7, r3, #31
 80075a2:	bf48      	it	mi
 80075a4:	f043 0320 	orrmi.w	r3, r3, #32
 80075a8:	6029      	str	r1, [r5, #0]
 80075aa:	bf48      	it	mi
 80075ac:	6023      	strmi	r3, [r4, #0]
 80075ae:	b91e      	cbnz	r6, 80075b8 <_printf_i+0x1a4>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	f023 0320 	bic.w	r3, r3, #32
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	2310      	movs	r3, #16
 80075ba:	e7a7      	b.n	800750c <_printf_i+0xf8>
 80075bc:	4824      	ldr	r0, [pc, #144]	; (8007650 <_printf_i+0x23c>)
 80075be:	e7e4      	b.n	800758a <_printf_i+0x176>
 80075c0:	4615      	mov	r5, r2
 80075c2:	e7bd      	b.n	8007540 <_printf_i+0x12c>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	6826      	ldr	r6, [r4, #0]
 80075c8:	6961      	ldr	r1, [r4, #20]
 80075ca:	1d18      	adds	r0, r3, #4
 80075cc:	6028      	str	r0, [r5, #0]
 80075ce:	0635      	lsls	r5, r6, #24
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	d501      	bpl.n	80075d8 <_printf_i+0x1c4>
 80075d4:	6019      	str	r1, [r3, #0]
 80075d6:	e002      	b.n	80075de <_printf_i+0x1ca>
 80075d8:	0670      	lsls	r0, r6, #25
 80075da:	d5fb      	bpl.n	80075d4 <_printf_i+0x1c0>
 80075dc:	8019      	strh	r1, [r3, #0]
 80075de:	2300      	movs	r3, #0
 80075e0:	6123      	str	r3, [r4, #16]
 80075e2:	4615      	mov	r5, r2
 80075e4:	e7bc      	b.n	8007560 <_printf_i+0x14c>
 80075e6:	682b      	ldr	r3, [r5, #0]
 80075e8:	1d1a      	adds	r2, r3, #4
 80075ea:	602a      	str	r2, [r5, #0]
 80075ec:	681d      	ldr	r5, [r3, #0]
 80075ee:	6862      	ldr	r2, [r4, #4]
 80075f0:	2100      	movs	r1, #0
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7f8 fe0c 	bl	8000210 <memchr>
 80075f8:	b108      	cbz	r0, 80075fe <_printf_i+0x1ea>
 80075fa:	1b40      	subs	r0, r0, r5
 80075fc:	6060      	str	r0, [r4, #4]
 80075fe:	6863      	ldr	r3, [r4, #4]
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	2300      	movs	r3, #0
 8007604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007608:	e7aa      	b.n	8007560 <_printf_i+0x14c>
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	462a      	mov	r2, r5
 800760e:	4649      	mov	r1, r9
 8007610:	4640      	mov	r0, r8
 8007612:	47d0      	blx	sl
 8007614:	3001      	adds	r0, #1
 8007616:	d0ad      	beq.n	8007574 <_printf_i+0x160>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	079b      	lsls	r3, r3, #30
 800761c:	d413      	bmi.n	8007646 <_printf_i+0x232>
 800761e:	68e0      	ldr	r0, [r4, #12]
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	4298      	cmp	r0, r3
 8007624:	bfb8      	it	lt
 8007626:	4618      	movlt	r0, r3
 8007628:	e7a6      	b.n	8007578 <_printf_i+0x164>
 800762a:	2301      	movs	r3, #1
 800762c:	4632      	mov	r2, r6
 800762e:	4649      	mov	r1, r9
 8007630:	4640      	mov	r0, r8
 8007632:	47d0      	blx	sl
 8007634:	3001      	adds	r0, #1
 8007636:	d09d      	beq.n	8007574 <_printf_i+0x160>
 8007638:	3501      	adds	r5, #1
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	9903      	ldr	r1, [sp, #12]
 800763e:	1a5b      	subs	r3, r3, r1
 8007640:	42ab      	cmp	r3, r5
 8007642:	dcf2      	bgt.n	800762a <_printf_i+0x216>
 8007644:	e7eb      	b.n	800761e <_printf_i+0x20a>
 8007646:	2500      	movs	r5, #0
 8007648:	f104 0619 	add.w	r6, r4, #25
 800764c:	e7f5      	b.n	800763a <_printf_i+0x226>
 800764e:	bf00      	nop
 8007650:	08008cdd 	.word	0x08008cdd
 8007654:	08008cee 	.word	0x08008cee

08007658 <__sflush_r>:
 8007658:	898a      	ldrh	r2, [r1, #12]
 800765a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765e:	4605      	mov	r5, r0
 8007660:	0710      	lsls	r0, r2, #28
 8007662:	460c      	mov	r4, r1
 8007664:	d458      	bmi.n	8007718 <__sflush_r+0xc0>
 8007666:	684b      	ldr	r3, [r1, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	dc05      	bgt.n	8007678 <__sflush_r+0x20>
 800766c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	dc02      	bgt.n	8007678 <__sflush_r+0x20>
 8007672:	2000      	movs	r0, #0
 8007674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800767a:	2e00      	cmp	r6, #0
 800767c:	d0f9      	beq.n	8007672 <__sflush_r+0x1a>
 800767e:	2300      	movs	r3, #0
 8007680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007684:	682f      	ldr	r7, [r5, #0]
 8007686:	6a21      	ldr	r1, [r4, #32]
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	d032      	beq.n	80076f2 <__sflush_r+0x9a>
 800768c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	075a      	lsls	r2, r3, #29
 8007692:	d505      	bpl.n	80076a0 <__sflush_r+0x48>
 8007694:	6863      	ldr	r3, [r4, #4]
 8007696:	1ac0      	subs	r0, r0, r3
 8007698:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800769a:	b10b      	cbz	r3, 80076a0 <__sflush_r+0x48>
 800769c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800769e:	1ac0      	subs	r0, r0, r3
 80076a0:	2300      	movs	r3, #0
 80076a2:	4602      	mov	r2, r0
 80076a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076a6:	6a21      	ldr	r1, [r4, #32]
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b0      	blx	r6
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	d106      	bne.n	80076c0 <__sflush_r+0x68>
 80076b2:	6829      	ldr	r1, [r5, #0]
 80076b4:	291d      	cmp	r1, #29
 80076b6:	d82b      	bhi.n	8007710 <__sflush_r+0xb8>
 80076b8:	4a29      	ldr	r2, [pc, #164]	; (8007760 <__sflush_r+0x108>)
 80076ba:	410a      	asrs	r2, r1
 80076bc:	07d6      	lsls	r6, r2, #31
 80076be:	d427      	bmi.n	8007710 <__sflush_r+0xb8>
 80076c0:	2200      	movs	r2, #0
 80076c2:	6062      	str	r2, [r4, #4]
 80076c4:	04d9      	lsls	r1, r3, #19
 80076c6:	6922      	ldr	r2, [r4, #16]
 80076c8:	6022      	str	r2, [r4, #0]
 80076ca:	d504      	bpl.n	80076d6 <__sflush_r+0x7e>
 80076cc:	1c42      	adds	r2, r0, #1
 80076ce:	d101      	bne.n	80076d4 <__sflush_r+0x7c>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b903      	cbnz	r3, 80076d6 <__sflush_r+0x7e>
 80076d4:	6560      	str	r0, [r4, #84]	; 0x54
 80076d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076d8:	602f      	str	r7, [r5, #0]
 80076da:	2900      	cmp	r1, #0
 80076dc:	d0c9      	beq.n	8007672 <__sflush_r+0x1a>
 80076de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076e2:	4299      	cmp	r1, r3
 80076e4:	d002      	beq.n	80076ec <__sflush_r+0x94>
 80076e6:	4628      	mov	r0, r5
 80076e8:	f7ff fbea 	bl	8006ec0 <_free_r>
 80076ec:	2000      	movs	r0, #0
 80076ee:	6360      	str	r0, [r4, #52]	; 0x34
 80076f0:	e7c0      	b.n	8007674 <__sflush_r+0x1c>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b0      	blx	r6
 80076f8:	1c41      	adds	r1, r0, #1
 80076fa:	d1c8      	bne.n	800768e <__sflush_r+0x36>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0c5      	beq.n	800768e <__sflush_r+0x36>
 8007702:	2b1d      	cmp	r3, #29
 8007704:	d001      	beq.n	800770a <__sflush_r+0xb2>
 8007706:	2b16      	cmp	r3, #22
 8007708:	d101      	bne.n	800770e <__sflush_r+0xb6>
 800770a:	602f      	str	r7, [r5, #0]
 800770c:	e7b1      	b.n	8007672 <__sflush_r+0x1a>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	e7ad      	b.n	8007674 <__sflush_r+0x1c>
 8007718:	690f      	ldr	r7, [r1, #16]
 800771a:	2f00      	cmp	r7, #0
 800771c:	d0a9      	beq.n	8007672 <__sflush_r+0x1a>
 800771e:	0793      	lsls	r3, r2, #30
 8007720:	680e      	ldr	r6, [r1, #0]
 8007722:	bf08      	it	eq
 8007724:	694b      	ldreq	r3, [r1, #20]
 8007726:	600f      	str	r7, [r1, #0]
 8007728:	bf18      	it	ne
 800772a:	2300      	movne	r3, #0
 800772c:	eba6 0807 	sub.w	r8, r6, r7
 8007730:	608b      	str	r3, [r1, #8]
 8007732:	f1b8 0f00 	cmp.w	r8, #0
 8007736:	dd9c      	ble.n	8007672 <__sflush_r+0x1a>
 8007738:	6a21      	ldr	r1, [r4, #32]
 800773a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800773c:	4643      	mov	r3, r8
 800773e:	463a      	mov	r2, r7
 8007740:	4628      	mov	r0, r5
 8007742:	47b0      	blx	r6
 8007744:	2800      	cmp	r0, #0
 8007746:	dc06      	bgt.n	8007756 <__sflush_r+0xfe>
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800774e:	81a3      	strh	r3, [r4, #12]
 8007750:	f04f 30ff 	mov.w	r0, #4294967295
 8007754:	e78e      	b.n	8007674 <__sflush_r+0x1c>
 8007756:	4407      	add	r7, r0
 8007758:	eba8 0800 	sub.w	r8, r8, r0
 800775c:	e7e9      	b.n	8007732 <__sflush_r+0xda>
 800775e:	bf00      	nop
 8007760:	dfbffffe 	.word	0xdfbffffe

08007764 <_fflush_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	690b      	ldr	r3, [r1, #16]
 8007768:	4605      	mov	r5, r0
 800776a:	460c      	mov	r4, r1
 800776c:	b913      	cbnz	r3, 8007774 <_fflush_r+0x10>
 800776e:	2500      	movs	r5, #0
 8007770:	4628      	mov	r0, r5
 8007772:	bd38      	pop	{r3, r4, r5, pc}
 8007774:	b118      	cbz	r0, 800777e <_fflush_r+0x1a>
 8007776:	6a03      	ldr	r3, [r0, #32]
 8007778:	b90b      	cbnz	r3, 800777e <_fflush_r+0x1a>
 800777a:	f7ff fa99 	bl	8006cb0 <__sinit>
 800777e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f3      	beq.n	800776e <_fflush_r+0xa>
 8007786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007788:	07d0      	lsls	r0, r2, #31
 800778a:	d404      	bmi.n	8007796 <_fflush_r+0x32>
 800778c:	0599      	lsls	r1, r3, #22
 800778e:	d402      	bmi.n	8007796 <_fflush_r+0x32>
 8007790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007792:	f7ff fb92 	bl	8006eba <__retarget_lock_acquire_recursive>
 8007796:	4628      	mov	r0, r5
 8007798:	4621      	mov	r1, r4
 800779a:	f7ff ff5d 	bl	8007658 <__sflush_r>
 800779e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077a0:	07da      	lsls	r2, r3, #31
 80077a2:	4605      	mov	r5, r0
 80077a4:	d4e4      	bmi.n	8007770 <_fflush_r+0xc>
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	059b      	lsls	r3, r3, #22
 80077aa:	d4e1      	bmi.n	8007770 <_fflush_r+0xc>
 80077ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ae:	f7ff fb85 	bl	8006ebc <__retarget_lock_release_recursive>
 80077b2:	e7dd      	b.n	8007770 <_fflush_r+0xc>

080077b4 <__swbuf_r>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	460e      	mov	r6, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	4605      	mov	r5, r0
 80077bc:	b118      	cbz	r0, 80077c6 <__swbuf_r+0x12>
 80077be:	6a03      	ldr	r3, [r0, #32]
 80077c0:	b90b      	cbnz	r3, 80077c6 <__swbuf_r+0x12>
 80077c2:	f7ff fa75 	bl	8006cb0 <__sinit>
 80077c6:	69a3      	ldr	r3, [r4, #24]
 80077c8:	60a3      	str	r3, [r4, #8]
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	071a      	lsls	r2, r3, #28
 80077ce:	d525      	bpl.n	800781c <__swbuf_r+0x68>
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	b31b      	cbz	r3, 800781c <__swbuf_r+0x68>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	1a98      	subs	r0, r3, r2
 80077da:	6963      	ldr	r3, [r4, #20]
 80077dc:	b2f6      	uxtb	r6, r6
 80077de:	4283      	cmp	r3, r0
 80077e0:	4637      	mov	r7, r6
 80077e2:	dc04      	bgt.n	80077ee <__swbuf_r+0x3a>
 80077e4:	4621      	mov	r1, r4
 80077e6:	4628      	mov	r0, r5
 80077e8:	f7ff ffbc 	bl	8007764 <_fflush_r>
 80077ec:	b9e0      	cbnz	r0, 8007828 <__swbuf_r+0x74>
 80077ee:	68a3      	ldr	r3, [r4, #8]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	60a3      	str	r3, [r4, #8]
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	6022      	str	r2, [r4, #0]
 80077fa:	701e      	strb	r6, [r3, #0]
 80077fc:	6962      	ldr	r2, [r4, #20]
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	429a      	cmp	r2, r3
 8007802:	d004      	beq.n	800780e <__swbuf_r+0x5a>
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	07db      	lsls	r3, r3, #31
 8007808:	d506      	bpl.n	8007818 <__swbuf_r+0x64>
 800780a:	2e0a      	cmp	r6, #10
 800780c:	d104      	bne.n	8007818 <__swbuf_r+0x64>
 800780e:	4621      	mov	r1, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f7ff ffa7 	bl	8007764 <_fflush_r>
 8007816:	b938      	cbnz	r0, 8007828 <__swbuf_r+0x74>
 8007818:	4638      	mov	r0, r7
 800781a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800781c:	4621      	mov	r1, r4
 800781e:	4628      	mov	r0, r5
 8007820:	f000 f806 	bl	8007830 <__swsetup_r>
 8007824:	2800      	cmp	r0, #0
 8007826:	d0d5      	beq.n	80077d4 <__swbuf_r+0x20>
 8007828:	f04f 37ff 	mov.w	r7, #4294967295
 800782c:	e7f4      	b.n	8007818 <__swbuf_r+0x64>
	...

08007830 <__swsetup_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4b2a      	ldr	r3, [pc, #168]	; (80078dc <__swsetup_r+0xac>)
 8007834:	4605      	mov	r5, r0
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	460c      	mov	r4, r1
 800783a:	b118      	cbz	r0, 8007844 <__swsetup_r+0x14>
 800783c:	6a03      	ldr	r3, [r0, #32]
 800783e:	b90b      	cbnz	r3, 8007844 <__swsetup_r+0x14>
 8007840:	f7ff fa36 	bl	8006cb0 <__sinit>
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800784a:	0718      	lsls	r0, r3, #28
 800784c:	d422      	bmi.n	8007894 <__swsetup_r+0x64>
 800784e:	06d9      	lsls	r1, r3, #27
 8007850:	d407      	bmi.n	8007862 <__swsetup_r+0x32>
 8007852:	2309      	movs	r3, #9
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	f04f 30ff 	mov.w	r0, #4294967295
 8007860:	e034      	b.n	80078cc <__swsetup_r+0x9c>
 8007862:	0758      	lsls	r0, r3, #29
 8007864:	d512      	bpl.n	800788c <__swsetup_r+0x5c>
 8007866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007868:	b141      	cbz	r1, 800787c <__swsetup_r+0x4c>
 800786a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800786e:	4299      	cmp	r1, r3
 8007870:	d002      	beq.n	8007878 <__swsetup_r+0x48>
 8007872:	4628      	mov	r0, r5
 8007874:	f7ff fb24 	bl	8006ec0 <_free_r>
 8007878:	2300      	movs	r3, #0
 800787a:	6363      	str	r3, [r4, #52]	; 0x34
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	2300      	movs	r3, #0
 8007886:	6063      	str	r3, [r4, #4]
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	f043 0308 	orr.w	r3, r3, #8
 8007892:	81a3      	strh	r3, [r4, #12]
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	b94b      	cbnz	r3, 80078ac <__swsetup_r+0x7c>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800789e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a2:	d003      	beq.n	80078ac <__swsetup_r+0x7c>
 80078a4:	4621      	mov	r1, r4
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 f850 	bl	800794c <__smakebuf_r>
 80078ac:	89a0      	ldrh	r0, [r4, #12]
 80078ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078b2:	f010 0301 	ands.w	r3, r0, #1
 80078b6:	d00a      	beq.n	80078ce <__swsetup_r+0x9e>
 80078b8:	2300      	movs	r3, #0
 80078ba:	60a3      	str	r3, [r4, #8]
 80078bc:	6963      	ldr	r3, [r4, #20]
 80078be:	425b      	negs	r3, r3
 80078c0:	61a3      	str	r3, [r4, #24]
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	b943      	cbnz	r3, 80078d8 <__swsetup_r+0xa8>
 80078c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078ca:	d1c4      	bne.n	8007856 <__swsetup_r+0x26>
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	0781      	lsls	r1, r0, #30
 80078d0:	bf58      	it	pl
 80078d2:	6963      	ldrpl	r3, [r4, #20]
 80078d4:	60a3      	str	r3, [r4, #8]
 80078d6:	e7f4      	b.n	80078c2 <__swsetup_r+0x92>
 80078d8:	2000      	movs	r0, #0
 80078da:	e7f7      	b.n	80078cc <__swsetup_r+0x9c>
 80078dc:	2000008c 	.word	0x2000008c

080078e0 <_sbrk_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	; (80078fc <_sbrk_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa fcd2 	bl	8002294 <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_sbrk_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_sbrk_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000f8c 	.word	0x20000f8c

08007900 <__swhatbuf_r>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	460c      	mov	r4, r1
 8007904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007908:	2900      	cmp	r1, #0
 800790a:	b096      	sub	sp, #88	; 0x58
 800790c:	4615      	mov	r5, r2
 800790e:	461e      	mov	r6, r3
 8007910:	da0d      	bge.n	800792e <__swhatbuf_r+0x2e>
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007918:	f04f 0100 	mov.w	r1, #0
 800791c:	bf0c      	ite	eq
 800791e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007922:	2340      	movne	r3, #64	; 0x40
 8007924:	2000      	movs	r0, #0
 8007926:	6031      	str	r1, [r6, #0]
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	b016      	add	sp, #88	; 0x58
 800792c:	bd70      	pop	{r4, r5, r6, pc}
 800792e:	466a      	mov	r2, sp
 8007930:	f000 f848 	bl	80079c4 <_fstat_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	dbec      	blt.n	8007912 <__swhatbuf_r+0x12>
 8007938:	9901      	ldr	r1, [sp, #4]
 800793a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800793e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007942:	4259      	negs	r1, r3
 8007944:	4159      	adcs	r1, r3
 8007946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800794a:	e7eb      	b.n	8007924 <__swhatbuf_r+0x24>

0800794c <__smakebuf_r>:
 800794c:	898b      	ldrh	r3, [r1, #12]
 800794e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007950:	079d      	lsls	r5, r3, #30
 8007952:	4606      	mov	r6, r0
 8007954:	460c      	mov	r4, r1
 8007956:	d507      	bpl.n	8007968 <__smakebuf_r+0x1c>
 8007958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	6123      	str	r3, [r4, #16]
 8007960:	2301      	movs	r3, #1
 8007962:	6163      	str	r3, [r4, #20]
 8007964:	b002      	add	sp, #8
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	ab01      	add	r3, sp, #4
 800796a:	466a      	mov	r2, sp
 800796c:	f7ff ffc8 	bl	8007900 <__swhatbuf_r>
 8007970:	9900      	ldr	r1, [sp, #0]
 8007972:	4605      	mov	r5, r0
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff fb0f 	bl	8006f98 <_malloc_r>
 800797a:	b948      	cbnz	r0, 8007990 <__smakebuf_r+0x44>
 800797c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007980:	059a      	lsls	r2, r3, #22
 8007982:	d4ef      	bmi.n	8007964 <__smakebuf_r+0x18>
 8007984:	f023 0303 	bic.w	r3, r3, #3
 8007988:	f043 0302 	orr.w	r3, r3, #2
 800798c:	81a3      	strh	r3, [r4, #12]
 800798e:	e7e3      	b.n	8007958 <__smakebuf_r+0xc>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	6020      	str	r0, [r4, #0]
 8007994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	9b00      	ldr	r3, [sp, #0]
 800799c:	6163      	str	r3, [r4, #20]
 800799e:	9b01      	ldr	r3, [sp, #4]
 80079a0:	6120      	str	r0, [r4, #16]
 80079a2:	b15b      	cbz	r3, 80079bc <__smakebuf_r+0x70>
 80079a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f81d 	bl	80079e8 <_isatty_r>
 80079ae:	b128      	cbz	r0, 80079bc <__smakebuf_r+0x70>
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f023 0303 	bic.w	r3, r3, #3
 80079b6:	f043 0301 	orr.w	r3, r3, #1
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	431d      	orrs	r5, r3
 80079c0:	81a5      	strh	r5, [r4, #12]
 80079c2:	e7cf      	b.n	8007964 <__smakebuf_r+0x18>

080079c4 <_fstat_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4d07      	ldr	r5, [pc, #28]	; (80079e4 <_fstat_r+0x20>)
 80079c8:	2300      	movs	r3, #0
 80079ca:	4604      	mov	r4, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	4611      	mov	r1, r2
 80079d0:	602b      	str	r3, [r5, #0]
 80079d2:	f7fa fc36 	bl	8002242 <_fstat>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	d102      	bne.n	80079e0 <_fstat_r+0x1c>
 80079da:	682b      	ldr	r3, [r5, #0]
 80079dc:	b103      	cbz	r3, 80079e0 <_fstat_r+0x1c>
 80079de:	6023      	str	r3, [r4, #0]
 80079e0:	bd38      	pop	{r3, r4, r5, pc}
 80079e2:	bf00      	nop
 80079e4:	20000f8c 	.word	0x20000f8c

080079e8 <_isatty_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	4d06      	ldr	r5, [pc, #24]	; (8007a04 <_isatty_r+0x1c>)
 80079ec:	2300      	movs	r3, #0
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	602b      	str	r3, [r5, #0]
 80079f4:	f7fa fc35 	bl	8002262 <_isatty>
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	d102      	bne.n	8007a02 <_isatty_r+0x1a>
 80079fc:	682b      	ldr	r3, [r5, #0]
 80079fe:	b103      	cbz	r3, 8007a02 <_isatty_r+0x1a>
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	20000f8c 	.word	0x20000f8c

08007a08 <tan>:
 8007a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a0a:	ec53 2b10 	vmov	r2, r3, d0
 8007a0e:	4816      	ldr	r0, [pc, #88]	; (8007a68 <tan+0x60>)
 8007a10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a14:	4281      	cmp	r1, r0
 8007a16:	dc07      	bgt.n	8007a28 <tan+0x20>
 8007a18:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007a60 <tan+0x58>
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	b005      	add	sp, #20
 8007a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a24:	f000 b824 	b.w	8007a70 <__kernel_tan>
 8007a28:	4810      	ldr	r0, [pc, #64]	; (8007a6c <tan+0x64>)
 8007a2a:	4281      	cmp	r1, r0
 8007a2c:	dd09      	ble.n	8007a42 <tan+0x3a>
 8007a2e:	ee10 0a10 	vmov	r0, s0
 8007a32:	4619      	mov	r1, r3
 8007a34:	f7f8 fc40 	bl	80002b8 <__aeabi_dsub>
 8007a38:	ec41 0b10 	vmov	d0, r0, r1
 8007a3c:	b005      	add	sp, #20
 8007a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a42:	4668      	mov	r0, sp
 8007a44:	f000 fa20 	bl	8007e88 <__ieee754_rem_pio2>
 8007a48:	0040      	lsls	r0, r0, #1
 8007a4a:	f000 0002 	and.w	r0, r0, #2
 8007a4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a52:	ed9d 0b00 	vldr	d0, [sp]
 8007a56:	f1c0 0001 	rsb	r0, r0, #1
 8007a5a:	f000 f809 	bl	8007a70 <__kernel_tan>
 8007a5e:	e7ed      	b.n	8007a3c <tan+0x34>
	...
 8007a68:	3fe921fb 	.word	0x3fe921fb
 8007a6c:	7fefffff 	.word	0x7fefffff

08007a70 <__kernel_tan>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	ed2d 8b06 	vpush	{d8-d10}
 8007a78:	ec5b ab10 	vmov	sl, fp, d0
 8007a7c:	4be0      	ldr	r3, [pc, #896]	; (8007e00 <__kernel_tan+0x390>)
 8007a7e:	b083      	sub	sp, #12
 8007a80:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8007a84:	429f      	cmp	r7, r3
 8007a86:	ec59 8b11 	vmov	r8, r9, d1
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	f8cd b000 	str.w	fp, [sp]
 8007a90:	dc61      	bgt.n	8007b56 <__kernel_tan+0xe6>
 8007a92:	ee10 0a10 	vmov	r0, s0
 8007a96:	4659      	mov	r1, fp
 8007a98:	f7f9 f860 	bl	8000b5c <__aeabi_d2iz>
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f040 8083 	bne.w	8007baa <__kernel_tan+0x13a>
 8007aa4:	1c73      	adds	r3, r6, #1
 8007aa6:	4652      	mov	r2, sl
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	433b      	orrs	r3, r7
 8007aac:	d112      	bne.n	8007ad4 <__kernel_tan+0x64>
 8007aae:	ec4b ab10 	vmov	d0, sl, fp
 8007ab2:	f000 fbef 	bl	8008294 <fabs>
 8007ab6:	49d3      	ldr	r1, [pc, #844]	; (8007e04 <__kernel_tan+0x394>)
 8007ab8:	ec53 2b10 	vmov	r2, r3, d0
 8007abc:	2000      	movs	r0, #0
 8007abe:	f7f8 fedd 	bl	800087c <__aeabi_ddiv>
 8007ac2:	4682      	mov	sl, r0
 8007ac4:	468b      	mov	fp, r1
 8007ac6:	ec4b ab10 	vmov	d0, sl, fp
 8007aca:	b003      	add	sp, #12
 8007acc:	ecbd 8b06 	vpop	{d8-d10}
 8007ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad4:	2e01      	cmp	r6, #1
 8007ad6:	d0f6      	beq.n	8007ac6 <__kernel_tan+0x56>
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	4650      	mov	r0, sl
 8007ade:	4659      	mov	r1, fp
 8007ae0:	f7f8 fbec 	bl	80002bc <__adddf3>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	460f      	mov	r7, r1
 8007aea:	2000      	movs	r0, #0
 8007aec:	49c6      	ldr	r1, [pc, #792]	; (8007e08 <__kernel_tan+0x398>)
 8007aee:	f7f8 fec5 	bl	800087c <__aeabi_ddiv>
 8007af2:	e9cd 0100 	strd	r0, r1, [sp]
 8007af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007afa:	462e      	mov	r6, r5
 8007afc:	4652      	mov	r2, sl
 8007afe:	462c      	mov	r4, r5
 8007b00:	4630      	mov	r0, r6
 8007b02:	461d      	mov	r5, r3
 8007b04:	4639      	mov	r1, r7
 8007b06:	465b      	mov	r3, fp
 8007b08:	f7f8 fbd6 	bl	80002b8 <__aeabi_dsub>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	f7f8 fbd0 	bl	80002b8 <__aeabi_dsub>
 8007b18:	4632      	mov	r2, r6
 8007b1a:	462b      	mov	r3, r5
 8007b1c:	f7f8 fd84 	bl	8000628 <__aeabi_dmul>
 8007b20:	4632      	mov	r2, r6
 8007b22:	4680      	mov	r8, r0
 8007b24:	4689      	mov	r9, r1
 8007b26:	462b      	mov	r3, r5
 8007b28:	4630      	mov	r0, r6
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f8 fd7c 	bl	8000628 <__aeabi_dmul>
 8007b30:	4bb4      	ldr	r3, [pc, #720]	; (8007e04 <__kernel_tan+0x394>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fbc2 	bl	80002bc <__adddf3>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4649      	mov	r1, r9
 8007b40:	f7f8 fbbc 	bl	80002bc <__adddf3>
 8007b44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b48:	f7f8 fd6e 	bl	8000628 <__aeabi_dmul>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	462b      	mov	r3, r5
 8007b50:	f7f8 fbb4 	bl	80002bc <__adddf3>
 8007b54:	e7b5      	b.n	8007ac2 <__kernel_tan+0x52>
 8007b56:	4bad      	ldr	r3, [pc, #692]	; (8007e0c <__kernel_tan+0x39c>)
 8007b58:	429f      	cmp	r7, r3
 8007b5a:	dd26      	ble.n	8007baa <__kernel_tan+0x13a>
 8007b5c:	9b00      	ldr	r3, [sp, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	da09      	bge.n	8007b76 <__kernel_tan+0x106>
 8007b62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b66:	469b      	mov	fp, r3
 8007b68:	ee10 aa10 	vmov	sl, s0
 8007b6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b70:	ee11 8a10 	vmov	r8, s2
 8007b74:	4699      	mov	r9, r3
 8007b76:	4652      	mov	r2, sl
 8007b78:	465b      	mov	r3, fp
 8007b7a:	a183      	add	r1, pc, #524	; (adr r1, 8007d88 <__kernel_tan+0x318>)
 8007b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b80:	f7f8 fb9a 	bl	80002b8 <__aeabi_dsub>
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	4604      	mov	r4, r0
 8007b8a:	460d      	mov	r5, r1
 8007b8c:	a180      	add	r1, pc, #512	; (adr r1, 8007d90 <__kernel_tan+0x320>)
 8007b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b92:	f7f8 fb91 	bl	80002b8 <__aeabi_dsub>
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	f7f8 fb8f 	bl	80002bc <__adddf3>
 8007b9e:	f04f 0800 	mov.w	r8, #0
 8007ba2:	4682      	mov	sl, r0
 8007ba4:	468b      	mov	fp, r1
 8007ba6:	f04f 0900 	mov.w	r9, #0
 8007baa:	4652      	mov	r2, sl
 8007bac:	465b      	mov	r3, fp
 8007bae:	4650      	mov	r0, sl
 8007bb0:	4659      	mov	r1, fp
 8007bb2:	f7f8 fd39 	bl	8000628 <__aeabi_dmul>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	ec43 2b18 	vmov	d8, r2, r3
 8007bbe:	f7f8 fd33 	bl	8000628 <__aeabi_dmul>
 8007bc2:	ec53 2b18 	vmov	r2, r3, d8
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	460d      	mov	r5, r1
 8007bca:	4650      	mov	r0, sl
 8007bcc:	4659      	mov	r1, fp
 8007bce:	f7f8 fd2b 	bl	8000628 <__aeabi_dmul>
 8007bd2:	a371      	add	r3, pc, #452	; (adr r3, 8007d98 <__kernel_tan+0x328>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	ec41 0b19 	vmov	d9, r0, r1
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	f7f8 fd22 	bl	8000628 <__aeabi_dmul>
 8007be4:	a36e      	add	r3, pc, #440	; (adr r3, 8007da0 <__kernel_tan+0x330>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f7f8 fb67 	bl	80002bc <__adddf3>
 8007bee:	4622      	mov	r2, r4
 8007bf0:	462b      	mov	r3, r5
 8007bf2:	f7f8 fd19 	bl	8000628 <__aeabi_dmul>
 8007bf6:	a36c      	add	r3, pc, #432	; (adr r3, 8007da8 <__kernel_tan+0x338>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	f7f8 fb5e 	bl	80002bc <__adddf3>
 8007c00:	4622      	mov	r2, r4
 8007c02:	462b      	mov	r3, r5
 8007c04:	f7f8 fd10 	bl	8000628 <__aeabi_dmul>
 8007c08:	a369      	add	r3, pc, #420	; (adr r3, 8007db0 <__kernel_tan+0x340>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 fb55 	bl	80002bc <__adddf3>
 8007c12:	4622      	mov	r2, r4
 8007c14:	462b      	mov	r3, r5
 8007c16:	f7f8 fd07 	bl	8000628 <__aeabi_dmul>
 8007c1a:	a367      	add	r3, pc, #412	; (adr r3, 8007db8 <__kernel_tan+0x348>)
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f7f8 fb4c 	bl	80002bc <__adddf3>
 8007c24:	4622      	mov	r2, r4
 8007c26:	462b      	mov	r3, r5
 8007c28:	f7f8 fcfe 	bl	8000628 <__aeabi_dmul>
 8007c2c:	a364      	add	r3, pc, #400	; (adr r3, 8007dc0 <__kernel_tan+0x350>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fb43 	bl	80002bc <__adddf3>
 8007c36:	ec53 2b18 	vmov	r2, r3, d8
 8007c3a:	f7f8 fcf5 	bl	8000628 <__aeabi_dmul>
 8007c3e:	a362      	add	r3, pc, #392	; (adr r3, 8007dc8 <__kernel_tan+0x358>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	ec41 0b1a 	vmov	d10, r0, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fcec 	bl	8000628 <__aeabi_dmul>
 8007c50:	a35f      	add	r3, pc, #380	; (adr r3, 8007dd0 <__kernel_tan+0x360>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fb31 	bl	80002bc <__adddf3>
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	f7f8 fce3 	bl	8000628 <__aeabi_dmul>
 8007c62:	a35d      	add	r3, pc, #372	; (adr r3, 8007dd8 <__kernel_tan+0x368>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f7f8 fb28 	bl	80002bc <__adddf3>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 fcda 	bl	8000628 <__aeabi_dmul>
 8007c74:	a35a      	add	r3, pc, #360	; (adr r3, 8007de0 <__kernel_tan+0x370>)
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f7f8 fb1f 	bl	80002bc <__adddf3>
 8007c7e:	4622      	mov	r2, r4
 8007c80:	462b      	mov	r3, r5
 8007c82:	f7f8 fcd1 	bl	8000628 <__aeabi_dmul>
 8007c86:	a358      	add	r3, pc, #352	; (adr r3, 8007de8 <__kernel_tan+0x378>)
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f7f8 fb16 	bl	80002bc <__adddf3>
 8007c90:	4622      	mov	r2, r4
 8007c92:	462b      	mov	r3, r5
 8007c94:	f7f8 fcc8 	bl	8000628 <__aeabi_dmul>
 8007c98:	a355      	add	r3, pc, #340	; (adr r3, 8007df0 <__kernel_tan+0x380>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 fb0d 	bl	80002bc <__adddf3>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	ec51 0b1a 	vmov	r0, r1, d10
 8007caa:	f7f8 fb07 	bl	80002bc <__adddf3>
 8007cae:	ec53 2b19 	vmov	r2, r3, d9
 8007cb2:	f7f8 fcb9 	bl	8000628 <__aeabi_dmul>
 8007cb6:	4642      	mov	r2, r8
 8007cb8:	464b      	mov	r3, r9
 8007cba:	f7f8 faff 	bl	80002bc <__adddf3>
 8007cbe:	ec53 2b18 	vmov	r2, r3, d8
 8007cc2:	f7f8 fcb1 	bl	8000628 <__aeabi_dmul>
 8007cc6:	4642      	mov	r2, r8
 8007cc8:	464b      	mov	r3, r9
 8007cca:	f7f8 faf7 	bl	80002bc <__adddf3>
 8007cce:	a34a      	add	r3, pc, #296	; (adr r3, 8007df8 <__kernel_tan+0x388>)
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	ec51 0b19 	vmov	r0, r1, d9
 8007cdc:	f7f8 fca4 	bl	8000628 <__aeabi_dmul>
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	f7f8 faea 	bl	80002bc <__adddf3>
 8007ce8:	460b      	mov	r3, r1
 8007cea:	ec41 0b18 	vmov	d8, r0, r1
 8007cee:	4602      	mov	r2, r0
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	f7f8 fae2 	bl	80002bc <__adddf3>
 8007cf8:	4b44      	ldr	r3, [pc, #272]	; (8007e0c <__kernel_tan+0x39c>)
 8007cfa:	429f      	cmp	r7, r3
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	f340 8086 	ble.w	8007e10 <__kernel_tan+0x3a0>
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7f8 fc25 	bl	8000554 <__aeabi_i2d>
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4680      	mov	r8, r0
 8007d0e:	4689      	mov	r9, r1
 8007d10:	462b      	mov	r3, r5
 8007d12:	4620      	mov	r0, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	f7f8 fc87 	bl	8000628 <__aeabi_dmul>
 8007d1a:	4642      	mov	r2, r8
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	460f      	mov	r7, r1
 8007d20:	464b      	mov	r3, r9
 8007d22:	4620      	mov	r0, r4
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7f8 fac9 	bl	80002bc <__adddf3>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4630      	mov	r0, r6
 8007d30:	4639      	mov	r1, r7
 8007d32:	f7f8 fda3 	bl	800087c <__aeabi_ddiv>
 8007d36:	ec53 2b18 	vmov	r2, r3, d8
 8007d3a:	f7f8 fabd 	bl	80002b8 <__aeabi_dsub>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4650      	mov	r0, sl
 8007d44:	4659      	mov	r1, fp
 8007d46:	f7f8 fab7 	bl	80002b8 <__aeabi_dsub>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	f7f8 fab5 	bl	80002bc <__adddf3>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4640      	mov	r0, r8
 8007d58:	4649      	mov	r1, r9
 8007d5a:	f7f8 faad 	bl	80002b8 <__aeabi_dsub>
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8007d64:	f00a 0a02 	and.w	sl, sl, #2
 8007d68:	4604      	mov	r4, r0
 8007d6a:	f1ca 0001 	rsb	r0, sl, #1
 8007d6e:	460d      	mov	r5, r1
 8007d70:	f7f8 fbf0 	bl	8000554 <__aeabi_i2d>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4620      	mov	r0, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	f7f8 fc54 	bl	8000628 <__aeabi_dmul>
 8007d80:	e69f      	b.n	8007ac2 <__kernel_tan+0x52>
 8007d82:	bf00      	nop
 8007d84:	f3af 8000 	nop.w
 8007d88:	54442d18 	.word	0x54442d18
 8007d8c:	3fe921fb 	.word	0x3fe921fb
 8007d90:	33145c07 	.word	0x33145c07
 8007d94:	3c81a626 	.word	0x3c81a626
 8007d98:	74bf7ad4 	.word	0x74bf7ad4
 8007d9c:	3efb2a70 	.word	0x3efb2a70
 8007da0:	32f0a7e9 	.word	0x32f0a7e9
 8007da4:	3f12b80f 	.word	0x3f12b80f
 8007da8:	1a8d1068 	.word	0x1a8d1068
 8007dac:	3f3026f7 	.word	0x3f3026f7
 8007db0:	fee08315 	.word	0xfee08315
 8007db4:	3f57dbc8 	.word	0x3f57dbc8
 8007db8:	e96e8493 	.word	0xe96e8493
 8007dbc:	3f8226e3 	.word	0x3f8226e3
 8007dc0:	1bb341fe 	.word	0x1bb341fe
 8007dc4:	3faba1ba 	.word	0x3faba1ba
 8007dc8:	db605373 	.word	0xdb605373
 8007dcc:	bef375cb 	.word	0xbef375cb
 8007dd0:	a03792a6 	.word	0xa03792a6
 8007dd4:	3f147e88 	.word	0x3f147e88
 8007dd8:	f2f26501 	.word	0xf2f26501
 8007ddc:	3f4344d8 	.word	0x3f4344d8
 8007de0:	c9560328 	.word	0xc9560328
 8007de4:	3f6d6d22 	.word	0x3f6d6d22
 8007de8:	8406d637 	.word	0x8406d637
 8007dec:	3f9664f4 	.word	0x3f9664f4
 8007df0:	1110fe7a 	.word	0x1110fe7a
 8007df4:	3fc11111 	.word	0x3fc11111
 8007df8:	55555563 	.word	0x55555563
 8007dfc:	3fd55555 	.word	0x3fd55555
 8007e00:	3e2fffff 	.word	0x3e2fffff
 8007e04:	3ff00000 	.word	0x3ff00000
 8007e08:	bff00000 	.word	0xbff00000
 8007e0c:	3fe59427 	.word	0x3fe59427
 8007e10:	2e01      	cmp	r6, #1
 8007e12:	d02f      	beq.n	8007e74 <__kernel_tan+0x404>
 8007e14:	460f      	mov	r7, r1
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	4917      	ldr	r1, [pc, #92]	; (8007e7c <__kernel_tan+0x40c>)
 8007e20:	f7f8 fd2c 	bl	800087c <__aeabi_ddiv>
 8007e24:	2600      	movs	r6, #0
 8007e26:	e9cd 0100 	strd	r0, r1, [sp]
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	465b      	mov	r3, fp
 8007e2e:	4630      	mov	r0, r6
 8007e30:	4639      	mov	r1, r7
 8007e32:	f7f8 fa41 	bl	80002b8 <__aeabi_dsub>
 8007e36:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	ec51 0b18 	vmov	r0, r1, d8
 8007e42:	f7f8 fa39 	bl	80002b8 <__aeabi_dsub>
 8007e46:	4632      	mov	r2, r6
 8007e48:	462b      	mov	r3, r5
 8007e4a:	f7f8 fbed 	bl	8000628 <__aeabi_dmul>
 8007e4e:	46b0      	mov	r8, r6
 8007e50:	460f      	mov	r7, r1
 8007e52:	4642      	mov	r2, r8
 8007e54:	462b      	mov	r3, r5
 8007e56:	4634      	mov	r4, r6
 8007e58:	4649      	mov	r1, r9
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	f7f8 fbe3 	bl	8000628 <__aeabi_dmul>
 8007e62:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <__kernel_tan+0x410>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	f7f8 fa29 	bl	80002bc <__adddf3>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4630      	mov	r0, r6
 8007e70:	4639      	mov	r1, r7
 8007e72:	e665      	b.n	8007b40 <__kernel_tan+0xd0>
 8007e74:	4682      	mov	sl, r0
 8007e76:	468b      	mov	fp, r1
 8007e78:	e625      	b.n	8007ac6 <__kernel_tan+0x56>
 8007e7a:	bf00      	nop
 8007e7c:	bff00000 	.word	0xbff00000
 8007e80:	3ff00000 	.word	0x3ff00000
 8007e84:	00000000 	.word	0x00000000

08007e88 <__ieee754_rem_pio2>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	ed2d 8b02 	vpush	{d8}
 8007e90:	ec55 4b10 	vmov	r4, r5, d0
 8007e94:	4bca      	ldr	r3, [pc, #808]	; (80081c0 <__ieee754_rem_pio2+0x338>)
 8007e96:	b08b      	sub	sp, #44	; 0x2c
 8007e98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007e9c:	4598      	cmp	r8, r3
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	9502      	str	r5, [sp, #8]
 8007ea2:	dc08      	bgt.n	8007eb6 <__ieee754_rem_pio2+0x2e>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	ed80 0b00 	vstr	d0, [r0]
 8007eac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007eb0:	f04f 0b00 	mov.w	fp, #0
 8007eb4:	e028      	b.n	8007f08 <__ieee754_rem_pio2+0x80>
 8007eb6:	4bc3      	ldr	r3, [pc, #780]	; (80081c4 <__ieee754_rem_pio2+0x33c>)
 8007eb8:	4598      	cmp	r8, r3
 8007eba:	dc78      	bgt.n	8007fae <__ieee754_rem_pio2+0x126>
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	4ec2      	ldr	r6, [pc, #776]	; (80081c8 <__ieee754_rem_pio2+0x340>)
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	ee10 0a10 	vmov	r0, s0
 8007ec6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008188 <__ieee754_rem_pio2+0x300>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	4629      	mov	r1, r5
 8007ece:	dd39      	ble.n	8007f44 <__ieee754_rem_pio2+0xbc>
 8007ed0:	f7f8 f9f2 	bl	80002b8 <__aeabi_dsub>
 8007ed4:	45b0      	cmp	r8, r6
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	460d      	mov	r5, r1
 8007eda:	d01b      	beq.n	8007f14 <__ieee754_rem_pio2+0x8c>
 8007edc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008190 <__ieee754_rem_pio2+0x308>)
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f7f8 f9e9 	bl	80002b8 <__aeabi_dsub>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	e9ca 2300 	strd	r2, r3, [sl]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7f8 f9e1 	bl	80002b8 <__aeabi_dsub>
 8007ef6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008190 <__ieee754_rem_pio2+0x308>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 f9dc 	bl	80002b8 <__aeabi_dsub>
 8007f00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f04:	f04f 0b01 	mov.w	fp, #1
 8007f08:	4658      	mov	r0, fp
 8007f0a:	b00b      	add	sp, #44	; 0x2c
 8007f0c:	ecbd 8b02 	vpop	{d8}
 8007f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	a3a0      	add	r3, pc, #640	; (adr r3, 8008198 <__ieee754_rem_pio2+0x310>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 f9cd 	bl	80002b8 <__aeabi_dsub>
 8007f1e:	a3a0      	add	r3, pc, #640	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x318>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	f7f8 f9c6 	bl	80002b8 <__aeabi_dsub>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	e9ca 2300 	strd	r2, r3, [sl]
 8007f34:	4620      	mov	r0, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7f8 f9be 	bl	80002b8 <__aeabi_dsub>
 8007f3c:	a398      	add	r3, pc, #608	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x318>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	e7db      	b.n	8007efc <__ieee754_rem_pio2+0x74>
 8007f44:	f7f8 f9ba 	bl	80002bc <__adddf3>
 8007f48:	45b0      	cmp	r8, r6
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	d016      	beq.n	8007f7e <__ieee754_rem_pio2+0xf6>
 8007f50:	a38f      	add	r3, pc, #572	; (adr r3, 8008190 <__ieee754_rem_pio2+0x308>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 f9b1 	bl	80002bc <__adddf3>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	e9ca 2300 	strd	r2, r3, [sl]
 8007f62:	4620      	mov	r0, r4
 8007f64:	4629      	mov	r1, r5
 8007f66:	f7f8 f9a7 	bl	80002b8 <__aeabi_dsub>
 8007f6a:	a389      	add	r3, pc, #548	; (adr r3, 8008190 <__ieee754_rem_pio2+0x308>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 f9a4 	bl	80002bc <__adddf3>
 8007f74:	f04f 3bff 	mov.w	fp, #4294967295
 8007f78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f7c:	e7c4      	b.n	8007f08 <__ieee754_rem_pio2+0x80>
 8007f7e:	a386      	add	r3, pc, #536	; (adr r3, 8008198 <__ieee754_rem_pio2+0x310>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 f99a 	bl	80002bc <__adddf3>
 8007f88:	a385      	add	r3, pc, #532	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x318>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	4604      	mov	r4, r0
 8007f90:	460d      	mov	r5, r1
 8007f92:	f7f8 f993 	bl	80002bc <__adddf3>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	e9ca 2300 	strd	r2, r3, [sl]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f7f8 f989 	bl	80002b8 <__aeabi_dsub>
 8007fa6:	a37e      	add	r3, pc, #504	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x318>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	e7e0      	b.n	8007f70 <__ieee754_rem_pio2+0xe8>
 8007fae:	4b87      	ldr	r3, [pc, #540]	; (80081cc <__ieee754_rem_pio2+0x344>)
 8007fb0:	4598      	cmp	r8, r3
 8007fb2:	f300 80d8 	bgt.w	8008166 <__ieee754_rem_pio2+0x2de>
 8007fb6:	f000 f96d 	bl	8008294 <fabs>
 8007fba:	ec55 4b10 	vmov	r4, r5, d0
 8007fbe:	ee10 0a10 	vmov	r0, s0
 8007fc2:	a379      	add	r3, pc, #484	; (adr r3, 80081a8 <__ieee754_rem_pio2+0x320>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	4629      	mov	r1, r5
 8007fca:	f7f8 fb2d 	bl	8000628 <__aeabi_dmul>
 8007fce:	4b80      	ldr	r3, [pc, #512]	; (80081d0 <__ieee754_rem_pio2+0x348>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f7f8 f973 	bl	80002bc <__adddf3>
 8007fd6:	f7f8 fdc1 	bl	8000b5c <__aeabi_d2iz>
 8007fda:	4683      	mov	fp, r0
 8007fdc:	f7f8 faba 	bl	8000554 <__aeabi_i2d>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	ec43 2b18 	vmov	d8, r2, r3
 8007fe8:	a367      	add	r3, pc, #412	; (adr r3, 8008188 <__ieee754_rem_pio2+0x300>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fb1b 	bl	8000628 <__aeabi_dmul>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 f95d 	bl	80002b8 <__aeabi_dsub>
 8007ffe:	a364      	add	r3, pc, #400	; (adr r3, 8008190 <__ieee754_rem_pio2+0x308>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	4606      	mov	r6, r0
 8008006:	460f      	mov	r7, r1
 8008008:	ec51 0b18 	vmov	r0, r1, d8
 800800c:	f7f8 fb0c 	bl	8000628 <__aeabi_dmul>
 8008010:	f1bb 0f1f 	cmp.w	fp, #31
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	dc0d      	bgt.n	8008036 <__ieee754_rem_pio2+0x1ae>
 800801a:	4b6e      	ldr	r3, [pc, #440]	; (80081d4 <__ieee754_rem_pio2+0x34c>)
 800801c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008024:	4543      	cmp	r3, r8
 8008026:	d006      	beq.n	8008036 <__ieee754_rem_pio2+0x1ae>
 8008028:	4622      	mov	r2, r4
 800802a:	462b      	mov	r3, r5
 800802c:	4630      	mov	r0, r6
 800802e:	4639      	mov	r1, r7
 8008030:	f7f8 f942 	bl	80002b8 <__aeabi_dsub>
 8008034:	e00e      	b.n	8008054 <__ieee754_rem_pio2+0x1cc>
 8008036:	462b      	mov	r3, r5
 8008038:	4622      	mov	r2, r4
 800803a:	4630      	mov	r0, r6
 800803c:	4639      	mov	r1, r7
 800803e:	f7f8 f93b 	bl	80002b8 <__aeabi_dsub>
 8008042:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008046:	9303      	str	r3, [sp, #12]
 8008048:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800804c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008050:	2b10      	cmp	r3, #16
 8008052:	dc02      	bgt.n	800805a <__ieee754_rem_pio2+0x1d2>
 8008054:	e9ca 0100 	strd	r0, r1, [sl]
 8008058:	e039      	b.n	80080ce <__ieee754_rem_pio2+0x246>
 800805a:	a34f      	add	r3, pc, #316	; (adr r3, 8008198 <__ieee754_rem_pio2+0x310>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	ec51 0b18 	vmov	r0, r1, d8
 8008064:	f7f8 fae0 	bl	8000628 <__aeabi_dmul>
 8008068:	4604      	mov	r4, r0
 800806a:	460d      	mov	r5, r1
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 f920 	bl	80002b8 <__aeabi_dsub>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4680      	mov	r8, r0
 800807e:	4689      	mov	r9, r1
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f918 	bl	80002b8 <__aeabi_dsub>
 8008088:	4622      	mov	r2, r4
 800808a:	462b      	mov	r3, r5
 800808c:	f7f8 f914 	bl	80002b8 <__aeabi_dsub>
 8008090:	a343      	add	r3, pc, #268	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x318>)
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	4604      	mov	r4, r0
 8008098:	460d      	mov	r5, r1
 800809a:	ec51 0b18 	vmov	r0, r1, d8
 800809e:	f7f8 fac3 	bl	8000628 <__aeabi_dmul>
 80080a2:	4622      	mov	r2, r4
 80080a4:	462b      	mov	r3, r5
 80080a6:	f7f8 f907 	bl	80002b8 <__aeabi_dsub>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4604      	mov	r4, r0
 80080b0:	460d      	mov	r5, r1
 80080b2:	4640      	mov	r0, r8
 80080b4:	4649      	mov	r1, r9
 80080b6:	f7f8 f8ff 	bl	80002b8 <__aeabi_dsub>
 80080ba:	9a03      	ldr	r2, [sp, #12]
 80080bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b31      	cmp	r3, #49	; 0x31
 80080c4:	dc24      	bgt.n	8008110 <__ieee754_rem_pio2+0x288>
 80080c6:	e9ca 0100 	strd	r0, r1, [sl]
 80080ca:	4646      	mov	r6, r8
 80080cc:	464f      	mov	r7, r9
 80080ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80080d2:	4630      	mov	r0, r6
 80080d4:	4642      	mov	r2, r8
 80080d6:	464b      	mov	r3, r9
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 f8ed 	bl	80002b8 <__aeabi_dsub>
 80080de:	462b      	mov	r3, r5
 80080e0:	4622      	mov	r2, r4
 80080e2:	f7f8 f8e9 	bl	80002b8 <__aeabi_dsub>
 80080e6:	9b02      	ldr	r3, [sp, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80080ee:	f6bf af0b 	bge.w	8007f08 <__ieee754_rem_pio2+0x80>
 80080f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80080f6:	f8ca 3004 	str.w	r3, [sl, #4]
 80080fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080fe:	f8ca 8000 	str.w	r8, [sl]
 8008102:	f8ca 0008 	str.w	r0, [sl, #8]
 8008106:	f8ca 300c 	str.w	r3, [sl, #12]
 800810a:	f1cb 0b00 	rsb	fp, fp, #0
 800810e:	e6fb      	b.n	8007f08 <__ieee754_rem_pio2+0x80>
 8008110:	a327      	add	r3, pc, #156	; (adr r3, 80081b0 <__ieee754_rem_pio2+0x328>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	ec51 0b18 	vmov	r0, r1, d8
 800811a:	f7f8 fa85 	bl	8000628 <__aeabi_dmul>
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4640      	mov	r0, r8
 8008128:	4649      	mov	r1, r9
 800812a:	f7f8 f8c5 	bl	80002b8 <__aeabi_dsub>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4606      	mov	r6, r0
 8008134:	460f      	mov	r7, r1
 8008136:	4640      	mov	r0, r8
 8008138:	4649      	mov	r1, r9
 800813a:	f7f8 f8bd 	bl	80002b8 <__aeabi_dsub>
 800813e:	4622      	mov	r2, r4
 8008140:	462b      	mov	r3, r5
 8008142:	f7f8 f8b9 	bl	80002b8 <__aeabi_dsub>
 8008146:	a31c      	add	r3, pc, #112	; (adr r3, 80081b8 <__ieee754_rem_pio2+0x330>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	ec51 0b18 	vmov	r0, r1, d8
 8008154:	f7f8 fa68 	bl	8000628 <__aeabi_dmul>
 8008158:	4622      	mov	r2, r4
 800815a:	462b      	mov	r3, r5
 800815c:	f7f8 f8ac 	bl	80002b8 <__aeabi_dsub>
 8008160:	4604      	mov	r4, r0
 8008162:	460d      	mov	r5, r1
 8008164:	e760      	b.n	8008028 <__ieee754_rem_pio2+0x1a0>
 8008166:	4b1c      	ldr	r3, [pc, #112]	; (80081d8 <__ieee754_rem_pio2+0x350>)
 8008168:	4598      	cmp	r8, r3
 800816a:	dd37      	ble.n	80081dc <__ieee754_rem_pio2+0x354>
 800816c:	ee10 2a10 	vmov	r2, s0
 8008170:	462b      	mov	r3, r5
 8008172:	4620      	mov	r0, r4
 8008174:	4629      	mov	r1, r5
 8008176:	f7f8 f89f 	bl	80002b8 <__aeabi_dsub>
 800817a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800817e:	e9ca 0100 	strd	r0, r1, [sl]
 8008182:	e695      	b.n	8007eb0 <__ieee754_rem_pio2+0x28>
 8008184:	f3af 8000 	nop.w
 8008188:	54400000 	.word	0x54400000
 800818c:	3ff921fb 	.word	0x3ff921fb
 8008190:	1a626331 	.word	0x1a626331
 8008194:	3dd0b461 	.word	0x3dd0b461
 8008198:	1a600000 	.word	0x1a600000
 800819c:	3dd0b461 	.word	0x3dd0b461
 80081a0:	2e037073 	.word	0x2e037073
 80081a4:	3ba3198a 	.word	0x3ba3198a
 80081a8:	6dc9c883 	.word	0x6dc9c883
 80081ac:	3fe45f30 	.word	0x3fe45f30
 80081b0:	2e000000 	.word	0x2e000000
 80081b4:	3ba3198a 	.word	0x3ba3198a
 80081b8:	252049c1 	.word	0x252049c1
 80081bc:	397b839a 	.word	0x397b839a
 80081c0:	3fe921fb 	.word	0x3fe921fb
 80081c4:	4002d97b 	.word	0x4002d97b
 80081c8:	3ff921fb 	.word	0x3ff921fb
 80081cc:	413921fb 	.word	0x413921fb
 80081d0:	3fe00000 	.word	0x3fe00000
 80081d4:	08008d00 	.word	0x08008d00
 80081d8:	7fefffff 	.word	0x7fefffff
 80081dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80081e0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80081e4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80081e8:	4620      	mov	r0, r4
 80081ea:	460d      	mov	r5, r1
 80081ec:	f7f8 fcb6 	bl	8000b5c <__aeabi_d2iz>
 80081f0:	f7f8 f9b0 	bl	8000554 <__aeabi_i2d>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4620      	mov	r0, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008200:	f7f8 f85a 	bl	80002b8 <__aeabi_dsub>
 8008204:	4b21      	ldr	r3, [pc, #132]	; (800828c <__ieee754_rem_pio2+0x404>)
 8008206:	2200      	movs	r2, #0
 8008208:	f7f8 fa0e 	bl	8000628 <__aeabi_dmul>
 800820c:	460d      	mov	r5, r1
 800820e:	4604      	mov	r4, r0
 8008210:	f7f8 fca4 	bl	8000b5c <__aeabi_d2iz>
 8008214:	f7f8 f99e 	bl	8000554 <__aeabi_i2d>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4620      	mov	r0, r4
 800821e:	4629      	mov	r1, r5
 8008220:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008224:	f7f8 f848 	bl	80002b8 <__aeabi_dsub>
 8008228:	4b18      	ldr	r3, [pc, #96]	; (800828c <__ieee754_rem_pio2+0x404>)
 800822a:	2200      	movs	r2, #0
 800822c:	f7f8 f9fc 	bl	8000628 <__aeabi_dmul>
 8008230:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008234:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008238:	2703      	movs	r7, #3
 800823a:	2400      	movs	r4, #0
 800823c:	2500      	movs	r5, #0
 800823e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008242:	4622      	mov	r2, r4
 8008244:	462b      	mov	r3, r5
 8008246:	46b9      	mov	r9, r7
 8008248:	3f01      	subs	r7, #1
 800824a:	f7f8 fc55 	bl	8000af8 <__aeabi_dcmpeq>
 800824e:	2800      	cmp	r0, #0
 8008250:	d1f5      	bne.n	800823e <__ieee754_rem_pio2+0x3b6>
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <__ieee754_rem_pio2+0x408>)
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	2302      	movs	r3, #2
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	4632      	mov	r2, r6
 800825c:	464b      	mov	r3, r9
 800825e:	4651      	mov	r1, sl
 8008260:	a804      	add	r0, sp, #16
 8008262:	f000 f821 	bl	80082a8 <__kernel_rem_pio2>
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	4683      	mov	fp, r0
 800826c:	f6bf ae4c 	bge.w	8007f08 <__ieee754_rem_pio2+0x80>
 8008270:	e9da 2100 	ldrd	r2, r1, [sl]
 8008274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008278:	e9ca 2300 	strd	r2, r3, [sl]
 800827c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008284:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008288:	e73f      	b.n	800810a <__ieee754_rem_pio2+0x282>
 800828a:	bf00      	nop
 800828c:	41700000 	.word	0x41700000
 8008290:	08008d80 	.word	0x08008d80

08008294 <fabs>:
 8008294:	ec51 0b10 	vmov	r0, r1, d0
 8008298:	ee10 2a10 	vmov	r2, s0
 800829c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082a0:	ec43 2b10 	vmov	d0, r2, r3
 80082a4:	4770      	bx	lr
	...

080082a8 <__kernel_rem_pio2>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	ed2d 8b02 	vpush	{d8}
 80082b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80082b4:	f112 0f14 	cmn.w	r2, #20
 80082b8:	9306      	str	r3, [sp, #24]
 80082ba:	9104      	str	r1, [sp, #16]
 80082bc:	4bc2      	ldr	r3, [pc, #776]	; (80085c8 <__kernel_rem_pio2+0x320>)
 80082be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80082c0:	9009      	str	r0, [sp, #36]	; 0x24
 80082c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	9b06      	ldr	r3, [sp, #24]
 80082ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80082ce:	bfa8      	it	ge
 80082d0:	1ed4      	subge	r4, r2, #3
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	bfb2      	itee	lt
 80082d6:	2400      	movlt	r4, #0
 80082d8:	2318      	movge	r3, #24
 80082da:	fb94 f4f3 	sdivge	r4, r4, r3
 80082de:	f06f 0317 	mvn.w	r3, #23
 80082e2:	fb04 3303 	mla	r3, r4, r3, r3
 80082e6:	eb03 0a02 	add.w	sl, r3, r2
 80082ea:	9b00      	ldr	r3, [sp, #0]
 80082ec:	9a05      	ldr	r2, [sp, #20]
 80082ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80085b8 <__kernel_rem_pio2+0x310>
 80082f2:	eb03 0802 	add.w	r8, r3, r2
 80082f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80082f8:	1aa7      	subs	r7, r4, r2
 80082fa:	ae20      	add	r6, sp, #128	; 0x80
 80082fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008300:	2500      	movs	r5, #0
 8008302:	4545      	cmp	r5, r8
 8008304:	dd13      	ble.n	800832e <__kernel_rem_pio2+0x86>
 8008306:	9b06      	ldr	r3, [sp, #24]
 8008308:	aa20      	add	r2, sp, #128	; 0x80
 800830a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800830e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008312:	f04f 0800 	mov.w	r8, #0
 8008316:	9b00      	ldr	r3, [sp, #0]
 8008318:	4598      	cmp	r8, r3
 800831a:	dc31      	bgt.n	8008380 <__kernel_rem_pio2+0xd8>
 800831c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80085b8 <__kernel_rem_pio2+0x310>
 8008320:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008324:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008328:	462f      	mov	r7, r5
 800832a:	2600      	movs	r6, #0
 800832c:	e01b      	b.n	8008366 <__kernel_rem_pio2+0xbe>
 800832e:	42ef      	cmn	r7, r5
 8008330:	d407      	bmi.n	8008342 <__kernel_rem_pio2+0x9a>
 8008332:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008336:	f7f8 f90d 	bl	8000554 <__aeabi_i2d>
 800833a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800833e:	3501      	adds	r5, #1
 8008340:	e7df      	b.n	8008302 <__kernel_rem_pio2+0x5a>
 8008342:	ec51 0b18 	vmov	r0, r1, d8
 8008346:	e7f8      	b.n	800833a <__kernel_rem_pio2+0x92>
 8008348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800834c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008350:	f7f8 f96a 	bl	8000628 <__aeabi_dmul>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800835c:	f7f7 ffae 	bl	80002bc <__adddf3>
 8008360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008364:	3601      	adds	r6, #1
 8008366:	9b05      	ldr	r3, [sp, #20]
 8008368:	429e      	cmp	r6, r3
 800836a:	f1a7 0708 	sub.w	r7, r7, #8
 800836e:	ddeb      	ble.n	8008348 <__kernel_rem_pio2+0xa0>
 8008370:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008374:	f108 0801 	add.w	r8, r8, #1
 8008378:	ecab 7b02 	vstmia	fp!, {d7}
 800837c:	3508      	adds	r5, #8
 800837e:	e7ca      	b.n	8008316 <__kernel_rem_pio2+0x6e>
 8008380:	9b00      	ldr	r3, [sp, #0]
 8008382:	aa0c      	add	r2, sp, #48	; 0x30
 8008384:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008388:	930b      	str	r3, [sp, #44]	; 0x2c
 800838a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800838c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008390:	9c00      	ldr	r4, [sp, #0]
 8008392:	930a      	str	r3, [sp, #40]	; 0x28
 8008394:	00e3      	lsls	r3, r4, #3
 8008396:	9308      	str	r3, [sp, #32]
 8008398:	ab98      	add	r3, sp, #608	; 0x260
 800839a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800839e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80083a2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80083a6:	ab70      	add	r3, sp, #448	; 0x1c0
 80083a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80083ac:	46c3      	mov	fp, r8
 80083ae:	46a1      	mov	r9, r4
 80083b0:	f1b9 0f00 	cmp.w	r9, #0
 80083b4:	f1a5 0508 	sub.w	r5, r5, #8
 80083b8:	dc77      	bgt.n	80084aa <__kernel_rem_pio2+0x202>
 80083ba:	ec47 6b10 	vmov	d0, r6, r7
 80083be:	4650      	mov	r0, sl
 80083c0:	f000 fac2 	bl	8008948 <scalbn>
 80083c4:	ec57 6b10 	vmov	r6, r7, d0
 80083c8:	2200      	movs	r2, #0
 80083ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80083ce:	ee10 0a10 	vmov	r0, s0
 80083d2:	4639      	mov	r1, r7
 80083d4:	f7f8 f928 	bl	8000628 <__aeabi_dmul>
 80083d8:	ec41 0b10 	vmov	d0, r0, r1
 80083dc:	f000 fb34 	bl	8008a48 <floor>
 80083e0:	4b7a      	ldr	r3, [pc, #488]	; (80085cc <__kernel_rem_pio2+0x324>)
 80083e2:	ec51 0b10 	vmov	r0, r1, d0
 80083e6:	2200      	movs	r2, #0
 80083e8:	f7f8 f91e 	bl	8000628 <__aeabi_dmul>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f7 ff60 	bl	80002b8 <__aeabi_dsub>
 80083f8:	460f      	mov	r7, r1
 80083fa:	4606      	mov	r6, r0
 80083fc:	f7f8 fbae 	bl	8000b5c <__aeabi_d2iz>
 8008400:	9002      	str	r0, [sp, #8]
 8008402:	f7f8 f8a7 	bl	8000554 <__aeabi_i2d>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4630      	mov	r0, r6
 800840c:	4639      	mov	r1, r7
 800840e:	f7f7 ff53 	bl	80002b8 <__aeabi_dsub>
 8008412:	f1ba 0f00 	cmp.w	sl, #0
 8008416:	4606      	mov	r6, r0
 8008418:	460f      	mov	r7, r1
 800841a:	dd6d      	ble.n	80084f8 <__kernel_rem_pio2+0x250>
 800841c:	1e61      	subs	r1, r4, #1
 800841e:	ab0c      	add	r3, sp, #48	; 0x30
 8008420:	9d02      	ldr	r5, [sp, #8]
 8008422:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008426:	f1ca 0018 	rsb	r0, sl, #24
 800842a:	fa43 f200 	asr.w	r2, r3, r0
 800842e:	4415      	add	r5, r2
 8008430:	4082      	lsls	r2, r0
 8008432:	1a9b      	subs	r3, r3, r2
 8008434:	aa0c      	add	r2, sp, #48	; 0x30
 8008436:	9502      	str	r5, [sp, #8]
 8008438:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800843c:	f1ca 0217 	rsb	r2, sl, #23
 8008440:	fa43 fb02 	asr.w	fp, r3, r2
 8008444:	f1bb 0f00 	cmp.w	fp, #0
 8008448:	dd65      	ble.n	8008516 <__kernel_rem_pio2+0x26e>
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	2200      	movs	r2, #0
 800844e:	3301      	adds	r3, #1
 8008450:	9302      	str	r3, [sp, #8]
 8008452:	4615      	mov	r5, r2
 8008454:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008458:	4294      	cmp	r4, r2
 800845a:	f300 809f 	bgt.w	800859c <__kernel_rem_pio2+0x2f4>
 800845e:	f1ba 0f00 	cmp.w	sl, #0
 8008462:	dd07      	ble.n	8008474 <__kernel_rem_pio2+0x1cc>
 8008464:	f1ba 0f01 	cmp.w	sl, #1
 8008468:	f000 80c1 	beq.w	80085ee <__kernel_rem_pio2+0x346>
 800846c:	f1ba 0f02 	cmp.w	sl, #2
 8008470:	f000 80c7 	beq.w	8008602 <__kernel_rem_pio2+0x35a>
 8008474:	f1bb 0f02 	cmp.w	fp, #2
 8008478:	d14d      	bne.n	8008516 <__kernel_rem_pio2+0x26e>
 800847a:	4632      	mov	r2, r6
 800847c:	463b      	mov	r3, r7
 800847e:	4954      	ldr	r1, [pc, #336]	; (80085d0 <__kernel_rem_pio2+0x328>)
 8008480:	2000      	movs	r0, #0
 8008482:	f7f7 ff19 	bl	80002b8 <__aeabi_dsub>
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	2d00      	cmp	r5, #0
 800848c:	d043      	beq.n	8008516 <__kernel_rem_pio2+0x26e>
 800848e:	4650      	mov	r0, sl
 8008490:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80085c0 <__kernel_rem_pio2+0x318>
 8008494:	f000 fa58 	bl	8008948 <scalbn>
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	ec53 2b10 	vmov	r2, r3, d0
 80084a0:	f7f7 ff0a 	bl	80002b8 <__aeabi_dsub>
 80084a4:	4606      	mov	r6, r0
 80084a6:	460f      	mov	r7, r1
 80084a8:	e035      	b.n	8008516 <__kernel_rem_pio2+0x26e>
 80084aa:	4b4a      	ldr	r3, [pc, #296]	; (80085d4 <__kernel_rem_pio2+0x32c>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 f8b9 	bl	8000628 <__aeabi_dmul>
 80084b6:	f7f8 fb51 	bl	8000b5c <__aeabi_d2iz>
 80084ba:	f7f8 f84b 	bl	8000554 <__aeabi_i2d>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	ec43 2b18 	vmov	d8, r2, r3
 80084c6:	4b44      	ldr	r3, [pc, #272]	; (80085d8 <__kernel_rem_pio2+0x330>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	f7f8 f8ad 	bl	8000628 <__aeabi_dmul>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4630      	mov	r0, r6
 80084d4:	4639      	mov	r1, r7
 80084d6:	f7f7 feef 	bl	80002b8 <__aeabi_dsub>
 80084da:	f7f8 fb3f 	bl	8000b5c <__aeabi_d2iz>
 80084de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084e2:	f84b 0b04 	str.w	r0, [fp], #4
 80084e6:	ec51 0b18 	vmov	r0, r1, d8
 80084ea:	f7f7 fee7 	bl	80002bc <__adddf3>
 80084ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	e75b      	b.n	80083b0 <__kernel_rem_pio2+0x108>
 80084f8:	d106      	bne.n	8008508 <__kernel_rem_pio2+0x260>
 80084fa:	1e63      	subs	r3, r4, #1
 80084fc:	aa0c      	add	r2, sp, #48	; 0x30
 80084fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008502:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008506:	e79d      	b.n	8008444 <__kernel_rem_pio2+0x19c>
 8008508:	4b34      	ldr	r3, [pc, #208]	; (80085dc <__kernel_rem_pio2+0x334>)
 800850a:	2200      	movs	r2, #0
 800850c:	f7f8 fb12 	bl	8000b34 <__aeabi_dcmpge>
 8008510:	2800      	cmp	r0, #0
 8008512:	d140      	bne.n	8008596 <__kernel_rem_pio2+0x2ee>
 8008514:	4683      	mov	fp, r0
 8008516:	2200      	movs	r2, #0
 8008518:	2300      	movs	r3, #0
 800851a:	4630      	mov	r0, r6
 800851c:	4639      	mov	r1, r7
 800851e:	f7f8 faeb 	bl	8000af8 <__aeabi_dcmpeq>
 8008522:	2800      	cmp	r0, #0
 8008524:	f000 80c1 	beq.w	80086aa <__kernel_rem_pio2+0x402>
 8008528:	1e65      	subs	r5, r4, #1
 800852a:	462b      	mov	r3, r5
 800852c:	2200      	movs	r2, #0
 800852e:	9900      	ldr	r1, [sp, #0]
 8008530:	428b      	cmp	r3, r1
 8008532:	da6d      	bge.n	8008610 <__kernel_rem_pio2+0x368>
 8008534:	2a00      	cmp	r2, #0
 8008536:	f000 808a 	beq.w	800864e <__kernel_rem_pio2+0x3a6>
 800853a:	ab0c      	add	r3, sp, #48	; 0x30
 800853c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008540:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 80ae 	beq.w	80086a6 <__kernel_rem_pio2+0x3fe>
 800854a:	4650      	mov	r0, sl
 800854c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80085c0 <__kernel_rem_pio2+0x318>
 8008550:	f000 f9fa 	bl	8008948 <scalbn>
 8008554:	1c6b      	adds	r3, r5, #1
 8008556:	00da      	lsls	r2, r3, #3
 8008558:	9205      	str	r2, [sp, #20]
 800855a:	ec57 6b10 	vmov	r6, r7, d0
 800855e:	aa70      	add	r2, sp, #448	; 0x1c0
 8008560:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80085d4 <__kernel_rem_pio2+0x32c>
 8008564:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008568:	462c      	mov	r4, r5
 800856a:	f04f 0800 	mov.w	r8, #0
 800856e:	2c00      	cmp	r4, #0
 8008570:	f280 80d4 	bge.w	800871c <__kernel_rem_pio2+0x474>
 8008574:	462c      	mov	r4, r5
 8008576:	2c00      	cmp	r4, #0
 8008578:	f2c0 8102 	blt.w	8008780 <__kernel_rem_pio2+0x4d8>
 800857c:	4b18      	ldr	r3, [pc, #96]	; (80085e0 <__kernel_rem_pio2+0x338>)
 800857e:	461e      	mov	r6, r3
 8008580:	ab70      	add	r3, sp, #448	; 0x1c0
 8008582:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008586:	1b2b      	subs	r3, r5, r4
 8008588:	f04f 0900 	mov.w	r9, #0
 800858c:	f04f 0a00 	mov.w	sl, #0
 8008590:	2700      	movs	r7, #0
 8008592:	9306      	str	r3, [sp, #24]
 8008594:	e0e6      	b.n	8008764 <__kernel_rem_pio2+0x4bc>
 8008596:	f04f 0b02 	mov.w	fp, #2
 800859a:	e756      	b.n	800844a <__kernel_rem_pio2+0x1a2>
 800859c:	f8d8 3000 	ldr.w	r3, [r8]
 80085a0:	bb05      	cbnz	r5, 80085e4 <__kernel_rem_pio2+0x33c>
 80085a2:	b123      	cbz	r3, 80085ae <__kernel_rem_pio2+0x306>
 80085a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80085a8:	f8c8 3000 	str.w	r3, [r8]
 80085ac:	2301      	movs	r3, #1
 80085ae:	3201      	adds	r2, #1
 80085b0:	f108 0804 	add.w	r8, r8, #4
 80085b4:	461d      	mov	r5, r3
 80085b6:	e74f      	b.n	8008458 <__kernel_rem_pio2+0x1b0>
	...
 80085c4:	3ff00000 	.word	0x3ff00000
 80085c8:	08008ec8 	.word	0x08008ec8
 80085cc:	40200000 	.word	0x40200000
 80085d0:	3ff00000 	.word	0x3ff00000
 80085d4:	3e700000 	.word	0x3e700000
 80085d8:	41700000 	.word	0x41700000
 80085dc:	3fe00000 	.word	0x3fe00000
 80085e0:	08008e88 	.word	0x08008e88
 80085e4:	1acb      	subs	r3, r1, r3
 80085e6:	f8c8 3000 	str.w	r3, [r8]
 80085ea:	462b      	mov	r3, r5
 80085ec:	e7df      	b.n	80085ae <__kernel_rem_pio2+0x306>
 80085ee:	1e62      	subs	r2, r4, #1
 80085f0:	ab0c      	add	r3, sp, #48	; 0x30
 80085f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80085fa:	a90c      	add	r1, sp, #48	; 0x30
 80085fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008600:	e738      	b.n	8008474 <__kernel_rem_pio2+0x1cc>
 8008602:	1e62      	subs	r2, r4, #1
 8008604:	ab0c      	add	r3, sp, #48	; 0x30
 8008606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800860e:	e7f4      	b.n	80085fa <__kernel_rem_pio2+0x352>
 8008610:	a90c      	add	r1, sp, #48	; 0x30
 8008612:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008616:	3b01      	subs	r3, #1
 8008618:	430a      	orrs	r2, r1
 800861a:	e788      	b.n	800852e <__kernel_rem_pio2+0x286>
 800861c:	3301      	adds	r3, #1
 800861e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008622:	2900      	cmp	r1, #0
 8008624:	d0fa      	beq.n	800861c <__kernel_rem_pio2+0x374>
 8008626:	9a08      	ldr	r2, [sp, #32]
 8008628:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800862c:	446a      	add	r2, sp
 800862e:	3a98      	subs	r2, #152	; 0x98
 8008630:	9208      	str	r2, [sp, #32]
 8008632:	9a06      	ldr	r2, [sp, #24]
 8008634:	a920      	add	r1, sp, #128	; 0x80
 8008636:	18a2      	adds	r2, r4, r2
 8008638:	18e3      	adds	r3, r4, r3
 800863a:	f104 0801 	add.w	r8, r4, #1
 800863e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	4543      	cmp	r3, r8
 8008648:	da04      	bge.n	8008654 <__kernel_rem_pio2+0x3ac>
 800864a:	461c      	mov	r4, r3
 800864c:	e6a2      	b.n	8008394 <__kernel_rem_pio2+0xec>
 800864e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008650:	2301      	movs	r3, #1
 8008652:	e7e4      	b.n	800861e <__kernel_rem_pio2+0x376>
 8008654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008656:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800865a:	f7f7 ff7b 	bl	8000554 <__aeabi_i2d>
 800865e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008664:	46ab      	mov	fp, r5
 8008666:	461c      	mov	r4, r3
 8008668:	f04f 0900 	mov.w	r9, #0
 800866c:	2600      	movs	r6, #0
 800866e:	2700      	movs	r7, #0
 8008670:	9b05      	ldr	r3, [sp, #20]
 8008672:	4599      	cmp	r9, r3
 8008674:	dd06      	ble.n	8008684 <__kernel_rem_pio2+0x3dc>
 8008676:	9b08      	ldr	r3, [sp, #32]
 8008678:	e8e3 6702 	strd	r6, r7, [r3], #8
 800867c:	f108 0801 	add.w	r8, r8, #1
 8008680:	9308      	str	r3, [sp, #32]
 8008682:	e7df      	b.n	8008644 <__kernel_rem_pio2+0x39c>
 8008684:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008688:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800868c:	f7f7 ffcc 	bl	8000628 <__aeabi_dmul>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4630      	mov	r0, r6
 8008696:	4639      	mov	r1, r7
 8008698:	f7f7 fe10 	bl	80002bc <__adddf3>
 800869c:	f109 0901 	add.w	r9, r9, #1
 80086a0:	4606      	mov	r6, r0
 80086a2:	460f      	mov	r7, r1
 80086a4:	e7e4      	b.n	8008670 <__kernel_rem_pio2+0x3c8>
 80086a6:	3d01      	subs	r5, #1
 80086a8:	e747      	b.n	800853a <__kernel_rem_pio2+0x292>
 80086aa:	ec47 6b10 	vmov	d0, r6, r7
 80086ae:	f1ca 0000 	rsb	r0, sl, #0
 80086b2:	f000 f949 	bl	8008948 <scalbn>
 80086b6:	ec57 6b10 	vmov	r6, r7, d0
 80086ba:	4ba0      	ldr	r3, [pc, #640]	; (800893c <__kernel_rem_pio2+0x694>)
 80086bc:	ee10 0a10 	vmov	r0, s0
 80086c0:	2200      	movs	r2, #0
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f8 fa36 	bl	8000b34 <__aeabi_dcmpge>
 80086c8:	b1f8      	cbz	r0, 800870a <__kernel_rem_pio2+0x462>
 80086ca:	4b9d      	ldr	r3, [pc, #628]	; (8008940 <__kernel_rem_pio2+0x698>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	4630      	mov	r0, r6
 80086d0:	4639      	mov	r1, r7
 80086d2:	f7f7 ffa9 	bl	8000628 <__aeabi_dmul>
 80086d6:	f7f8 fa41 	bl	8000b5c <__aeabi_d2iz>
 80086da:	4680      	mov	r8, r0
 80086dc:	f7f7 ff3a 	bl	8000554 <__aeabi_i2d>
 80086e0:	4b96      	ldr	r3, [pc, #600]	; (800893c <__kernel_rem_pio2+0x694>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	f7f7 ffa0 	bl	8000628 <__aeabi_dmul>
 80086e8:	460b      	mov	r3, r1
 80086ea:	4602      	mov	r2, r0
 80086ec:	4639      	mov	r1, r7
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7f7 fde2 	bl	80002b8 <__aeabi_dsub>
 80086f4:	f7f8 fa32 	bl	8000b5c <__aeabi_d2iz>
 80086f8:	1c65      	adds	r5, r4, #1
 80086fa:	ab0c      	add	r3, sp, #48	; 0x30
 80086fc:	f10a 0a18 	add.w	sl, sl, #24
 8008700:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008704:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008708:	e71f      	b.n	800854a <__kernel_rem_pio2+0x2a2>
 800870a:	4630      	mov	r0, r6
 800870c:	4639      	mov	r1, r7
 800870e:	f7f8 fa25 	bl	8000b5c <__aeabi_d2iz>
 8008712:	ab0c      	add	r3, sp, #48	; 0x30
 8008714:	4625      	mov	r5, r4
 8008716:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800871a:	e716      	b.n	800854a <__kernel_rem_pio2+0x2a2>
 800871c:	ab0c      	add	r3, sp, #48	; 0x30
 800871e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008722:	f7f7 ff17 	bl	8000554 <__aeabi_i2d>
 8008726:	4632      	mov	r2, r6
 8008728:	463b      	mov	r3, r7
 800872a:	f7f7 ff7d 	bl	8000628 <__aeabi_dmul>
 800872e:	4642      	mov	r2, r8
 8008730:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008734:	464b      	mov	r3, r9
 8008736:	4630      	mov	r0, r6
 8008738:	4639      	mov	r1, r7
 800873a:	f7f7 ff75 	bl	8000628 <__aeabi_dmul>
 800873e:	3c01      	subs	r4, #1
 8008740:	4606      	mov	r6, r0
 8008742:	460f      	mov	r7, r1
 8008744:	e713      	b.n	800856e <__kernel_rem_pio2+0x2c6>
 8008746:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800874a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800874e:	f7f7 ff6b 	bl	8000628 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4648      	mov	r0, r9
 8008758:	4651      	mov	r1, sl
 800875a:	f7f7 fdaf 	bl	80002bc <__adddf3>
 800875e:	3701      	adds	r7, #1
 8008760:	4681      	mov	r9, r0
 8008762:	468a      	mov	sl, r1
 8008764:	9b00      	ldr	r3, [sp, #0]
 8008766:	429f      	cmp	r7, r3
 8008768:	dc02      	bgt.n	8008770 <__kernel_rem_pio2+0x4c8>
 800876a:	9b06      	ldr	r3, [sp, #24]
 800876c:	429f      	cmp	r7, r3
 800876e:	ddea      	ble.n	8008746 <__kernel_rem_pio2+0x49e>
 8008770:	9a06      	ldr	r2, [sp, #24]
 8008772:	ab48      	add	r3, sp, #288	; 0x120
 8008774:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008778:	e9c6 9a00 	strd	r9, sl, [r6]
 800877c:	3c01      	subs	r4, #1
 800877e:	e6fa      	b.n	8008576 <__kernel_rem_pio2+0x2ce>
 8008780:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008782:	2b02      	cmp	r3, #2
 8008784:	dc0b      	bgt.n	800879e <__kernel_rem_pio2+0x4f6>
 8008786:	2b00      	cmp	r3, #0
 8008788:	dc39      	bgt.n	80087fe <__kernel_rem_pio2+0x556>
 800878a:	d05d      	beq.n	8008848 <__kernel_rem_pio2+0x5a0>
 800878c:	9b02      	ldr	r3, [sp, #8]
 800878e:	f003 0007 	and.w	r0, r3, #7
 8008792:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008796:	ecbd 8b02 	vpop	{d8}
 800879a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d1f3      	bne.n	800878c <__kernel_rem_pio2+0x4e4>
 80087a4:	9b05      	ldr	r3, [sp, #20]
 80087a6:	9500      	str	r5, [sp, #0]
 80087a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80087ac:	eb0d 0403 	add.w	r4, sp, r3
 80087b0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80087b4:	46a2      	mov	sl, r4
 80087b6:	9b00      	ldr	r3, [sp, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f1aa 0a08 	sub.w	sl, sl, #8
 80087be:	dc69      	bgt.n	8008894 <__kernel_rem_pio2+0x5ec>
 80087c0:	46aa      	mov	sl, r5
 80087c2:	f1ba 0f01 	cmp.w	sl, #1
 80087c6:	f1a4 0408 	sub.w	r4, r4, #8
 80087ca:	f300 8083 	bgt.w	80088d4 <__kernel_rem_pio2+0x62c>
 80087ce:	9c05      	ldr	r4, [sp, #20]
 80087d0:	ab48      	add	r3, sp, #288	; 0x120
 80087d2:	441c      	add	r4, r3
 80087d4:	2000      	movs	r0, #0
 80087d6:	2100      	movs	r1, #0
 80087d8:	2d01      	cmp	r5, #1
 80087da:	f300 809a 	bgt.w	8008912 <__kernel_rem_pio2+0x66a>
 80087de:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80087e2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80087e6:	f1bb 0f00 	cmp.w	fp, #0
 80087ea:	f040 8098 	bne.w	800891e <__kernel_rem_pio2+0x676>
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	e9c3 7800 	strd	r7, r8, [r3]
 80087f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80087f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80087fc:	e7c6      	b.n	800878c <__kernel_rem_pio2+0x4e4>
 80087fe:	9e05      	ldr	r6, [sp, #20]
 8008800:	ab48      	add	r3, sp, #288	; 0x120
 8008802:	441e      	add	r6, r3
 8008804:	462c      	mov	r4, r5
 8008806:	2000      	movs	r0, #0
 8008808:	2100      	movs	r1, #0
 800880a:	2c00      	cmp	r4, #0
 800880c:	da33      	bge.n	8008876 <__kernel_rem_pio2+0x5ce>
 800880e:	f1bb 0f00 	cmp.w	fp, #0
 8008812:	d036      	beq.n	8008882 <__kernel_rem_pio2+0x5da>
 8008814:	4602      	mov	r2, r0
 8008816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800881a:	9c04      	ldr	r4, [sp, #16]
 800881c:	e9c4 2300 	strd	r2, r3, [r4]
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008828:	f7f7 fd46 	bl	80002b8 <__aeabi_dsub>
 800882c:	ae4a      	add	r6, sp, #296	; 0x128
 800882e:	2401      	movs	r4, #1
 8008830:	42a5      	cmp	r5, r4
 8008832:	da29      	bge.n	8008888 <__kernel_rem_pio2+0x5e0>
 8008834:	f1bb 0f00 	cmp.w	fp, #0
 8008838:	d002      	beq.n	8008840 <__kernel_rem_pio2+0x598>
 800883a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800883e:	4619      	mov	r1, r3
 8008840:	9b04      	ldr	r3, [sp, #16]
 8008842:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008846:	e7a1      	b.n	800878c <__kernel_rem_pio2+0x4e4>
 8008848:	9c05      	ldr	r4, [sp, #20]
 800884a:	ab48      	add	r3, sp, #288	; 0x120
 800884c:	441c      	add	r4, r3
 800884e:	2000      	movs	r0, #0
 8008850:	2100      	movs	r1, #0
 8008852:	2d00      	cmp	r5, #0
 8008854:	da09      	bge.n	800886a <__kernel_rem_pio2+0x5c2>
 8008856:	f1bb 0f00 	cmp.w	fp, #0
 800885a:	d002      	beq.n	8008862 <__kernel_rem_pio2+0x5ba>
 800885c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008860:	4619      	mov	r1, r3
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	e9c3 0100 	strd	r0, r1, [r3]
 8008868:	e790      	b.n	800878c <__kernel_rem_pio2+0x4e4>
 800886a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800886e:	f7f7 fd25 	bl	80002bc <__adddf3>
 8008872:	3d01      	subs	r5, #1
 8008874:	e7ed      	b.n	8008852 <__kernel_rem_pio2+0x5aa>
 8008876:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800887a:	f7f7 fd1f 	bl	80002bc <__adddf3>
 800887e:	3c01      	subs	r4, #1
 8008880:	e7c3      	b.n	800880a <__kernel_rem_pio2+0x562>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	e7c8      	b.n	800881a <__kernel_rem_pio2+0x572>
 8008888:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800888c:	f7f7 fd16 	bl	80002bc <__adddf3>
 8008890:	3401      	adds	r4, #1
 8008892:	e7cd      	b.n	8008830 <__kernel_rem_pio2+0x588>
 8008894:	e9da 8900 	ldrd	r8, r9, [sl]
 8008898:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800889c:	9b00      	ldr	r3, [sp, #0]
 800889e:	3b01      	subs	r3, #1
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4632      	mov	r2, r6
 80088a4:	463b      	mov	r3, r7
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f7 fd07 	bl	80002bc <__adddf3>
 80088ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4640      	mov	r0, r8
 80088b8:	4649      	mov	r1, r9
 80088ba:	f7f7 fcfd 	bl	80002b8 <__aeabi_dsub>
 80088be:	4632      	mov	r2, r6
 80088c0:	463b      	mov	r3, r7
 80088c2:	f7f7 fcfb 	bl	80002bc <__adddf3>
 80088c6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80088ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088ce:	ed8a 7b00 	vstr	d7, [sl]
 80088d2:	e770      	b.n	80087b6 <__kernel_rem_pio2+0x50e>
 80088d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80088d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80088dc:	4640      	mov	r0, r8
 80088de:	4632      	mov	r2, r6
 80088e0:	463b      	mov	r3, r7
 80088e2:	4649      	mov	r1, r9
 80088e4:	f7f7 fcea 	bl	80002bc <__adddf3>
 80088e8:	e9cd 0100 	strd	r0, r1, [sp]
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4640      	mov	r0, r8
 80088f2:	4649      	mov	r1, r9
 80088f4:	f7f7 fce0 	bl	80002b8 <__aeabi_dsub>
 80088f8:	4632      	mov	r2, r6
 80088fa:	463b      	mov	r3, r7
 80088fc:	f7f7 fcde 	bl	80002bc <__adddf3>
 8008900:	ed9d 7b00 	vldr	d7, [sp]
 8008904:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008908:	ed84 7b00 	vstr	d7, [r4]
 800890c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008910:	e757      	b.n	80087c2 <__kernel_rem_pio2+0x51a>
 8008912:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008916:	f7f7 fcd1 	bl	80002bc <__adddf3>
 800891a:	3d01      	subs	r5, #1
 800891c:	e75c      	b.n	80087d8 <__kernel_rem_pio2+0x530>
 800891e:	9b04      	ldr	r3, [sp, #16]
 8008920:	9a04      	ldr	r2, [sp, #16]
 8008922:	601f      	str	r7, [r3, #0]
 8008924:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008928:	605c      	str	r4, [r3, #4]
 800892a:	609d      	str	r5, [r3, #8]
 800892c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008930:	60d3      	str	r3, [r2, #12]
 8008932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008936:	6110      	str	r0, [r2, #16]
 8008938:	6153      	str	r3, [r2, #20]
 800893a:	e727      	b.n	800878c <__kernel_rem_pio2+0x4e4>
 800893c:	41700000 	.word	0x41700000
 8008940:	3e700000 	.word	0x3e700000
 8008944:	00000000 	.word	0x00000000

08008948 <scalbn>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	ec55 4b10 	vmov	r4, r5, d0
 800894e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008952:	4606      	mov	r6, r0
 8008954:	462b      	mov	r3, r5
 8008956:	b999      	cbnz	r1, 8008980 <scalbn+0x38>
 8008958:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800895c:	4323      	orrs	r3, r4
 800895e:	d03f      	beq.n	80089e0 <scalbn+0x98>
 8008960:	4b35      	ldr	r3, [pc, #212]	; (8008a38 <scalbn+0xf0>)
 8008962:	4629      	mov	r1, r5
 8008964:	ee10 0a10 	vmov	r0, s0
 8008968:	2200      	movs	r2, #0
 800896a:	f7f7 fe5d 	bl	8000628 <__aeabi_dmul>
 800896e:	4b33      	ldr	r3, [pc, #204]	; (8008a3c <scalbn+0xf4>)
 8008970:	429e      	cmp	r6, r3
 8008972:	4604      	mov	r4, r0
 8008974:	460d      	mov	r5, r1
 8008976:	da10      	bge.n	800899a <scalbn+0x52>
 8008978:	a327      	add	r3, pc, #156	; (adr r3, 8008a18 <scalbn+0xd0>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	e01f      	b.n	80089c0 <scalbn+0x78>
 8008980:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008984:	4291      	cmp	r1, r2
 8008986:	d10c      	bne.n	80089a2 <scalbn+0x5a>
 8008988:	ee10 2a10 	vmov	r2, s0
 800898c:	4620      	mov	r0, r4
 800898e:	4629      	mov	r1, r5
 8008990:	f7f7 fc94 	bl	80002bc <__adddf3>
 8008994:	4604      	mov	r4, r0
 8008996:	460d      	mov	r5, r1
 8008998:	e022      	b.n	80089e0 <scalbn+0x98>
 800899a:	460b      	mov	r3, r1
 800899c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80089a0:	3936      	subs	r1, #54	; 0x36
 80089a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80089a6:	4296      	cmp	r6, r2
 80089a8:	dd0d      	ble.n	80089c6 <scalbn+0x7e>
 80089aa:	2d00      	cmp	r5, #0
 80089ac:	a11c      	add	r1, pc, #112	; (adr r1, 8008a20 <scalbn+0xd8>)
 80089ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b2:	da02      	bge.n	80089ba <scalbn+0x72>
 80089b4:	a11c      	add	r1, pc, #112	; (adr r1, 8008a28 <scalbn+0xe0>)
 80089b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ba:	a319      	add	r3, pc, #100	; (adr r3, 8008a20 <scalbn+0xd8>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fe32 	bl	8000628 <__aeabi_dmul>
 80089c4:	e7e6      	b.n	8008994 <scalbn+0x4c>
 80089c6:	1872      	adds	r2, r6, r1
 80089c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80089cc:	428a      	cmp	r2, r1
 80089ce:	dcec      	bgt.n	80089aa <scalbn+0x62>
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	dd08      	ble.n	80089e6 <scalbn+0x9e>
 80089d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80089d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80089e0:	ec45 4b10 	vmov	d0, r4, r5
 80089e4:	bd70      	pop	{r4, r5, r6, pc}
 80089e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80089ea:	da08      	bge.n	80089fe <scalbn+0xb6>
 80089ec:	2d00      	cmp	r5, #0
 80089ee:	a10a      	add	r1, pc, #40	; (adr r1, 8008a18 <scalbn+0xd0>)
 80089f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f4:	dac0      	bge.n	8008978 <scalbn+0x30>
 80089f6:	a10e      	add	r1, pc, #56	; (adr r1, 8008a30 <scalbn+0xe8>)
 80089f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089fc:	e7bc      	b.n	8008978 <scalbn+0x30>
 80089fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a02:	3236      	adds	r2, #54	; 0x36
 8008a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <scalbn+0xf8>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	e7d5      	b.n	80089c0 <scalbn+0x78>
 8008a14:	f3af 8000 	nop.w
 8008a18:	c2f8f359 	.word	0xc2f8f359
 8008a1c:	01a56e1f 	.word	0x01a56e1f
 8008a20:	8800759c 	.word	0x8800759c
 8008a24:	7e37e43c 	.word	0x7e37e43c
 8008a28:	8800759c 	.word	0x8800759c
 8008a2c:	fe37e43c 	.word	0xfe37e43c
 8008a30:	c2f8f359 	.word	0xc2f8f359
 8008a34:	81a56e1f 	.word	0x81a56e1f
 8008a38:	43500000 	.word	0x43500000
 8008a3c:	ffff3cb0 	.word	0xffff3cb0
 8008a40:	3c900000 	.word	0x3c900000
 8008a44:	00000000 	.word	0x00000000

08008a48 <floor>:
 8008a48:	ec51 0b10 	vmov	r0, r1, d0
 8008a4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a54:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008a58:	2e13      	cmp	r6, #19
 8008a5a:	ee10 5a10 	vmov	r5, s0
 8008a5e:	ee10 8a10 	vmov	r8, s0
 8008a62:	460c      	mov	r4, r1
 8008a64:	dc31      	bgt.n	8008aca <floor+0x82>
 8008a66:	2e00      	cmp	r6, #0
 8008a68:	da14      	bge.n	8008a94 <floor+0x4c>
 8008a6a:	a333      	add	r3, pc, #204	; (adr r3, 8008b38 <floor+0xf0>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fc24 	bl	80002bc <__adddf3>
 8008a74:	2200      	movs	r2, #0
 8008a76:	2300      	movs	r3, #0
 8008a78:	f7f8 f866 	bl	8000b48 <__aeabi_dcmpgt>
 8008a7c:	b138      	cbz	r0, 8008a8e <floor+0x46>
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	da53      	bge.n	8008b2a <floor+0xe2>
 8008a82:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008a86:	4325      	orrs	r5, r4
 8008a88:	d052      	beq.n	8008b30 <floor+0xe8>
 8008a8a:	4c2d      	ldr	r4, [pc, #180]	; (8008b40 <floor+0xf8>)
 8008a8c:	2500      	movs	r5, #0
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	e024      	b.n	8008ade <floor+0x96>
 8008a94:	4f2b      	ldr	r7, [pc, #172]	; (8008b44 <floor+0xfc>)
 8008a96:	4137      	asrs	r7, r6
 8008a98:	ea01 0307 	and.w	r3, r1, r7
 8008a9c:	4303      	orrs	r3, r0
 8008a9e:	d01e      	beq.n	8008ade <floor+0x96>
 8008aa0:	a325      	add	r3, pc, #148	; (adr r3, 8008b38 <floor+0xf0>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f7 fc09 	bl	80002bc <__adddf3>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2300      	movs	r3, #0
 8008aae:	f7f8 f84b 	bl	8000b48 <__aeabi_dcmpgt>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0eb      	beq.n	8008a8e <floor+0x46>
 8008ab6:	2c00      	cmp	r4, #0
 8008ab8:	bfbe      	ittt	lt
 8008aba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008abe:	4133      	asrlt	r3, r6
 8008ac0:	18e4      	addlt	r4, r4, r3
 8008ac2:	ea24 0407 	bic.w	r4, r4, r7
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	e7e1      	b.n	8008a8e <floor+0x46>
 8008aca:	2e33      	cmp	r6, #51	; 0x33
 8008acc:	dd0b      	ble.n	8008ae6 <floor+0x9e>
 8008ace:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ad2:	d104      	bne.n	8008ade <floor+0x96>
 8008ad4:	ee10 2a10 	vmov	r2, s0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	f7f7 fbef 	bl	80002bc <__adddf3>
 8008ade:	ec41 0b10 	vmov	d0, r0, r1
 8008ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008aea:	f04f 37ff 	mov.w	r7, #4294967295
 8008aee:	40df      	lsrs	r7, r3
 8008af0:	4238      	tst	r0, r7
 8008af2:	d0f4      	beq.n	8008ade <floor+0x96>
 8008af4:	a310      	add	r3, pc, #64	; (adr r3, 8008b38 <floor+0xf0>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f7f7 fbdf 	bl	80002bc <__adddf3>
 8008afe:	2200      	movs	r2, #0
 8008b00:	2300      	movs	r3, #0
 8008b02:	f7f8 f821 	bl	8000b48 <__aeabi_dcmpgt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d0c1      	beq.n	8008a8e <floor+0x46>
 8008b0a:	2c00      	cmp	r4, #0
 8008b0c:	da0a      	bge.n	8008b24 <floor+0xdc>
 8008b0e:	2e14      	cmp	r6, #20
 8008b10:	d101      	bne.n	8008b16 <floor+0xce>
 8008b12:	3401      	adds	r4, #1
 8008b14:	e006      	b.n	8008b24 <floor+0xdc>
 8008b16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	40b3      	lsls	r3, r6
 8008b1e:	441d      	add	r5, r3
 8008b20:	45a8      	cmp	r8, r5
 8008b22:	d8f6      	bhi.n	8008b12 <floor+0xca>
 8008b24:	ea25 0507 	bic.w	r5, r5, r7
 8008b28:	e7b1      	b.n	8008a8e <floor+0x46>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	462c      	mov	r4, r5
 8008b2e:	e7ae      	b.n	8008a8e <floor+0x46>
 8008b30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008b34:	e7ab      	b.n	8008a8e <floor+0x46>
 8008b36:	bf00      	nop
 8008b38:	8800759c 	.word	0x8800759c
 8008b3c:	7e37e43c 	.word	0x7e37e43c
 8008b40:	bff00000 	.word	0xbff00000
 8008b44:	000fffff 	.word	0x000fffff

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
